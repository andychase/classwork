from keras.layers import Activation, Convolution2D, Dropout, MaxPooling2D, Flatten
from keras.layers import Dense
from keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from skimage.filters import sobel
from sklearn.cross_validation import train_test_split
from keras.models import Sequential

from PIL import Image
import numpy as np
import os


img_rows = 128
img_cols = 128
img_channels = 1
batch_size = 32
nb_epoch = 20


def load_image(filename):
    try:
        img = Image.open(filename)
    except OSError:
        return
    img.load()
    img.thumbnail((img_cols, img_rows))
    a4im = Image.new('RGB',
                     (img_cols, img_rows),
                     (255, 255, 255))

    a4im.paste(img, (0, 0))

    return np.array(a4im.convert("L"))


def load_all_images(directory, category):
    for root, dirs, files in os.walk(directory):
        for file in files:
            orig_image = load_image(os.path.join(root, file))
            if orig_image is None:
                continue
            image = np.array([orig_image])

            yield image, category, file


android_images = list(load_all_images('images/android', 0))
iphone_images_w = list(load_all_images('images/iphone_white', 1))
iphone_images_b = list(load_all_images('images/iphone_black', 1))
nb_classes = 2
print("img load")

train, test = train_test_split(android_images + iphone_images_w + iphone_images_b)
data_train, labels_train, names_train = zip(*train)
data_test, labels_test, names_test = zip(*test)
data_train, labels_train, data_test, labels_test = \
    np.array(data_train), np.array(labels_train), np.array(data_test), np.array(labels_test)

Y_train = np_utils.to_categorical(labels_train, nb_classes)
Y_test = np_utils.to_categorical(labels_test, nb_classes)

X_train = data_train.astype('float32')
X_test = data_test.astype('float32')
X_train /= 255
X_test /= 255

model = Sequential()

model.add(Convolution2D(32, 3, 3, border_mode='same',
                        input_shape=(img_channels, img_rows, img_cols)))
model.add(Activation('relu'))
model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(64, 3, 3, border_mode='same'))
model.add(Activation('relu'))
model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

print("compiled")

datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images

datagen.fit(X_train)

print("data generator built")

# fit the model on the batches generated by datagen.flow()
model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),
                    samples_per_epoch=X_train.shape[0],
                    nb_epoch=nb_epoch,
                    verbose=2,
                    validation_data=(X_test, Y_test))

print(model.evaluate(X_test, Y_test))
