%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: paper.dvi
%%CreationDate: Tue Apr 26 23:25:12 2016
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-ReguItal NimbusMonL-Regu NimbusMonL-ReguObli
%%+ NimbusMonL-Bold
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter paper.dvi -o paper.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.04.26:2325
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusMonL-Bold
%!PS-AdobeFont-1.0: NimbusMonL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Bold) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-43 -278 681 871} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B892AD5E69ACACC6C1640EB
3067BFC64938F41636DB8831883BDDABC6777DEE17F2E84F1D530BC76F51C621
75EC6B727A82C193D1C0801AC492BBE281B46626BD21F2ADBBFD144793EF754A
EA5F1CDA3310E83D78A098160C66D6B0C68D4976898D9DC1A08D01740AC3E7F6
8D3CE0A7E109104248CB86318400BD82EF894EFD9C9456E97055286C144D3EFC
D2625110F1AE76241079BEC19939AC962E0BA813359C15B07C74D5E9868E2167
EA1199D21CA8827CDDF1BE8357261BD32E79FEA6BC475577C5F6848345BCE58D
F5435281572AE6B33B53607EBEE6F862D4C752AEE43C00CDBFD258C7765B1358
5D6165EE034E5815DE79CC26C4A720607BAFA6049710EE3782BC2CD84FE2473F
1335D20A3B6E9E8355AF36673CDBE63C27D4F0E183FEDAB10031B1EE33B9573A
2E1961B7C6BAA41F7C3EE707FE86071EDE5756A00D7B3BF0A21B7C3CF41093CD
66ECCCCC22F4534912CB900B08E69574B07F246305DCBC238780278AEB8C9E55
3D096A944EC7AA9F697F354AA137DF90A9547EFEC1CBD568CB999979F5AEC6AF
A84EDAEE1564D178541CF4631081781608FD38964257CF89B1C8E0120B3F6AF0
793597AD553CEE5CCCD5C4F09CB0B4E998E6E76243191AF7E93833D067833F0E
53670D7E996ED67CFE6699A6E3815932AD272AF4829C2EE08A32AF41D0C67F15
0EEA6E6D9A07919D533CE73BE753625DD658A9A49824058B3D40AAB4C5F586DD
1AA3B98EA250A2A18E0FD974135FB897B2676481C8846980EC5C15A6CF3589A1
3F6DBEAFAFE973B91C98A1451EDD31135B7E7DB16730051EDAFC10D2A9ED25CE
E324888E648B46541EBD289AABD77322EA46F92EBEC5FD7A641338DF87904614
0A7321DAE9492A006E84D21EDD2CA9EC4DFAF3F3491D3024502E3DF760580C06
17D54A6CD838E51E38E72E5D6E3ABF1764E9CC6A4C56B69E963C1BF9B8CE006B
701C9523B5B9B145B6C92DD26021738105BCED3E94CECEB2E6E552D1F3AD1951
48EF85AE8B996ED2477421F6A82CA1E71C399BD284E6B82BC7CDFE0189EDCA47
2BDD5A7B8E16D60555CC1665B0458EDC336CB029F5DC16A771552DF211C44612
F4D39B6D5FC5E14BDBEBAB995DF855C084DA21E5EFD3BEC41F18FB8C6D2B457E
60950E1CEE77F24333BEF421A0AE453EC1567B6C78392AA062A7368BDC8F75DF
47CCF6216626AAAFA4DFC47FF9D123C1BD64443EB7D0F6C3883D195661CA3A1B
BAEA7BCB4950A9379B1E5038238A03A23B1B4CB13CE190839BC156620615883B
0E589EE3A0E0FAFC9DC93DE177F14A1FCAF6881D65F8CB127FF9339190CD0448
80D04A83157F6C7A104D3408735BB8ABADFD4F58075F2E4A779A8BDC031F0A2F
4E8ECF24A0CA6B4040383C9D965B43485D8916D491301D6F8F9E8864D2E7440A
64DACB0A61324819BD29B657D61E2BA950218A3AAEA347126CCDF3022F452D00
E6C3F486108289E9F1B5E29E5C584D744BFBA60FC22E964CE10AF512C228F4CF
C3DB240EF27A5C409A3F6AE1F1D3BE143CEC0C46F4BEFCA788DDD369BC6549D8
D02596DE943C067A52E1E24ABF132E2F1C61F31242729A9EBE877B546996C652
01C272CCEFB6270BE052F658087D5C67D702AEBF0B8E2A87C33D002B9869CBC1
77BD7D99E0ABA1EBF44D787112A01938185F1DEE52D5F739D1CFDD9459D56F71
A698EB8D7F3D54EBA10E0BEEE647974DED573B688C2AAEF49047078B06C8A968
F278BA7BCA00EA900B2429BA77A3F888F990BAD4D1810A9046288D9C33E4071F
3661B2D8DC640B8F2494EC316A5C574393F754972A1A6F8D053F2EB3FA8BF2C5
D6EFE5B2BCDF18517D0869E0916E6B555B31670C7044FACECC830BF9FC5B0245
323B24F840AA363C8C06EC0F4D58005511B0843AAFE4F1EAFDBE9FA317C2D846
55C143C4F74DA06E77B9094808F6F1115CA55B7BE5F2018ACC72A4B70E1621A5
8E2D8B37EB1309FDD725B6FEAACF65D8C83012A5191B4D7908FA753D997501EA
15183EB324BA351FCEFA37A93751BC46076F01E2D91BA27FAF9AB7A6CFD5F930
F3B3F5C994D3214A2D0851F039E95FCB18BA101F93D4D5A6D539C11187DE78BD
21561425B671D3601C7627DC1A93A9046F0061D3564D2044E9B8D2E9BC5560F2
A9F926A5855D4401FB1F62CD6C9CA9EC756072F77720ACE22C9983B434CD778C
286374763ADAD463346259844571401A131E488A004961B9D7754014195463ED
FAF7DF63DEBEBF603B631AB2F750DC5479B16B837416E74BB617589E877EF44F
84284B87C4C4246A6BFAFA2F12135BFF313497CE64AF94774175C7FF825827FE
2A6C008801304DCA2BBA8F01DFC0EF00645552C9A12DBE0028DC8EFFDA328259
36EFC9426F07342ECC66E68B983E966FCFB745795C4D2C85780F95B5A683ED8D
A83806CBF2B803C94B5A1350006146EFBE1744123AC8C0F4CA8C980DB119518F
89124248F3B93043F3ED792CFCF5AC617DBF2FB8C7A3E1146303DF6A79C301E0
0600AB38A00EEA61310B34A0FF7D6883F450ABD1799F8579A036AA6F4FB60949
07FCF217372686B1FEEAC57C32764D531E3B5CD8D17C3513C14BC3BF884B0077
C9CA4DCA2FB7C7EBBE81A9D14412312CCCD8E06297A576398B0ACAA04C99BF3C
E4DB9CE98E2B1DD10F21A0717E5E69694C514BF8D5F4E2BCE859A035DF080030
75C5109F898D7ECDC46559A1B312AD723585048D44006BD7390AB0E3183922C9
853A204FC7DE2392905875FC28D07872F48FED6A87F4CDA130B13E566F44104B
A1B29DD36486C75C130C90099A0630123392C599C95C2D501F8A38228AAE8043
FC64B26BF9E44951C3D22F573199F680F53FFF63F26AFD3D27BEC0995E743FAA
61D171FD86415C97E0C22F0D1816C6D921833C95DF6C500D819E8390F2A8FCD9
4D79AA6D37B5EC0F5E9648ED20C23EB154FC0D71D944295CF071AF86BABD7133
1F70B205B025BA19592318613EE93B4BCB7CA05C9B5ED07449D9F724E747426D
F6510290BE7C297838CE624E0857AFA55B4E52E035C02B9F746550DF9DA8C6AA
99A45B5DEABA8FBADC014CBC0FB8C671B76529F52DED96F7EAB8AB7C8BA1ABED
FD384942C03C32EE249D4550235FD56FB84E126674010EE3696D11291F2E3F06
359FB2DF0ADCD617CE2040752BF94A98902E608264DED8C3241F09E80F1628BF
F1109DA71D85A35F40871DD6EDDB2FE7FCB31505C0313797A2C62016519BEF23
B160A29C618F5C19FB751B46C7972BDAE3C044E0BBD0FFCFB0E48F77266B06B7
56BACEB5FCD36A0F153536DAD78AFA2BED5D5C4A91CCC4E24C50984C346A441E
0D4C2689943C2836FB593DA7C108DB15C18BCB8BB846C142D9AA712E3305DE9A
02A8B5684BEF87D9D231C885FC0E8FC3DC0FD24606E68F9F622CEC90F4E09F25
D875B88F403D6A88CDF4E0C8D41C64B9B1DEB72F0E9058EDB8EF222CAC2C775B
6964AEA57F562C969C92D66E1D78562AE2A9B800166E14E49DF641E5329F12B7
A6EAA0358C8502BCBDF10E7427ED7C134AB29DCECEA5328F92AA2E5B0B2D36B7
0B46A1469509A5FE8968FE5781736971FC1E8DA934451F042794A2BE867D0073
27F013BDB90ED2A09250644E264DEA1AC0EA512125DC02C129DC28D382B62F4B
33FBC084BCDA392D101B9013DE10F7D373086CDA1695792B27DF511737295492
414A8646D7AEA86128D6C6694EDA54D20495E9A9B8C7F83640CF8BA901ACE6D4
E3F37AD75C34B8F016330F620A32CABC12C385BF87D2DB985AB9D2D04DB25B1D
EA0090B833A47CC84A418D8B59FB37BB3F6B76D5CA30DAA2A9B6996A10D260E7
E5F6EE3D8DF80675BB385D300EAA72C87D985162D53910DE1DA60560F84973A8
47723B615D4661F3C7F23CA7363FFDBF3675ABF732FB41F87A6D9B9D3C3D9990
F966A842ED69CA1EEB0C5068E13167980B27C6E1FE10E8C7049F51BB406FC955
99776889FDC65B123B3BABC2709CDBADBD484E787AEA66368993EB6B1BC6D352
5A0ABEFDE8A19951520413B387258AE60CF6CE44512DFA273908512CFC05C613
ECFD8FFD09525C63116A454C568A6720526F07AAA545FD1CA4175840D5D2BD3E
272043E373EF35BF4133E260320CB39E191970C0F0E81DBEFC7AA97A828099D1
CAF25B3F58533E7088A011CC7888AE536881C7EA67770818553C723571D8AAEE
7B92E1F99BC8E4162D346EEDC74967FC1F31BF43B6468E45039CD142927D2CDA
848A96AD539FD44585B42BCEB7763EAEA794E1058741258D970FB3C973F5954C
89C4BD2DA46D8BA9E038C1B98F4341BB799C313F04F4C1EC8505B30AAFA36DB4
CAC6D4E9A8DEC21CF6C004DDE08E69C5A8CC9A2891BF36D2E6A5A41F8BE39466
80A1599660FA03FC22EB196D608C9CFE9330A3253505D720E08EB1F2625057AB
F83033522871198AB3E954EDD88B5059BFBB42A2661C951F04D6B0D0E5994459
10CC42F926DD71C9ACF4B89D0ABDF10E46CF71C05A7C911225D77F40262A8422
EAF442BC4FA62D0F0B047592CDA4F4692A3AA3C54DE4FD1E0B5232FF2FF824F5
F600C6398B5A81CF08A783DAF276372244CC08FBA8DFB331CC87F64547D4A1E9
EC5CCD0543FAA197A89551567A25DDFFDBE4B019DCA2FFC5515ECA905A4F92B5
78B4EDC75F0E87475334247526B94E39AE7917E2EABAED422E67A4017C0BE305
8AA61A13263D95C8C49CD0551FAC3C948B3EFAF2F7DF378E1BABB423C34A4271
358133833A505F8549AFE87D9E1FB63B8D95D51545FF84C3FE28C017EAEBDC10
39EFEE6C592ADC49D657E0AF7269E54B11A5DFF77207B54A986522EA5CE7340A
C9485A25BCFD74AC40DDDAD2026E958C125F6CBF90CA271FDE6CF7D3E4440FD2
B5757B57A7F549A12A10EA6D02E36E7DCBEA92AF274BA0B9734CE09D96A16C7F
D0CCE495DC532257FC31AAB4701B272A89FF97C23D38769F4557D7E2188E1F36
D1B51529EEA4AFF93DACF1FAB9BBC73CBE43C0055660E0FD83B77AF74B96149C
C715DD8AF2AF222D8112EAC44AD6CEF9AACD27EB97E373C1F479DB507BAF9DDC
5FAFB8273AFCE51746EA8732667DC786173487E74F1ECC93008967C6E052597F
836752F289957FE220B0C8F5F2DC43AF88EE1B14A1C76ABE9A1B82ED78881794
A16C53085047911D30B65CF140514D7DED0C08302A83B960B624C72D86913A32
21AE9CE1E7A234E680D0BFC1F174F5F594BC6A6EE67ECA3E09DB93FA942EF83F
FC89357E3671F2D1F17FD79BC48A778BB8A47F16CD4D276135AF7717016826D6
E90FDE385BB9C01FFD91569D1B08E42A0348E70A97A463252AF1E4BB82CC947D
4C7D771A81BBF56AE8394B1B05AB622E5551198C669E267F3DA27FFA8A3BD527
81E155CF07EA27AAAEB8415862678D00E3A860A89569F99635C8C4AF0DD6F5C3
A01B3BD24390D80C1660E8AE443837A2E5276E15E31A9CC66B827E1CBEAC8934
0D0346E0F7873BA3F38D29351ADD3373170F0E102E1530B8ABD2294D07AA5001
702CA190BAB9326EEF9F6691EA04292939BD1D6E387A38E075EBD8AE3E542B52
3A4F5DF0298C5FCB53C08F9CE8EBB365453280D7554CDB77B0F15E951D4CAD29
A4E4A1FA942A4E3E66EE2BD3DEB889442039FD16D97D0D4A7337EA6E13E19315
CA6673589D001A7FFB1D8C72B4C448D931D259FC783F2B2F34298F59F0EFBF37
6447DEBADCCD7CCB565F0ED1833F8B9FC72ADAD526D43BEB423D06FE1BB3FDC5
4456B729F339DDB7AC714C5E2C77AB68E8EE6485032EFAFA7E16E683C52BDE2C
F2BB5C2027F22AFD6D66B75D0A2C3EBBD2951B5F67955DD9A48FF88394E23493
B9C07D6ABFD8D66891AC0432CE0295B62369B683071E750A972AB4411F948FC7
865D1B428F0698672EF7A8222454CAB22A92119A003E5E5A727185A2B9793C0F
5FF059D387D801E076E25C4799D60C2C5B7A25B2DA95582758BCF1B9FB62526C
920C12E68656380E1BB15221E0959F9EF40C503F6B6B273EEC34E6BF8CCEFBCC
AA19978DE48900AF30CBB2B408A493B32433B54CEE2EB677C1DBC01616FFFF57
5A0DBE1D48229EF33EB531518452DDAB87676E22664D8008B4C21021FABC6459
44BD9BF7E536927230F1FD961B0AE7AF53258EA4DFFBA3438D88EA17517BC9AC
0BCA9F1922CBF82D28F47BA943C1A6BC17C9AB2409E5E78DB3C78C18E69E33B7
2597FBA5A265A2DC2A176462F1D173979F3836E4771AF3DA8CB32BBF65A9FDF6
7D49529FEC5E2DCA2889C3FB5D8D13719863FC79544169CD2854E6D57459D464
14C6DDA9FC8029ADA9EAAC2A39B15A4FAD891DB8A87E85557294FF888DA2163B
38CF8123FCF614F310E925A2FC9B3F571724C4B0E72AD95D29A155D4470C3966
5FC81238A7FBC40D2B53E750C33EC2C9FC04E65A3F9B81A220CF753F0C164087
36B24B0E88FD63D140AF5B89099D6F0AB2CF4EC0BBA002B44BE844ED108416A3
56C99A59FFB38092E1EED5EF4669BAFDCF3FE3455906C11C1CA08BC250CFF0BE
EECCD83F382E45211576133DBBDA5CC4582CC3242B63D8053907081825CFBBBD
D51B9F39B587A1B4927BF82D84657DE5FF5608C53CB0DA933FC1AB3320B90ECF
9A1854A07D5D3C637A2F66BE0CEEADB782FFA9291411216E11C671C3EB60295B
63F05EF0FAB80F4F2868BC5BE5BB6DB78D1B27AB0FA6F789FF8E512B07B3567A
6EC38667438DA85127C81A137D2C7A1C021944666607EF1107307A98376200FF
DA2CAEB0E42518FEC11B39FBD1367FEBC1F3825827FE2A6C008871986E271567
2BA1E01048F5809C4782444E5EE17335B4D423DC1EC4C15CB9FB0D893F79F3DF
52052B7F753CFAA27AF66883D73C287DFCC785F212055404DD256C7CEFB20292
15F457962BDDAEF702EF1782EF5A1B909F75076ED49F9004A874AB1E0438AAC4
0F39A3455CAE5F5B9BF7CE813105FBEB6A649A1A1AAB9FF0AADCFD8E2E8F74BC
991A63F201E0FF8226AC0AAC8F267DAA1BB8F970081290B811DDC501090D2830
58F08742D6429BF71249C28C7B8903E214EFA0F3940C2F2B59F7A4CEE1F02C3C
92BF3E0F63B4F48C0B7DBD8AD9FF3B7B5B4A1B7CA05420725A292BB6EF8FE6D2
DC18EB4C02C6BFCEC3E71E20E6D98545ED1F22AB20883A8D5D9620DEA594A44C
AACB562DF397D649CBF9C21A481EDCB083111F3E1B499563E06CA6CDE7F7924A
FEC7130DE52A490DD550A27325171953B5BF9FCB3284ACDCE0FF6F7ECDB6AB30
69E88D09732D3FB8BD863FCB2BC115437316194F2583C296668F5541C584D505
E2A2205BB410B3E1317CF247224ECF9FFD37BEA02524ED65F147D6F231B461AF
422355101AC49658B5087488429E35D6BD1F33ADAF26F12CDCA2E208DE895157
94291A35B5A1EAA58C8E135C5DBE19ECD7851035C968D15C0BC79F65939B07A2
614A73E6CD0A8650EDD6F2F8DDF815611D1498D2FC421934DF2663935BC91CA7
4ACA5512C9C3F6C7F21AC95E4E681A9BAF6A358EC93A72C4506B5C50B6B6FC28
EF779D415AE74D7ACE96E533B01F26A450DFC5A23E03EBEAA640CF23D89D1C2F
0FFAB4EFDCBDB4CA8582DAF2809A41072FD817E7072D80C54F98A8ADF851722A
AC41B5ABF27FD6F447801DBE77B00ABD3AD9D5639E3D24E6C41BE139B761890E
3FF013C7033E97392ABC25BAA1ABE59A48F46683AE927088B156AB6559A38B52
7FF8D8EE2BE0E4646AF313E90021B03E9C34234EA3DBBEAA7A63B0279661F69F
181917D92AA6370B31C81D34821006ACBDE6245E865C014F757FD2D922AA4E55
2670790DD6EE29FEACB73088DF117BEA075EC89FB2B3820273858FBC0B31DCB0
1D1535DD82C80647CA108FCE37FB2A85057E484FC90BB66AB20D45D6A73671DA
125A4C76D86C83882ED85FFB721A5FCBA3AC1C1F76248C87E7F6F275F62E7204
9D1081BA95ADAE4B758DD1764539E6C537F0FA0282F128735A134B9A73843CB4
600E4B406539F51A5F98197242BCB5D6244667B415438C4F78593746459F2E38
1449824D8A89EE5596C05E093EE2588FC0E2AB86E693A55A082E9FF4196C0881
4F7B255132DE99F3F4B799DA5A5222232F76F1A9F152F4CF3DC3B7B2F6588CD3
E469E39372E34E3FF50AA578F48F468947FDB1737DCC61AC7DC645C229B05518
A22476440DF2C636D284343AD7EF3F75C65C2C80DCC877F61D6EBF14DB709963
53BF1BC8ED7410CFFF5ABF98C4414AC1EC0726D2E75669CDA4300D41CD031A46
220167C58F1FB6181CDD37A7E255C773E5D58905D754DCB9831B1AA883077161
CBE128834DE381C9F5DD7782D185B6EA71003C871B443A0A8A74893697994567
0920EC419B54B1E974AAB268CCE910A53D629F608DED800B39850AD19874188A
0FEEAC8C7787321329452630979952073D03DE07B5F4B0F04D2A6AAC857254CB
40F5A49EEBCC3E40E78A7B5EDC02FC49CB6CA3076E8F602B7BA209A0A5D865E3
7E67DA71816E4E9F9D063E193D518D39E2914220CC102B37C32380790954BBA8
AF19CD6C8293263F3B29457223CECB95F95B09E8EC11170611BAAF69148F25D7
0945E22862026EF5A3D152B8E6929EC65DA6625EDD38A53E847C152DEE0F8119
931F58E703BBD79D982686F31A16CD674788B87C55935993C89AEB63E0F1051D
E2D8D5ED777B670DC2FC92FADB64CDC75922BBB013B1010CDDCE1F62E95C640B
A044E5C8F2E70E8B5B68D7E4CD64CCB31806001831D107A55243AA0122ABB310
3B70B9C9581A8FCDD5BBCEDFB673E41EFC6FEF9F987DC6ECA6C2E7E0A6FDC076
8BF9AEFD5B211816E51C720A822F7F88B360FA6627FFBF56E8861EA17A67E275
F42B750A180BECD60FE95EC44B410D57FABC7FAAE9F717FE5D27A7944BF86E9B
9D8401BFF6BB02D199B308276B231F9465DAF91EA3F3C7C0687B400D032C3D26
11208A4C89A9FCFACF61FF5A4BDBE4B727961AFC0B5DA696ABB317AB61569C02
69BD352B0CFA114891BE5A24A07AB4D87E2AF1AFA043E7A97767F403CB17B1B2
679190904BB33A207EB26E1864D0B4365D6FFF730E613C0D8CDB99DF0196EA4B
CB09F0DB6B09E3C78D92A0DC68D5C130B422F74C4DCAC31ED2168EAB3B30CD4F
9399C1AD71B2BDCB759759CD294037F05F695F22F0F7664D6A4D485945A54524
F27C1B97948B74A8E059BBB71C060F210ACEFBD271F8FD14CC14ED33F79B2F6D
0304078C2B39262BAF791FFB2D8B61326F90EF75DB59BA23B5C8302500D3F39D
B51D1CE0D092559183A1A95B5D52432CC3680CCEF47CFFB07CE7C933BD984E24
4AA75FA5FCF405364ED3CCF314A9FDF43DFD3381581CD498A66AD2991F011A14
10E3B3FC19107924805B2419A2B5587EE5BB2468846579BEF11DC1F219E5F31D
28E38AF178BC234F3F68BA1498193DDC456ECD499285CED04A1C08E68967F4FE
B9C28F1DDF54922E40FD8B5730FEDDF861C394CD89B396B02A4C477BE225D6E7
7D350D25E50AF8AA37768E51174B8A17E88867A6659B419778447BB2233E4356
3095AAB31895FD01087E0474C8237C906253D93080C73D871C4619D4BC28DE3C
7636468F1C367AD323B0BB5A07A28FE10A234A25E73C725A1108CD9C953D6FBB
D271919497C7680D110CC94768B538891A17B667C492E88BDFE49B77BD6A632E
BD4359595AB1C26CEEACD1F31E261A2FD820081E3821F2260DA2E1FD617410A3
40A36309B253FC019F94A574C176B872B4349B2565F72DB46E74DE264AED05A1
D0E2EBB87E0CA94CFC3300CCE1BC92A875267250AC404673AADE4D7924A2F0B2
E33B166BDF7EDECA32875086F666E9AACA30A6A7AE4C36232CAE769CF2C91D64
82A1878BD6B8253D5BBFFBA940412ED8EA921504CF61ED2A0DC76EF3BFCDE373
A716209FF9F62C470DF27E0299E3B47F339FF569DF7E17EDDE494EEF092E0E5E
3A90BED777532D0C41110B2D749FDA2D60E01F3FD46A74A0A18B330BC1AD1208
751B9A3C6180614D43AD10868C693F1D913FB0D6E19A348FE47693D79ABD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-ReguObli
%!PS-AdobeFont-1.0: NimbusMonL-ReguObli 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular Oblique) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-ReguObli def
/PaintType 0 def
/WMode 0 def
/FontBBox {-61 -237 774 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B892BE302B1E51F8EC1929F
36611266EE46F9958416CD8198D4AAA0516D5554F2367EBC9E7C9C4B3703A695
BD52E708A65EF59D6A15BB9B1841F38AAF7AC4E225A07B1C6A14F0B66C37E82B
40E5CEA94D45A9FD083F35037D97FF4FE2DA17F59DB502F5FD9BFD67AA74C5BB
E38B5D9118E344A99380FB171B4B5175CE37E765FA13B934379B5DF1E22568D5
27C507C9E85A93C768C684B18B68DE27F4C2EAC41E8BE6026FE6DE5779B03C08
9E0B896CA7B912CF84BE709339E77FBB7F0A23FEA14397FCA694BC21F68D6E89
DA45C1CFB64CF3AEB180237717618E3BF29253834A6A99F1623AA0179AE945B9
DE7A442440BBA99D4C2DE04C649C3B087B1072E291D3AF959FE4DB7377D25F25
38843829F4B3ABC912131083410B6385914AB05524D776F05282BBDE831B89B1
BF79333F291C98E542997F98B35721F629E466C190BAEB6DC88F11FD425E044D
6DDB0A533241F3DA09D6132C40179A438E08D2F7E6E97E554F01EB2CA3D13EAF
278691B1C179E7DBC40B69D406E3F3A2B457F0D7D20905F3C30913CF36ED0D27
1FF6DF7CF98AF85C06468331CB07B99DF7CDFFB71C6A3E627008271139C90471
AF5A35F2786836D0DA235FBC4D86AF490740C22BEE82842873B432E4B388D09E
0779BFA45E31726954F76C3D7DD5147DCFE3CE05FBAB0DC555F071154C4F1031
8EAEBDD3869ED8137BEA216BE99B8FFC092726B5C31D23B50C2B338798E68E34
391E254290B3104A87FB777ACAD657DF7141D8A15EFC9D6CA122FB20F746DC28
A2AF8931ADDAA4018DCE34026878E5B1194E012C736851AEBB3A3A4CC65B70B9
1AAE6BF711A37AEE01A28076FA883B2FA781E14282982C1AD13479B6178D281C
AA541FD60DA9A2E715D31B2A9F95A6306F7D5261C85D4A03E957AB8ABC04D5DB
02C0BEBDB9FEABA272A94E132F9C0297239DB3C1D1AFB06DD6AFF8A9A8145895
A2258ACC3A750E94CFD5C2D2ABD635DA7FFE17B5FF70382359AA3162320D340D
735A86A08EADD2C9152F964E6A5BFBC57DD17DE791890AB3D2AEDDA5AE960C38
A317608B21DCB3F0EFF444C5D0D23F518D05ECCF87C7F57B650581E5A7AB8D40
EEE7FA0C9557FEFA0EC686802E49EDA9528B7D8F8724EADAB1EA2DE9F4DAD790
BD49B512DE1EFB3DF0C2A85DB7429BC242A27BDBE6F6DCF9A3C3CED6842C3568
58594C63EDBA2B430282787D44FABB12DE585B297E55A609522A90C6BBBEFA70
92B483C9A4F08A49B356DB2C444B2D7915D0CE569DA1CC532B9FC6714B59908E
6BD232187139DA64A134CC099A59CC5126F95FA957C3CE225C0FD947C4DE465F
C53E50F199A73C1B4EC66D314A9A4AF8E75BFC3C84FFFA505C304D514E5473A4
1499E485AFE2FE33E745D31978E29ED4F37D57B61C96A427B9A5CD275B27CEB7
AFD708B24D34BD832406A8BC38C5732024E0B4B5FB1029C16FE8241238B7AF25
03A367185389728758241D75D2E3989C3BD46A0E19F9B46BB9FC313F26FF8FC1
4D0B094AECF59054765816492E0A172AFA3E5BEF8D7B942444975C89293EDCE4
112DB246B8EA5564BD91E07D49C8224435F88F91BF1370737944CB9AC06DEC3B
15060C55B5C94C9FC5E5B934F5F43F519826169959FBAF47F233A0F99927AEFD
559B056DAB8FC16B6E5512C9764291363E2D1EBD5AD40DC8B87F46D00EB3D378
310D349FD6FC5559A36433F4CF5E1B28F03811D0A45CAB4F0CF98EF06363246A
EBAC94118380744357E42056D76A01C4F2F5A518F7E823EEE764D9AF9DD77617
9C1F610A95C6BAF7DACADE9CA95FB6020B097082E73509B70F0C64694B73BFF7
9F2FE50C8A915F9509A822FB278023E56BEEA38DB11D622D9415114EB2F3FC4E
FB8EB31E6D5FC58CADC39A9685ABF36571E020B318F484B7F7490003F8E558CC
52A9BE85B84CB832782FC5B0B22B70CEFA573666D045C10E91E5C321504EFA0E
519E0A66A000D54976B48FAC50CA7345C7004C20C95C1E0B5E9B56BEDDA945C0
BAD47E801AD83420F4B02BD7476A4308C0536F76305CD31DDAB1194E4E5CED50
293BDDAB4146C7321E60053B8F905662005AE7A0FFAEFBCD9F05F6F33CB72C20
DACE137AA53A7565F1D756EF01DC9316455A952E699A36CAF42EB35934497A6F
1820ED89CFD8DBCCE63DCF123D6959AE4FD4F467D2EF041D8CE6D1F8E1DFFDAD
60868BD11866DFB334624E47F7552DDB34FB454F1FD26C90C0E44F8236F55938
C3CE5A9EEAA8379EE7D87F88E6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDB
C0B70A4C412C426AA66336CC565BF624D326317DEE16D6ACD81856288366086F
50154919E5C99CF62A7154DC724C92B1743E575FF979918B6C94ED90D38FC1A5
187A8197CAFF1544C76C128632A537E9C871617E8FF18564768DF75B1026FF04
5A5C6DDAC94750B602CE115789C442E6BEFDADB6D2A741F03577E7AA7BB7EB45
DC27410CF1220E3C10E2B44C05AF6A6C7DBAACB5AB0BB0A9A811A6D2D686A310
29329ECAE472DB8F92C3052ED84AB231B88E71B9D3FE88048DAB5228DBA4827C
831C4D5256069855635B43A7FCBFCD73E96481EC1FB27501361CDAFC3655A922
1EECD425FF9CDFB727C129A4047457D56024D95645ADE0D95DEA748EA263353B
29D0275E10F95567168AA785FE3341FE42FDF49C371BA351372DDB97AB64FCCD
A6F82933AE468CDEC76BCF3CF60BDC1DB09467179704B9F04B677C086C4034B5
A2C6FEA57D50A9ECF4529BF907C09443D34D5FB00FABD415EB4EDA15C15D794A
B11EE10C5C3697B8926F0E4B4693B8DB4AA1EDD6D94926CCC30E65A14AF1A3A7
45549A2C8D8F6C93CCAF12CBC1C77E6E029B0F91E4E7E8FCB04C4A950D0FCA17
9322EC312D341167A07B6BA482AA6199B185491196BBDE507BA0D268DE5AE496
CA8E5304CD3E950546AC2EB240AEFEBFA21217FA62F60BEAE7496C76AE7950F7
51CF98D1E3F48E380A0C7E749DB7612A0EA091F537514C8EDA9E75A764E02E9C
3C2EBE1D9B6D5A3669931B9FC9EACF215A62D748A2E82B07DEF05C5D1483348A
AAA8F7091BFEB850CA43B39FCFCE3064D7A1FE9FD6DB51E29D0449EC90DE6F33
294B778083CA2D6DEE3B36078EA4507D8F856EA97B9BF9F14485572C30908C6F
C3FEAA4E6A76B89B1A53A90E0251DB6A9EBBFDBE2F0914DF33CC00425877C524
F8BAF59C25D854E659C81F267CFC897B3F80E407C0F4E955F5EBD8D0BA563898
C7546BEDC3EE3E38C404FE74C3E3C41C382E29CCFE11C2EF515A889BEF1635A7
45D3E8FF8B706210F5F3AB39EBBA5B31026B49433392C8930BD9661B23C2EC0E
0BC0B00A0C0091B3AAB0710DC00D013BFB23ADD7E587172A5B06D42215F7C271
7D782B4A8F898E5CBDE7B1BCAEC306E48B967253105BB2A689D9C05CF8ECA2B2
85433D49DBB6803FD753A9E426992ED6BC8BEFEEAD4920066585D238397D8E6B
B6397864EA1CF419CA94E25DE34CC23DF1DB154A97C0CCCB362202D894A86EA9
D6B04101F8F792B92B6BCEEAF4DC35098DEA7E69B31A9114FBF98DBD23C3B36C
D7D4A2C508A6765229736E065AEDD3C1914EA57D02B00F7D2FB6394F3B6A5459
A9F78804365543241147219ADE7F3E1C6D17DE27CC8C3BC19A246E660CA84F58
CE2B60AF130EFB98EC7D3894306847F5A51D98A52898E348C2215C120949B8EA
5564BD91E07D49C8224435F88F91BF137077B4407CA5DD56519A5BA8158EBCA3
02F04050CCF0A680F30500BDCF7A4BBAAC2CD3E60736A01617F82D70FD189D33
7439B474B242F40F4B3811E907177CA545CF334D086B67899B16B3481A982BEE
3EC0F6194B82FDFC80D699581ABA7DFEFA73217192010DF1F612B36F8E7C033E
476760F5CC4EA4BB2A83A40010A1318447A79257A1CECB33015D01918D9B7EF0
38D507CA1BE374FCFAB60B9DD26BAEC9398A43773D5BE3585F717D8CAA9C3479
E6FE7010AC39A6DC86178AF4D7A3511EA58FBC828A9DC378E642CD4FC6B8A533
6268FBD2DFBCD76818582794201A33149CCAC3E8B902665D392138E7847EE601
05D8B675B261FCE9455E95B57C84214E9F17E25B56A68791DA15FF5999A8A0A2
6A1C469440C75A4BA7BBD8C537E382B549903534CC577FBE9D2FBC52DDCD62B2
B9C7777CA1C5C32CC0FAFA4187E6B5C075BC33DC684A60D2114AE71B9046CAD6
4310C41556241B9F91FB0604DD0A953822D0EA184AC9DEC3B25A7CDB87768C28
16E4F171156131D7561D55C9E03EBB580B67ACF002AFB8F56B7EDD942D4323A5
ED11D5E207CCDEC54A94F447A97175E1A448A57E186B8AD4BC435C16CFF53D39
966E6B4F9B43A862C86F435A288CE960132C32B397F138C8BA9E8AB7746F8E5E
C370F315F9A7C01E916FF5675203B5C5279AD03E13BC5A4C9FAC71B55E87CFEF
CDC1BABE9A0F9B24CC4F6DE5C202A07D90A7F45D99A12110464C76555AF53E1D
FE6BC19A289A9FD9239F0F41E86F2D4EEB998520A57985CEEF4463E77CFD528B
2FC34AB914C268C8874E34F01A8F3E17F20C114C3F4F04B51D880033FF2C8A51
7DBB1B11E8A713A9A9CF49CE4730C315CEA887FFC56F0206344C398C4EC0798E
CEBC9EC234B88FFD156C2BD3F50326B022F9EAF4E258900E72542336394EFE4D
0EB325113303C90E57E1DB377A0B5584AA59AA6A9BBBF9DDD706529BABCB10CF
B2505F6C196053344756A0035AF341BDABEEDF9E95C017ADF800AF241B87BD18
B72C7DDB2CAB6F175102B7F4DF3E4FF8B3A2C97D222B4FD5C3A9B84B9A2646A2
68957188328887B7EB36C25F2378F0E9537D3A8130C7E2014E65EBAF17E20743
73724D981E86115BD7C5E57910ECA06B51C2717D46BF3AB77FF5A3B17225FEDD
4A7A8C4A981D4DA837CF2D70FE897795E98DB9DEBE0A494A8AE6B8BC1282B989
F287FE040101706B7549CD60A676FD9828727C40382976A02FDFD9AAD0601B7D
2945C549B18A07A050F8E9A0CF2CE5448C5CB18BB30E56ADA68E06F9C3B4FF17
CBB05453AD581C7748DD28FB38017CF82F370E95B45E3F3573B7B3ACFD594C65
6797641A32734815C93B4BCDBA1720E754BF1ED5F21A0C644CB635DD2E3E18B7
2538736A92FC8068FF01FB2799AB2A2F880A2E7C505A235EAFD1ECF61FD67DCA
99EA4C817D6576B0929D7D4B8B6AA528EFC07EE994D92CFB878BB725B0E81E11
9B3C1DC388CD7C15D78BE43228548E00800D61E4BF8B22129CF0D7B99A1DB2A7
E90D3055C3F74C2ABACB90A87376E53D7079AAA56A21FDE591D6B8EE1BE0BCD0
D38A095CECC26D48F968ADDCCA50FF3026AAB80051B58B4E880580704337294E
24B6C69A53BE7E1C06835004DB55D087F7A6760120FDF314C799117FE742947C
FFE55B689402AB30E0F9C56E0610B3A4D4CEE75B91B36DB308980C94E12D6CA4
E1B027237CDB39095E006F462DDAADCB9A58744C96F6806D9816FFEBF325A355
EDD83A761DAEC1D5EF7CC7A60B1C9A6F0FC97F9E6277E5BC0E84CB9710A238A6
633E1DC695323758C91D9CAB9BF156EF665CB2297D58DF3C36F868F6FD255C0C
1C6D14FF3E63CAF61BF97D6FFA40D97BFB7099A7C56DCEB5C1430BFC28E31F60
E801AF5101B7E051C3148D4BBE9824463D2520034C166229CC669FA31D24A852
704664F3C0E2D7D509334CFE595E72595628C20E35838D6763946166B3E65C2D
52F1435263C54E628BB47F355A584CBD3C65762DBF24F2B88E4D0B88323556BC
8CD1C71F8F17033AE376CB8AF455E84678D741DFAE211D897CD44D51C69F8D00
3A06725F25B5E1F0E5CDEE4145E5AE9B9370036A393740CE2E418F04F63BAF55
1D09E5F84F913A19EAE2A5D39472772BA555ED48BF05C8BD017B134DD20BE689
25EF2C6D4D3640CA3A1C365F1775E83C70788BA3D9C9446A526338DEDD01C093
C9E693265E827917FC6623061ACE401105AAF98F5B46B6D57DAFDE1CBE7E9D35
9753BB1558F736CE4ED7BC3647E9D720685466204244BCCF3050B0DDDB071EED
203994FA2C294BEB4A9DB696509EEBE2AA45508850555D7183C1ABD926421A47
A1FA37588B408C1A5EE148FCDCCEE384557AC34048F6EA3E469B7B9C6157DF53
F2C1AED1DD1BD03FB41C78CE49448DCC24057C14583B86DD47D3968C3668F7FB
E41F4EF6A89CC97FDE71791404A03EF1A341ACB628F3C6FDDF23E2AF1D590931
78D4E8ED4FF10EE493A3F3B9B4C305E1F3794947973610C405074CE3D87FD97F
97A39F0AC8535F07BAC25CF0E6D79E5DAE064D80C223A83FC926E4E49C0F4C23
B8C239C6C3E0846586070F6BAA94AD2ABAB745689F23415442B36CA0D8264EAA
38C389745D3455B19BAA854EDE7AF20837DCEA5751A8AE8ECD0B5A19546072A9
ACC80DDA9CBE78089651977EE42B240E7E10ADCBEEBC464280BD6C5860E39F3E
64F66D24C2DA26147CB840F8D83163AB84DD6D7B0386B01B11528185ED5B2D86
0A37C34E3B57B433ED1D046724815DC2C977404B80562616318ED4E7ACEA1E86
CB866DCA212F39318AC2C0CEC4639C72284882A540E3DDA72BE410A5CFC38A80
83265039924CA1A9B9F89A656EB20D07B4879EE4A8119D7C3142215921FA475A
15F8472839691F5FA378B4DC43DA320B35CF404AC7EC3D81C2636E0BA003785B
92243F5E724F1114F3EA25EF254A2A72FE08D706FB05A5D49FD2300825609704
4F84EB90EEAED7EC1C6B0C1E2BB69D2201D04417F5C71DCA93487469008E5475
ECE843A56BA9381BA2AF14ABC470D33021157B38D152E179DDD97654CB959F9A
B2CC1783C2D3AB73BBF6462AE324EE00D77EA01352DA222CDCC0E26B60FD78E4
703E79499F6FC642CBFD2CC762CD7CBAE289BBF2211C0BC6D95D5768FB022E49
9F9C73AB1FB98D26A4D8CBE1357E31732C7E554B0954D16934FA69368681D636
93EB4266F23CE17B0962B45FC05ACF4CC14BD82332BA0D0FBFB134A0AF63D45D
80F3C24AF4B04FDD6395239B7C1CC5522612B5A53BC35E5C150AB12FD2A7D6BC
309B36FD6F8B13193B8E72415E9CFD2C491E855A8BD90A7E4FE3595464E1FDE8
190F962856749D70D9EFDA4C340958D49AD1252D2CB6F21F8495081F75BA6538
6D05C7FB072245E48C2F0B8E07DFDC05237851173CA642D6594C6CE6E98404A7
E06D8EA8D0B837212F237A2A1A9EB8BBABA1DE5599BC3B8C87F41106B99EAA32
752CA5B913DE74D065F9798AE237E03059ECB6C8098F11E6B1A2166C5CFDDB59
9B1C00424722D0B1C3737A6AF4C4E67B407BD1F1F812DC20545A26E9C5B2E79C
0EFBB311D86C58A8FA419F310A48E0657284235D41A8EA3849CEF79998C0C2CD
6B7944659B30F827A2237BB07452326A5305FEDD59834D39B88ACA1489CEA346
0B357A450A0528E19B173ECE56CF58669494955EEA9F54E04A04F04029EE4D06
878A2A2CFEEEE8F5F173D43C944754CF93D4DEB87A92A41AA63E226C58593A86
A14AD6C1B2DDDACE4011B35B8B1398BFEEC08C4E4ADA911C1A73B0A1A4940A93
D2B35FF7D36EA78FC8FB38AB35BA2424E89E8047AD7D73B16BDBB8E2F2AC97C7
A8FD33D6DE81F4ADD3E77BFE2AF0126FEEA85111B083E17AA5F20F50789D3B48
E824D87502678B5814CBD0A6EA1306BA16CFC5D47C6DE264B09359BA523BA6DB
EB2FCE5DF8E873AF1214416631E1E7CB50B65BB97893E17F31A23B56920FF08C
8F2D8DBA2E17C19C92702ED28358CFFA0F7B6F9F4A420EA23B742A50E0C8F3E1
A95C2346376862B74FB72D6D90C72364D8840B541987E8EB8F6C7217F04869ED
3BD07C3088934F43CA73D0B1CA62FD56C152AD51DA3063B1A4C8D564F6ED303A
0B48776FB203B95317C00DADC073ABF596EC5D29F89D7CFC5917CF21A7D9131A
C5AAE4C8C22EFA3C3B10E1DCF7DBB4EB6DC13F61C0A90C6BD0FE3770885610F1
7607FEB9A71836B1DBE8A21B67E0498952AC97B28F7577B514C7361CBA2CAD63
DB76728C31B33528ABA1D175E39EDBB8852D862D7D7AEA53A9EDE1682E05C035
80A6619960C0A619B8A60AEE8382D921A46D818407FB957F95210E59D0EEA9C3
401B1B713E91C363CC706BB044836480F5C02A3B5CC0FD8F5932C6DA4ACA7367
8C4C7ACA767C3C3B405D04931481BEC834672F29008C8746EBADF8004CBB4265
74719FF18C8FE8F188375FB5F045225C94BBD61D9240E0BA97870F2AB6C3C43C
4E9819F846DD8E591027AF6FB08FD0F3114A1331297D1393A67A831461B1430C
204D4E7DAC1271DE835B4180127D394BF02C4C85FD0DDD94BBD99693F8522FE6
6353CCF075BB0AAA3F11E907177CA545CFC0568B9C0A2670BB3F44D94B7150D0
967F83E13EBBAB33588541AEEC0DE8C5385197E180DD7550442AE3E0F8C1178E
FEEB5152EB512122EA705C3F01CDDFED987C8BA8B72D68CA6B490E990FE848E0
DDDC9C1F8AA659C6E06D1D68E9F7ABB5727BD6DEFF26C12A409AF1057E6EF231
EC7AC1950D41B8B1DBAE0F9C40FFAF612CB8A2CACE0B6688CDBD0567637ED354
B6BFA32B5B1598D198A1A9B82D87A7814F5D6AE5AF16035E080E8FEFB94BDCA9
B0C35BD20B737640F3A29CE63DC3CAF0FDFF080176C321F77478E1EA7C8D88CB
5D3733D9B6B47266B4A1084BE171D03696A026FA7A544D9F9AEA77214A791472
0E92784C2938D3421BD0B6F5E0AF78F7C244DD51127E169FD52E100DFDA92832
44BD04D2C340B315604E5317C5DC1DFCB3DBBE87A7C4B3AADDB93239A961B641
EED7669AFF1099E3D76D90412780DAC4BFFFE6A6E0AD8D6B937E9A6F9829A5A8
6CC5BA171385D644452CBAD7C359CAA92F13B43F2935F77B4ACFE95CFF6132F9
FCF7E09892C1FA909B4DAA6108E84AC93120806482CA6B463411F7E153F321F1
FAECC8377E377D8BE59C94C7BD498E219D46CEBD76590AC787F9347D866257B4
D620799CB8C60C73E7CDF92C047B09205536C60528C7CA43B0D3C4949FE8161E
C2F1D9CED3C0B7D7AA687AA6FD9DECB3B189081DE2FA96DA256205ED3BA2DAE3
35BF324CE3ED4953FD3899C9E3ED2661033F41D71390BE85FDBD3CEA7CA359A9
C772DF68905D3BC329306FE22E584B1197B332A1382CB9E0377A40BD55C56937
5936FA42B8B694EF0E9DC0E092573197CF4AA519FDF999A288F1630D8E21F2F7
CCBF90BD079F5DFD4F8AADCD73CB085BD28D97B4280B6CA75C1E37350E416C70
CBE8E7AF1430667331B98B6E645EB0945861108A9EB0F760B58F17DC31D4917E
92C1035D81D3722106E634C05F8F0115F6110AB9374451DD0BB0FCAFAD65D665
15DB19981AFE785A69490BAF50CA47D0A8052DCB9B8562EBE4E079C892A1F897
83DCC24618996008E36EEB73C1C7CFC916690D7B4B4B44C98107B62E6ACA6EE8
BD71EF42D5BEC9037D31B4BF3DD8562364B391767388549F9C26BC1319B8D1A1
30C3CC71D1B6A8BB02DC24BD977708C39EF156EAAFECDA6C089C7EC8B58FE955
6526F5E5F2205D1F7AE4871641591FF62DEB38BB20A543DF29965424C9F7ECE5
124E76CBEC892768270CD90FF867C66A421A49517B42E6DFA671FE69A594DA31
4ACC11A34BED14714B93FB7A39B4D81FD52A7A2A1E4DE63771847415C726291D
1AB0B4B4123AE2A54CE16D8FA60845873AADC16666F18411B36A5047E4F2DBCA
62392ECE94344097EF54BC122496E70C39C1CF2A5DD11DDB7D9467C6E7C08C5A
2662E86C0515C9552A84F483EF89C43F59F1558E48A4D998A5D0473318404878
05843FDFBFF7BB357853BEC49F3B4CB722D3669DD9B5576B5815C7FCF836ED8B
A701C45213EB498D107D070953341C4702C8A0395328DF7BFF9818A6A42F9AD2
DBFEB916A2D754BB56C587494425531FEA7B369FE22CFB40A99FE068CCE5E907
582B3812FF3D8B88BA6AE78C7906C7806B7A36117E7E6408F984124F2A08B906
0D3D2216F9BB4A22F170C26345AF6927483CD09F3D0FA6E6FC013386196DF5EC
365B73B8602DBCB4B23E02EEE7F1FCC44FBA90874584364CAFC07486D850F4F7
E5F3A3B317F4E7EFF4CA3BDE3F15A5172F894466B094C415E571F1B118F1E2B1
F7F9C1849BEC2A1E9B12483371DCB8E61CCDF0F750F7A13549F2CC58B2A02018
ED03A8DC6ACCE6670B0AD99B8D3E822C5769C4DCB1B44D2B7CAE1797E12F5D0A
4E1B61C94ADC828F3BE2273DB815A76D4EA4DC495B7B1D37CA79E2924212967E
5AC3FD0C21664D92F9157DF31E137C5A16CD649997D93A057EC2269891EBAFFB
F2D64F9FF1100D174E365CF830101BDD19AA1CD9998EB69C733931AC0E7EA946
A3E7C80748185BDE8683178FBB6F1AF931CAF9DA6A07BB2C50D87FBEBE36F7B0
62A1DFEB4D76F532B23BF8B7E4BA29F43721D4797696549E495FD05C339AE187
6630FE7CB6893ACC932CEAEAA3A6F1FAA17C5B39F4A2C5365B48E3BDC999B883
92B3EE3316B2582FCF68065EED7F6B3A61A18BA014FC444BDE011280D95B5094
F50E422C3D3FFCEF46728F8A442492E7A89D2DF055501423C7DC48560E9AE07A
8123641921B5E6219CB43B2D3155C131F0B08B42F488701EA557C2E8155928BD
F9696E8DF1DD328F79BF9F2A2359277835283D5C54747F63BCF500642212CA82
0B176A8C16442A96D06C2FD8A0DE59F6EAA3B8F0BCEECB3AB567952930E75DC9
B17792E19E24FE2CB00F811FD5F58E8B3E5C495621BFE3DA310B5BE2B2D6803E
6042DE738F12F43B0BE47C9961692F84F3BF6CB925822B8D27EB07462C7A2011
28039D869E5DC4516CF691C25130F8A07B3165050913614F8E046ECFB52D8559
4B34A3332DA09FC2409B363567664E2897B53738B4B2ED5617601A24E7CA7511
B998F4EB96B0248283A897120CD72A790E6155E5208D976A959D8CA2C111F1D5
47D2F8CDCF4995DBEADAEBC2E405E0B05CFD480503000FE8B57B855A4DCEEB2E
D55DD5CEFB64353706E01856E4DEC4E6CF04091CD6824CD267ECEC271F3385C4
13F5EF22D45C82585A767388286CB3238F6D595EFF4DD9BE456D82D63748C9EE
9C128E399DE10C69F537C6AE5EDA2375B306BB108B5EFCBFDB8F9388DA6C5AE5
6D1DFF21745FA40747F46F541C110434C42CA1DC72AFEA1E4F6EB05677ECA3A6
ED1898FD6D1EF468CCCBE713CF2705729FC38813EB4530B415D3F5009A9A401D
B5F0730C21526258C8183EFC5F44C496826FBBE68FC1E1D38FB3C8D3C035ECEE
70C6B67999FBD03AD12CEC7FF1136270EEAF22C1DABBABF4C8D70961499871AB
157F0467AD0F760C2687AACF515EAD289861DD9E493575EBB8C41F2E28BDFF46
65368F7A5FC988106EEB274ECAD52208AB77AA851A93EF97C430B107B20537E2
BA9AB17FE0CF90385239996553099DC74751ED9101E8F116E9748286157141B4
A5B74D01887B6E2DAA1236DE5889BF57AA079F60265CE2809D9EDEA473CB6878
248745170DA784B4CC4170B05A36DFE402EC91BDD55CBDB7039E8ACF0A312090
FA18F5EC4952D5631FA23488555FE7E43DCC5A1A5DBAAABF9BDFA1A3BD5E867D
75C82ECDE6159F41FD65B5E732147377CA22D9D499FF34D23F8992587556A7C6
7EC481DED32FFE3D1E5D1ADEDF6053FFE8DB09A9EB4B186FFF09BD77A534CAB9
ABD3CC678A30F691B2A2F0346032AA1C2AD803A427EAE70B4163D67C31819CBB
BB4A977FF11920B74BB147EA410C13DB22097AF5BD0BF80DE2E7D7BC74EAA4C5
21A5CB35E3EF8AB2A90CE7CF170D660DFED624C8FCFB7B60B5D9C7227D617311
F8BE6E4E83FD2D70A8E9BB421614436074D31FCCC03656E2EE12E268289B1F6E
0195DD91F76BADA7144372AD3AB04F9EF608E293865565672268582BE719BB97
5894A597F78EA8CEC66152B582D140716F6828832A8D7C224BDC3B042F3B5664
BB08359E241782A18BF13474F25B414057907D19A22BA6F49F5B76D38DA167E6
BC7088EE1DA748F718539A8A368389E5628DDB4E0AD1FECEED283C30BDE4A94B
CEB0686E6C388891EC55842CED2E8562B9F4D11731840130BA1B1B2F8BB3A76C
932FB42C5CBFADB9BB4210D941BE653A5E27B639045A559F264707C0EC5580E4
1CA7D4B79371D94380D31A32B773428D614FD12618690764CA29D48715369079
A123932C527FEC90A076B2F102ADA8F27E3060E465EB4BE5622BEC0843C4DECE
7E5028526E52D980CD5DF2DB2ED0AECD2E4D568CCECC7B1EFABED2DD38C0F362
1D76B8481F79EE96C7AD2F13E0232909C4DA4B9D1E88EB316094C980FA0C108F
78963923A9B7A15C03A2FB32097F41B93407B615ACD62111810F5A7059ADDB1A
EF8EDC07F62D57997DE5FD810C997E86D7FC253905D7384249A88FAA876D9672
BB13BE1A41ED282C419D5A65857EC1CBE59F04828BCF4B6DF2248B9F147C4249
C3C33CC6D49E359D6DEB75AF06D6E7D143E63A930CC4ED88F7B00A19629B2661
202A9C21454CB759B3D829DDFB82E064331479BCD9BB56A027B84063451BAFFF
0A2E35A6F3B1CC4ADC46D5444B730FD4249AE42F6E71C003F0EBCE806C6C1AB7
18FFF09585556481EDC20AA064A1BDBFC001966B8A2D469AA7451C50894B3D69
61D48575990092E05AC19F27569EE8A701AC3D1800A67AE5BC89590AC7E01E7A
C0F1712BEDC5CE99B972AE05679386BA1313638C2AC4B6F5F0026846D4D7018F
D1086FE14857C8F6AA9362E8A83A6A57DC4665C83CB467B91E3927D5686371EA
D7191392BAE341ABA872747E28E109676D381EEDE3C149800DB73A8A8EFE5F6C
F5050066F096C011F520E7C48A44E204A5FEA516C92F517E99A6C36838F4901E
169ABB0815FF853775C42AC0554EE04FE7E1B9E55EA6D91EF4C690E4E51B097F
3AC5B5D5DC258E289C2CC39C49FA7FCA87A4CEAE1E98C89DEC66C36D66B33BC7
AD46FCA015962E0E43EAC23473B8C5A28A77405A4BAEADCDD9723EB8F04594E3
20A187445431E7152E36B1ABA0F84A764C4D8E3D111CAC16DDF178D1B311175E
8A21F53CB9267F5EC11D2C6DD2C9016445144AC29D935E25FB859FAE6A43B285
27384FC362A4155E57501BA08117D85775D7F6BFF01343D0C31FA09DB31527EF
F27EA9D9BC61135B48609C8CBAEB54B57BBC8878B0D8BBB41D571453B96D9DA8
9AA4E108CEB3E8CCF470935DB43A9ED37CEEBFA50EB5B674CDDCC032F3EF5E75
3189C654DE6743E90A8C64E62387AFE3625F78252BA131E7D12C4AC10D348A78
65B4722DF727422AEDAB39D13E30355B920805156819FB2CC98FC6AB27000BCE
EFD3B56938D13F4A7CA6E65B98CAD6118197EFA0960EC89673C4937EB7FB9C73
E2AB56FFBBADBB580D8585D605F5DD0AFE529E542684F7128FCB49E52031000D
8C722F1861887B1168EA62CCA42ABBF5536F77D4DA319B068F0730E0256D9333
A4C13983727052AFB268C761D9BF496F7D88EFC0F3D5229A02A1DE4B7DF44085
951655F557EA102697A88CD6BAE739E7889D1F02AED602C092DDC4F84D43F45B
B95655E1CFAD710AF2F6D52AC299C2F3B6797C48AD2F1E406244428DCD70738F
553F811358291522741566C98DA8E8D2E474AEBF8A68FBF7124980058427293E
544F826DDBA5E87F4EBB4D7669792A9D11BDCFE17E1F85AEB9DD59FBE356F557
71C36698DEA98D0AA713DB449FF022CB21507BFCEC5D34D8B8EAB6A130D27BFD
CCC2C140CC96EDF30A7E725F65F7B2C7B596DBB8AF64EC50D75FBFD03CADD120
B721D57677236032A76258122F65FF58DAB6019A76314578C36B9FE22FD45086
F515FD2667AAAD3627142DEC0CA0063253BBAB563D405650BF54384F81CD60BD
3AAD5B841CB97E6FCE2D82240D7EBD29C3DD066BEDDE4B657AC4A41568FCF69F
48017145A76A0715B10CDE13F8EEC7CAEAF641AE53C658487DB65ED59B6C3FE2
A41F538488378BAD0C5A805720EDDB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC17BE4D1495247B1E
C6579E3121725DEB36EC7B4A482E97B68B3C6F7239B54D7AD1F0AAB6C7A4A269
4669C901D7E46F00277891B9231F2831C19E73CF8E1EF3F81C1626E392D4B1DE
9A318360B9CB06F8F917B354F1D0ED0616289C27C1517263C2C8A901335B7753
AB510E74E9A2E37BCFACBA21221DA50567A45EF2E120FE3A811ECA081A3D0478
D3420B503563CCED8163121C1F672C14EE66ECFF5B219E8BE1598540175EAA76
406A0BB4DD3905C314C9262D553D7CB133CACA87F1535FEE6EEBC67F90818206
B95ADD734EB952C3415855EAFBEF4701909913270E0060FE23E1DA9A96CC481C
F1E7447E0D7936A4FFEE97317843F64743D9961F5F0B5A7C984B6BB390F2D2B7
A4A7376D231490C6836957FDA9D7799E5ADB6844A46FE598D19AC35D7FA92073
5CE37D8AC7115190CBAFE8841364D8DCD31B3D5122C8661BE65734E463102B69
B470A6190039BD94F2EE7972D0B24694AE042C8C9046F1ADBC7E9F64BA5B13B2
D3DC8707A8D556B16A79371932FE7BB7FF36389A0D65C454BAF07720ADCDBEBE
DE2B2275FB0BFD30DF0755C050400A2697EA21C97B9DAC9C231977BE978EEE0B
7A3704245DDBD08FCC0DED7F3E886E0206CB52BA639FC293CBDF7584CA269DEE
1C97A0F984F440B9BB7815A53B725661B27F5EB9C425CC1D2FD1DC099F780350
93ECCD7AE138C5AE0FB4F043144C9903478B4BB53E4EA9CE571B9871E0986884
51E3C31189183A62A2EC5CC2E6A672FE540904D7FFF20A101683BBFB391A8FF4
70C147C6813785426E50436F7CBED5E49046AF839C10ACC0ED47355D0FAAB8D2
509FD9478CC52C35F034F126393B7E62A21938D2166FDF363FBE20932DE23964
3456C3A198505449439794DAACFC09D88CFBA928D5D432170FBCB19B4C29CE1A
3D849EE85A0DA71350E6329ECFF1C904A94473322298534D5CDC3EE499B35288
A3D966999F260EBB2C2B7FAB368FF1A3266389B0907B8562DD08AA56021CBDF3
DE1C1F8645DA03EA729468D2EAE72FB04C6D2B4416E3E215FAD05624386895A9
7EA28B1791D94239667DB145DF8595130A44E89C39D2DFC5D3BCD8274E2503A2
D9FB123767F732E7BC40839603AF3DE5A65A1FFB5B46F4DD795C6AF904EF2DB9
9A4D2FF56D5D797C5209469456CDA0E8BFF82F12FE318DB9E65DC2F3E2A632CE
F071032FF667B3A1F62328B34FAED0F5B9722DB2D6F514E8C4C4BF3333DC0A7D
33341F627AA355682C977185591ED2237DF1592D73E3B8C51099724F9157C136
735CDB7DFD57D62B513FC5B63D113F7F0D00B0C41F93C548AFC465F5E37BB0BE
7571DF990F78D69354F116E92586DF8E30B2976991A3B77251DC0F15B0A7E82B
523AD187A3AE44D93FB7A0D5F3674C2359AD152CAC44BEFD881CFA38F31499DB
2BBE8FCC2556BFAD8971BAD3E036F15442EBD1557B0BBD97F0024189BD08ED10
558604C17FBE7FCF01EF9FF989CCA3DD4237244CFDACF1D190103A64E569EAB1
1EF3D3C7E4EE38308D20B6D91423D4F417B38E66572D9109520A371D9C501408
F9B9D1A30E09A7EB286EF0378A1D9E27F29C68624E863B28B2E7B4C3C38BF32C
CDDCD4CA025070AA646DAE4B889B575E8F4FFDC234D726EEDC3E7131A3049A89
BAAC98C00DE2278E989D877D2C7F808C2D7974C2E43250664A4D429A915D9F14
DC9577AD31EA98A51A1DB9CB0EC09492777B3810FCF8471354D04CDC1F08BDA8
FB63097109E771AB92E0198C9495D378DDF5E3879446BFA1B4F06E2C329AE0BA
4601D3607DB7466631822AF1BAEFB301E6900AC2B65CBC26BD9497A3B908EBE9
A2B47EEEE8018439FD1AEEE194EC060ED2476275D5384C43C08BF69E4CA44F7E
2A7780F6C88E1BE994C9B91DF4FA10FFB4FF1570574EAC8975B14588128A4F2F
6DC7A1758B036F6C2E48AC5C1E930346F7CCDD0AEF1705407B94B24819D3B17E
F3799178AA4E926A15A00063146618C8D2F36115E1867B79B61186AA832CA1BE
709523407F265666D7579BB8933FBF8C116E6294B75F3E3F9C620B59788EB9B9
FC1432C6903DE4B39EC952DF960918D17891CF1B76A76C2C64A87D5D014E189B
B9EB0D1DFF54A93A8DC14BE07A433D04CFD43A54A673FD23ED95145803260D08
7647FF55993A6C45E87431AC3549F382409883B823CE9FF4464500697CEC5C83
1BF140BB33970339EA0DB212ED3410AB183C2EDAF173F0DC106177F0F23A123E
4C539DF69555C9B7126C35A129D8B88307327F79156D6C685EB8A77528DF8313
1F02C5028D0F35B01F0810749D7DD98100BED879F02A81987A68453D1452EFEE
1B97A023938F8BC45C2E6ECEA957F5A825925463C653802571B320DF9DFE3589
993997CE0F1D799465DBFE4009BE6FE861BD920A19FEA255531A6A62C379993B
DB9178BAE43920E3AD73ED8D6A74D2789379B0297207C811514599AA82119E8E
EFA304677858F156E9EAC6EC03872BFA8D9CB1975BB9026B56FC3F24FE6E6EC3
01C670028FEF178AE85EEF9167CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC
775773A60B53D4B46DC4CE9B9FF1A7480F80EC4A1788BFF001DE4C2236D33C44
7ED04ACA9DBA348076F8E2E61CF29780690190D2E829323F3BA9F7ED7D399CE7
35A6A51764CF5E131CE693731B0C499FCB8CD67A6E7F7A04BC64ED1C8DB6CAFE
561E8A2FC628B5FB42044DEF0D0FCA179322EC30767616DAFAC22A2B3DDB4912
607C200780375606E7B763D701554DB8626A77E47739C769CBBFC9865A54F234
66508FEDA251C87F1111C25F2F8EB6DAE7A19255CD29401777494930135A961F
58F8714232A115392384B5A41CA2A7CE42BBBE661B4B40F59E4D372461555B0F
22DB7DAB1895D9C7E6D3297326D6AB654464E3E70ACA1D593C2CBB0CF1386B59
B3EA31C285E803A4466B47E2F3918C4365A348A02DA99C006C44777716388AA9
87B2665C366918880C3DA0E469D3509EF0118A4E98E17F6D7F9217151E8415E6
2819174A53C38A25519EB9A98EBBA5BD31877A487B252B5C832E109DBB9FDE2D
D6A4C645923DC29F384171A48660EA36DCB2D93694EB75EEC0AFF68345B17B82
9686C23D1E397FCDC2BD63B0A24FF7C52E96937FEABC99DD65CF6852F09F53B0
87A3E5283AB296939AF66086E18860B42C4645616799872263B1C363FB283C38
F0AA2A2004B7567780B795D46FB19165E0119C4359B471668282B84A6E6BCBF2
83C414E8AD6781F12B0F797290F0F4E5C03F4C05E63F7C7FE280E34E28E46B44
89C40D4C896445B96E7BED0BB864DA6469A9F85E1E59A84A6DF6B2EB858CA450
0976BBD5D5EAA001677BD081DF18650EF53A232A8C5013F4D50967B5140E02F9
E0CEFFCB4367B05CCBE5D82778636F411B2B72CF35172587C13265E7A78843F8
0CD719C44633862B102690C1545ED87773C6B3A8ABC8ABB13ECC3B249F1878A8
FBB90B6401B507B92E99DFF7DB2A6AFC77F1D7F6CF658032F8672E0E0600DEB3
8A0C2618A58148687C5C9DD69AE2932074325629DBE7BF3642EC9C7BBDFFC7AA
A6EC16C797B31B0006D964EE87B70841BBB0011D86ADCF5D118DE26D1A1F383A
2E3003317B192D35E8984EACCEE49E15DCFC537A774E8F036EA3BD1FB35B49AA
A6F5A4F21347549C1150C47407D2FBA6F34AFEEE271FE7E2B6FD928FF7E51CBB
67E70B290AC88D73F9CEF3648B20C687D77FF83C5898C718A1E73AA063486F3F
CD61CF880F6B9A1B6B68F3CCF0B1836A57B850BB9A806FB807693E837663D92A
3DF30AF50B62E4ECED90147C5AB8EBC973CD8D3946E50D5357E57CD8FF42D742
F39A7AA01C8B3074060D1A0C716B559A93FA16FFFF44DE8B99D6205FECE23D72
A9F61619E09C929FDAE02B4CF803672EF0AC1A4F76C8B2A035BFA7760362413D
7C9BCC3D58D6FB6BD665CA0D2C509270C53B5EA63F6D10265DC205CD8FFD81E9
0B3540C81049C819D1050A62F195A3051CAFF0C8404B65167DFE633C28A2F142
B856E17A6EC6EE510C1F0AB90A2297A6FA436B5116D10C6BCEFEE8139030E52C
13DD6B11A36BD9E98190CCA9EEFD8E5446EADB4DBF704DD1B3E7306BE84705CB
003C7EBA17035392BF285968C0DB6DDCC48590B40E808537744BDC081F40E027
E9A5005DF162A28E497C231A0B0AACA7779C204DFED7A30C3CEE434832D290AA
AFB6CA80087E8426C618F35939407E71E8A81EDC28658BCAC46B290DFC519741
D3858AE267B7F82277403C5DCEFC2A5038C96B8A9FBFDF25D6779971EC4E026D
010AEE32EB6A06C29075FF2BE551E14CCB2C3DED39E4BB878CF4D26D572D5973
33903328DEFCBFC939D820A970BB481EB62B5A8444D44E87D275D7FAFB371C31
D79FE5B5ED27C47B7BC864D52276BB967CF618433020670592121CF4DF75E6E7
F636E36678B8EB2B2CC99B33FC7A8B194070BA732D56CE2E449918CFA0BD6F36
15B632568E0EA67288F7AF12B053A535DF12D2DFA60982CBC90F930688C94329
B65E14F0617A0877BCCCE963F89BA1451FB3CA19D27633943967D45F730CFE0C
2768667D461CA559EEC7A15DC14530341A1CAF938F8592C6DFD756C0D6DDA4B6
82C5ACBF9965D25203E5BEA71FF2B972E2D21177409B07626EE46B039C4EDE4B
3BAE81FE47D86AD37AE081C6C5FFD28AB6F49B1FDBEC0F569031CDC00A227099
1367C2B10DE344349E457FFA665A46AD11556A9F47AD5CAE8B56AAB796E5C554
F4EA2AE2FF56014216ABBC37A0AD2B5A7187A04AAF44FDF04B0CFB2F24C24ECC
B0E3A458B6A64C4E94251295465B2D3A111E4AE90D46F1A6FE3EAEDC5E222FFA
572AD30B951B641FA734C987AA6C783F03CFD0BD479303CF3CAB8A7CA381AB5A
0384449C60F3766E1D58388B137C7C2A920797DD4157CD823FA597447627009A
E64A758320AC65513B3D4B0F757008B6FB506B0231114A3E5673BC1C22A00A03
EEAF96BFD849C4EDB9EA18273257E27877CA428C7C71FCE5AAF915AB48BE911F
483064B47FCD855A8966B52C3A19A15CB67C3D3C14C0F06528F9391CB4A43666
D0E8A4C13B56002A2DD5A5FE0134C4BB9A4D361FCB02C3BF7AA116B5539455B4
D778F3CF4A6AB36D20EF6457685570194FFF3E82C7FBDB6F4DD8BC56EF152CEF
5EB66D79C82CEBC1108C19CDE0D7F03EAF49BE166BA3DB1BF765EF0305CF3243
403EC4C62D25B1ED563C248ECE78A971F4AC9975138B38579FE7E7B9A29DF26B
7CCBDC5680292E5A05F03A121970E8F1633C58C6C2778DB1347BC022D0E2FA10
D86AB5C6B4B481ADE2A8040297C80939840A16E3A746BF5FE620C9DB575D318F
025FC523B81E16B50581C1E023B5E02F4BDAE14C5B2C6B6ADAB369C4ADA9783B
28C54C4E177CEFE4C58D836493698C04C678D81AF9A46AD130B06112C4CC70E3
B233AF175A96EB0567959BB1E236626AAEBB939F70CB09CA40A21CE46D1EE38D
60996CDC72A0FBC24A7050ED3E7841D6F2A77C4632EAAFA8525DA026DC1EA8EF
D2C30BB9D744B202965DC3D620232885045EFCA1034DAF2DB898D8A086290E45
115C8DE9877BD43699D908CC3F1B8384E661A40036AF14D1CB2B4066039D0F87
5F6F3C8137FD175C468DBB7DD83111643F79DDBDB350A2A18E0FD974135FB2AB
53B5B4648FDE13AC7920214B34B58A549D32519C5D9178BEF49F6185CED1820B
C8C8BAD838907339BF36DBDB4FC0910DE4D3C078FC13D552DD8708B0DBDDB463
75F63FCF1F58F13400D2BFB8296CAC6F1B2A465EC90AA64C6BD5C4A03C09921D
3F83DAD86DAD66D3EC9333D1DE46382E841BBF95A07528C8343292E178983EAD
8652B985D89C0E713F556814E051C6CEFE7E83C2F379B88C0A1693BB33D44602
2A4F9B9A418954A645AA0F6D4DA8F880E5C6524D974981091CF787CE9CE51D48
4F7E4976C4BA1C110F70D776BB12E71B9D621511E0FDB61D6BE0D43D699D9DD7
408F16BA69DD6FEAAD3CB6807D13251534DE1386509692C2E2161370940BA53D
FA02A07351BCD8C95F89E653EA5D589F257F3B177FCD274F8F6B6D7AD5E16EC1
039ED26273E79E39FF03C8DA1A4DF6C8B7B0EA9E611C05709D9CCE9EE283F4DF
B79975EAD0E341B382DE4540CE5E663A6F3DE864CFD51444738A0D95D1808AE4
ACAAC618F3F16299CA96CDD55426B07E0D6E591ABD90B651E24464F80309EA07
DD04E74AC5D873DD414B29138A74919652BDD053FFE1204E7588D287FEE615C0
61EB1B3984BAE5B41853C84DAB15C962534AC5130E87700E6D1522A7972805C6
C1CD07055847BE61B9B904F2F2DB5537B2139A0D8791BB855BBF53783482EB6F
8264278EE8DEEC7FC662CE4F3167F38C3D106535534A9ACD6582F3273B6FCE97
86BCC3586CA953EF480D4620739410A5F61035B90981181192DC54032651E305
8576517BAE6EAB9429FD359809D95A11B3A26B88CE0DF9B0779B4235F7B5C9D2
A113A8B6A59568307D70C25A090D4AEC9A71563EDA990CE3481E7E574106E677
1F4A5F8ADA324165EFB0EF200E16BA13E4A36F92147E38CD271718777AE53034
5C43C74E88A8A1E527B0E77BAE62868382DA75973AEBB7236B120EF5502844E7
50853317185E95A7C250D459945ACDCC8DA70D5339C919D9954FE91E079DCFEA
12E1BE6D51D46599D8C2DDFE94A2105FC2D898DF5FA1E5A94867E63CC03ED3A5
C17C70BBC9515DBB6667A7B772523155BB827311033820B0380F65B3AA4F3E83
7B5A92ECB4DD4B8C7DBE9B8A3BD00614A35B7BD9E4187F68C8AF448E45B09267
39D960D4920A692FD967358CAFF45613A1812AE6DB4A62146B0400F245DFF3D8
C391A5FDDFA9D9A4100198251715AE46CBCC7DF2F9BE6691B79CE6967EBEA655
522246AA9E837F39F1999BC08418A54A12B62049509032903840182F35ECB419
561B2C36D43E3102CEC57B8A58E46532BC2C3F5CE609519BAE4A852A3DB40FFC
B37C172B66792ADA50A6FA842125BB44C446B18804A42B5407B67605F58001E8
F77D69BF9D01BA23B36EE11CFB793B195BD4BB9ECC11DFC3B04B9EB22FAD6B16
E17D0AFC5974B91E196B6DF5324DFDD018BC44188E63C0A55D28789356455621
75EDC8F14CA5E94176E82B20CEF9DF0D0AF356487ABF0B563299A7E86BD65251
28EA76A0D7779A5031AB41EA07059ECC2C13AFAFA8AEE419D43C4429E93D9208
05E96332290E522C15C1AE0CEEB687AEAF0618554EEF9AFB7A50AB184C4D6646
7BE1397F82EB7A85DFF7FEF08D762E63E465FD2B17BD2BED7CFE5F7B103347F7
19C0848A1EA0EC028B2A574578CF69EB3451FA40ED22C16F1B8DFE03EDD38AD6
A57D3251B528C31379673FB1529A9AF9791A4C424A2874C0D00EF8F4EF7C972C
1D2FA4728E5977AA2B693A1D4A0EBCAFEDF511A461E4A4865CA1CA04C0E671E6
57EDD876C2E70E8841364D9C8E8A7E042A23833D25AC141FF1F6B705CA7C0B29
FD60C8D9E163ADE6A55284AD768E7F1F0F0D46CA4E95316497F6FC73DB94CB0B
79AE05AB671E84B03B82D688E3D95DEC15C86DD8D10F5DA77AFEF7EBE3185845
084731E3A0890C4632D8F9D8196B6AD43E15F3322E36FEFA77D26C34ED3323DA
25776CB7B9A33B04D6AC47E4501C0E3AB6F8F05E218AE28AFCCCDE87BF0D1726
0A4BCED8D3532340A46A1177A2269AE20BF8CBFD7E517982F9CF0D4F9458F982
8A664B3986F774A8E53E8EE1BE623EDD5DAC3727821536472D2381DEA09B8BB1
F73E691434A50D33DCA5593B6AB680AE19B2231D557EA18780968331DEEC1ACB
0FB8A3AF9DC4FED3912AD23C76C97F952DC8AE60D2EC08F0C85E2D35E33B794F
D8B021734F471C65A0A2FFEE1BDED30D4765A1F0230730155D0AAA52A966CCC0
0D3DDEB150C344328CD04AD0D8083E0BE447672358DB7D34B50BF2230C7ECF54
90C1D4AAC519D0313E2B371F7131209281701D60001C69A1FFF5732BC1E0076B
11804BCE07854589C4BE84B31A81F2784FE0D5F242F5ED8508E1CF87641178AF
DAADDBCB87A95E0EB45F47522BD93AD903B2EEC8D3C188F08FF2AA1C7D960281
98DFD7488D907A49A5C52892ED6171B0E25FC76AE99EAE915AE520DF86C1A46B
EDA4208F9A039FC53E8D60AA215BE167083176AA2E3A947DC40E7CDE4E907567
9A5CFCEDF130FBD2BD67D4FAA2F3929DFE0F24C3A0EE301101D63EE838986E89
EC302D38D6AF6612BB83188C479E48F8091E557FCC0849DED89E335BF17474BA
AE04CA1905B3762624A568CC911A30F214ECB87D0193BA0B6F67302D4801A736
D187122C5D1112E84725B12C2B93AF43FAABC38C498A1E33FD5EDC497CE81BA4
91CCE1B2F223FF6AA3E2CE0B28C3575F8374B2AF87E99A2DADA3728C9E3E0893
C478B3F7443D9A332101D6E98E963E32C1C000CA13E1A1CF2080943CA932CF05
5E41018138EB66FB67C22587FC14898051C4FDE207F018664693954B4833509E
1FD137D8B823953AA248937D59F2D6177CF5F25AAB7D45791021199BE22D8994
0BD35FDE81EB8BAC342210D5B0ED5550C4B54109A1B5D3696116BEF7A56B29B7
FA10CA7213829FCEAC430A54AAB1C77B24734D53B271D6B57F53D5F6B85D40FA
4E5913528BA06352384BB5EDE175FC7E481EF74C90360755DFBF7D9F9FAB94F4
AB4F1298FFDD276633AE882A540B806AB247982B2064115FCC2C0B048E62B50B
F64A9A860C3B953BA836E3E7313AE910CF60A7C2E6C17347900DDC598E1A8BC2
5C0F1007C1522522D8B549791B596E5804B7F90577F737DE057751F66170EB54
C1D730D4C7599D652F2DFC322AA7F265EEDEFA3B5BA9987C43E34B7A21AAFDEB
8EEF347B1DE9CD834797E610DB536D76C9184F8DAC563B375A47797E0F0C40C1
59093A6C73919A888BBD53BF4899A3D67428A633DF53752834D0B8998C31887D
0A4C231FE009050FC2D29D0327D95FE84E9776C18A1366EC96004C09C4DB5790
7457AB1FFE65DCCA47FBB39347DBC337F777DBEBAF006462A565364BD1C64F9C
1F11103391785005ACFA3D838E3DCAE83730B4ADC061318FB738328A4FA165EF
C4B59C3BBD5111001519A846BB83001640943EB2E9CF8202D34672B6E55B3C54
5DC01F32A7E2A199E9F45B099DD8A7DEBE298B7883E0DA25554FC82FE4E94B90
0DFAB7D97CC0F998B96AB3E3E182E29B819FD861E52B04E00AA389893E477F54
3893AC88C956283FF7B7628DEDC302E0E830C90E221969257543026AEDC02C1C
B17CAF8D1D1E869F0A3EDA5BBEBF135FBDDE4099314E3452D1C3006B69E562A1
62AE5CFF0CDDA4763AAFF2692126B4FADC3C4BFD139E015E0D1D3591BE5930C3
56E6B8C1A4F0AB29B1EAA43FE53F100DE329F2992ED2DD8BE4396C900A787F72
8B417168EE9C32721CF77B0BB8F785CB0FDA4BC3E04966334402F76388AD6AB9
DB661A04037C111998C73DD8F3EDCF0B1F51A01691E505DA03AB3799AC2758F5
630E00CE29C4EFA9548CB450E12BC8B4BEE5E7F224860A47751DFC2986440D71
6CFD5D2E9A57D84846762E7C7940B91077B03D7B7109D7E208791B387A55FE59
88405433B58091194908791602C3A6572740D8E84B479A9CA5FDB4685C29D7AB
3515C06C70450C9B1085CA881F4162D5EBF5239C62338F7EB882C2D4CE53D9F7
ED759091062E1DDCABCE4371C20311C018E4CB5C55AD278CA8D5550ED65F03AD
74393AB3183B6CFF11BA62324EC334B969B3FFBA35EDADA4AA78CB9659AF92E9
606476F8F8475D52E2350677895DC6E3EE8EBFA01DAED85125E5FAEE33B56AF2
6E3552AF8A5CD10A347EC239B465BE0416FE1EE4BDA71618D70740BBB31824F9
36E80F0F7F0D395E15943D0A90F2B930C579EDF743F2C4307989BBE10C6B0BF0
A640F2DAAC77D9AE654BD6E4359A140F0845EA7DE0DB3C13B8C18440DA54557D
A4B62DD372DB1D4D77D17EAA35BD7DEF5A54D050720CEB18CF86A3D98D4D0B88
323556BC8C21388AA2B223E95401B4A1A3DC32DE58928B59A875DAD61C76F5CD
D4EC5A431AE3F97BEFD291A0DBA52EDFD3A216173C3E69F47405B956E7F91E0B
F038CFAC465E3F5A9BAD0ED4572921C8A758DCFF0990ACDAAFB55D94C91EF75C
46CD9EF07F9D957AB2A2DDDF1E29A315D0C14B6EBF8A741D6182E270D23A9037
3A232F8540A9FF11ADA29B5A795C29AF1758A378BBED7FC260FFC27B6E2F4508
2C3CD8CE3BC94EDCCB1341B54485915E6EB58AE03B17825065A7D17F4815CA11
8A1F4FB6DFD790CA6F4D37A9B913EF8493B07DA95DEE465AE2ED8587B96008A0
7F230EDB999057DF4BBE7A6E4ACA33929E5909E1831354F7C4A1671F2011916B
845F3F2D5F0BF6ABD422B84905B7C67D40023A5C8DA48353FCC59444A3FDD877
FA602E026B5746DDE2AE0B93235C8367748C391D556451445FC55467F1699C5D
277CFA1C99767DE54D5F6B36133B9FFA869D762529A8F67B20F9BC80A37CA62D
FAB9676A91007F89CF2C73697EB452E0EAC3A4727E4071C660682B4DD547D16E
D59A293533DE22B29941EA1A6AE32E06C7E218BF18C1E1417E02C197B010E49F
7B468D51C05113E4D80FD492556B38F254A74BFFF2BEAAFB4F0EA0D1DA71F6F4
BD3613EA73BA2AAE3FCA5D2E78ABF50BCFF5131710A0C7DFFE0AF6DB142F9D94
4983B19A5C42053282E1FE3BFA95AF65BA0898D5292037CB52152485A610A2A4
C8C122765DE3BB17464AC3D5E49D4D64351D91D629B76E3B3E083DD3693A0486
D707E6922EF30EEDB86090AB69CD2FC3FA26A24FA3990B8A907262E2FBD774EA
F1FFF5E7B44914B91A9E1EFF78BC487BDF695047518807D07CDBB27D8961DD97
8A1C9065C03C0A3CBEE6249D9B0F04473E50C27A3F7AC0B5925B6E59D1ABDAB2
8591D5B8848F53054EBDD751155D9D4067604A1D88DCAC94E3996A42911937D6
C56E930DEB84FBE57CDC465071AA0F5F8C68919CEBD2F3724D11CF2BF1249F7B
E617CD85A4CF4D9E2ACD6BD09E5B7CA07656AD2BC936C0DD7DED7394531A0EE2
47DE7DF2A0D7301FA3D43FB1C93196B6EC880160587570B62AFA66D7335D70DC
85B541195D88E9D05014F6F4C0F4DEAFD21F2BF72D521021EBB8B4112BFB4401
722F874158CCABBF353EC4D4651FAF4FBD83853338E3A9CE9903E4584376B648
AB46FA40E89CD0FDCB58A2AFB5A35AD7EFC6D54585AFF4EE936D1A28BCD3F6C1
BFD503799B5B914B9013FA9A0BC03190EB8471E6C1DC92D8A0275285DAF56074
1AE0EA30DE52279FFB4287E96ED3E451AEAA4F49558BF0C590D7FB9E51E0002C
2531F761DE6D3EBD285558F2A5680480EDCADDA1659F4F521C20F6B6AFE2203C
CF93BDA6EAF470F63E7D9DF58BB8315C037393EAB37402008D802A9F532DC751
5DFF837035391349F0E97B635A6FA76AAF9A8F76F45350278E87E8E5B893DE87
64AEE6976ED6535F043989435094C8A626356170B2294DE0D035660B34D418B9
306E59018313B6AEFE2FA4764C94CAB762AEB6F557F10A818EBAB6B38338EC9F
0B780C2988A918B9C0E5866E618973F140369E571792F64EB00D7104CA3C46ED
1DD8FB329EEB5C12DF73093F0B7DA82982EC8D9B3B64702DE27EE3ECD738CAD4
2328508DEC4F28AE0BF13EAE650848F444344B8F0A554631C762717654A8661A
304947C9220AFD46488FE2343A0FCAE748E0E09B5C662586C3E620FDC9A1ED67
DE377CE2C07ADE8507FD31A9B55590740199B1CEEDFA1D7B09EBBAEBBD4A1C2D
D0C2E5D5DA51C9DBB482F0FBC6CD1F12DF0574B94A95A7DF70A43B5455AC3DB3
022900F2F4C74ADE54E11C6404E3B92150195CAAFEF9D572901C70425CA50ED0
5CFA3DCDA1A5149D951586785FD5C89E7C8F6DB45EA27C4E5063A0255C309495
29148EE6433107276C031B1F72EAA4265BB0838DCD457EF120F833059D89E65D
E40BF59779B511843180C835246FC0E311F5B836DC8B40EF2AE2E46411AEC69D
BA1C6CC15D02088F16A1F4C368F07E2819F636AC138FDADF1AE16E485D4CFED8
FCA558B2CD64370CF11CAA5C864C3A6806F042ACB4BDDC42273DF412A64EC73D
EE934CB45A0B3FA402B936C3AF0B56582A4430545AB6DB819D2AE2BBA755A99E
44229EEE9EDD94324E9672695810BD316DA3E4769323AADE88D389F67EF1320B
5B28135C0A16BBBC8316AFED0CFD3D8B2F2CCD410465A031713B61D66C7A9E52
9E516957C10AE1234B2FF530206C0DC80FB60F5508DC1F93AB66850BD1A70053
A8F123611E9EE233A1AD9E4911B73395A8018447445C70182956CB285CCB00DA
9FD9D03377867A8B5359C25726467C4F79AFC3858D40944061F4A2B7C55985F6
6D0CFD1B1A828B78C0CAF2CEC7B4CE7C2753979516D3A5DA9640B39C4F8CFCA9
137A108715F940D346BC3FD5F7D56520930980EEF27FF33ACBF2F739F5581B7F
095C21D2374BBF586DFF7F8B04BF19D0D69B111A231BBEA764AB36C7580C0708
940BD2D1BB3D811FB53714C79A975CE4FE080C0836542D2AB65792ADBE1E1D12
4D400F46DF315A87356791C9ECAEC3482D78A68CD721E45A2C2D0069037465E9
01AF9F473108EAE6B9B5313CA65E1B3822907482DC4FA886F355BC9F44330008
74ECF6036B6E02830284DC355DEF7CDC428997C9EFA8FC0672AFDCD4FC87889A
EE8A2661816FCF6CDC988E51482FAE0FE37C070C679AB41393F0E869CA4CC955
2831F00E04542DE839149DE9D0DD045233912CCF4D7AC6DEFBCE367AEFEDC338
9F5B7E841DBC5A7559402F2EA0598295DE166B166902D34E5CE8FB049A404C80
8346B7C97C61FC85EB804BC73A1698F74F022D1EF9CD143FD6A57E94794B06B2
827C2455069A784A9A88B72F1A2BCB3BA80243FC966C6F32D02F49D5D98CACBD
492977E84C846200B513E432D85023FCFA6E8CE873E8F73CAD88F4A1C2A855BB
DDB228B02959EED58954EC30D86C64468BDF4ACAD093EF9288827C7ADCED8A46
7D2C2A5D0E7D7A1D55B2A2F1740C963607EEE427E881F994B1C0C428D1A25A13
6030354209CF44A2ACC837679FA4D38E5CC8907757AA57059215B934F5AC43BC
D3E056FE11C15B217BFD310E78CF5A46A451B923DB6F23CEFD40249071C7D084
5B94CAFA9BACB33C2E8EB658701AB41FFF538502793A67C30F667BE9AC914743
738F0746ADC5E15FA72022868E024E53647CA66B0135B2BAE763563E8F801C43
F4651D987393E8166B894BB8858B382167B5075249E72541A0C791BC2ADFF28B
3EC32CC5D5B3045583E7E08685C4A04D73C266A07D5249F6EB31FDA01D9F90DF
5D49C33BB837449C77DA8A635C9007A657DA2CA9CCF884046A7D6AE9F94D1B38
DF39CD22257542397AE840F827374875A3F38FC578E1AAA70D73F629686ECD32
82648556875DEC88AFAB48553737508420667593F78D0692C331791AA06CCCA1
CFA2834D5C672DA46CE81B1D129C8070F5EC8F574825C4A4E07ED15F6B753413
C749957BF716D30FA8C0C66BBA16E171166546651001FB3C599F9C330221F236
EF60A606EB7C2DF1C96919E34B4527C22B77503FD7C6E9239CD077A30A7778A9
024B3868C0DD7737B0094E1B9BA8C443BE8B49D22D845EAC1DF740675B7D15C6
CAEEEAC922B8A0905A68C0BDF7DDBD0721F0A1EAC003233570191FCE6F552E13
91DCB66112AE3C3856C58A3B16BD96B660287E2ACB473AA6C5FF9C3506C6E363
32636FDA80EE307F06214ED29A55B4498B789CBF21D1EF03DB53313BFD1F9636
B427EF278E40A72D18A74EA0F560890178E915F04374A053118F1F73F5EBF9C1
C594193B000C6FAE4AD9284D37B9DC3879AD5480945879863DDFB2728AA5B379
D014274A27F536FE5D747D1C4155258D6C16A07E21A1B617B4AE15F25AEB80B8
9A3B142E4378EBA58F599E6BF8370D8DC365A2A557377F0CF94C53FB6987C7F5
203E0A324A5D5C20B5E5C0F8953DCAED4BB0F7B34A2BD59369DF7A31B291A24E
6BE56C4D6DE66CB1DBB70FA4F34F1C8E523F271E2F1BD75DF2127A69470712A8
1146A9A702E6ACEAD755100BB24BA9F3DB98B28DB96B5A55076CA36E6F17267B
EC702AB0CA8C71B1948C2333EF7C1C652F742605B707B99B0F3343AC2C62894A
6AFD2915A612A84CD68A1FAF563DD0046A9C271E0C1E9BD75AF56BBD7DD699AE
B8DC21251016022E15B9974180A816B38E6077D09BB5063DB9CD66C3292525C8
800F92DB9A2B49E109D30317A8D9B598B7A3D6C13328B4EAEAA8E85FC7483BA7
7ABB6BE2A8D80B0231AFE09B5F858F6A414D156B0816B649A77BB05E5436284E
FA466DA1051FF0A38D6DD3AE581AEDBD156BBE411BDF33A365D1B477628E2AC8
8C311D5B96037AD26CDC5AE2850EF19E5C1786AFE7C73858A0B9869BCCCDB7D9
5DCC6BE558951F039BF0B0A4893456520A9460A3A1D689FF15C6D61B75335A54
AA423CD03BA9E9D1252B9A0912CCF886D39B5D0281A0BD5B13567CEEBCE527D7
9729645D30045B660224C15A6217B529546FD61377583B274E498E07AFC0C5BC
5370247F8A3C0D9B5BCDC5BD2F44C89D0AB888E895E0123F5A9876770EEF1254
3B847AC547DB1C64E328B35D977E3BBB2D29001B71A127194B92C2F67D259567
5EE3E79C24337A08B40EA01E384B0F5F23E42395CD2F238191F799851EBD9674
DA40C361866B692D1E580FEC76130316161AF9F20B5F05F307C9483D8D896316
868AEA82417D9E40CF84F33873A68DE78AB1C566EF9F02EEC317001CCF33999B
78B813586F207515B2F90D9128C466B5F812A575EBB173099205B6CB56B74969
36E2D1390EE92EE462054887787DEBD0D1E681B3F2DAFB600ADE237BAB0F7BA7
606326881C5AFCB7535B1FC15834718BD63F27DB6E59439C0D12C9BA322FAB52
EF2236A16A0C5EEAA1BE70A052E8C824A7DECC8712824E0787890DF6E2FB9B77
FF23772115EB87223C4D350831A881411F916FD5C7267112C8580C4C93AF49CD
6F4FAB19A631986B11F105D2A54E548EEBC00194E9973AA8C59BA0936E574497
A91FF31E791E8AA07073C51AF6519B257C1DE9338C89C652E5006C1FD63C3F61
0C4A632AC7BAF90A1E53C6C89F1535C5495049186EDD96081AE9209161A1C8A8
5944FFD5112B368B8DBE200AE534CADF48EDF14479D0083BC711E8E8FFCC52DE
7C0DAED4BAE9B2E84C49835801DE44D5A187F806B5D71210838C2EF1076CFC97
07870E2EB85CEB579CCCB78F6A59AC8337C98123032802B3CAB45366B330DE4F
4E9C9BA1439FE7CE606A9D628E16535D76D331C3B689CB8F871734E5DE04DCAB
47E0BCC4DA14C1536A67816CBDF40F64C970F5A16186C91D72395867ECDB009B
2D872772971D5CFD5AC741C04587B22D1579A173D70A45C500DA8439FF48EF22
48F2F27945BBE496F582A40372EE9ED2916598F3421980540AAD68DDF5F62436
BEED30A96D7AE8AB81ACDF90AA29DFFBD5DC4FC1E20A83DFAEDB0DAD3BD776B9
D986D58D0E817729A5AE10A66079F25150C13E19ADD3282A2FCFEFDB3912EFE1
E8AE19C7A99202DDE39F6AB35A6047EF179D767856C2E97010D8AE3E0B7B54FC
8D28C03AE0A4450DC52F59EB2B64EAD74733F06A079A8D7E1C51638F07CCB58D
11FA6E5A68BB0DD76BF363B69CB708E5B38D02E3888DA1C978AD2CCFE32C9157
86F055657B8E9143858F8B68FD966BDC27555760E1CB7178C9A6F83736C16876
F2EE36D317644F79B49AF16CA78C897700C09C94345EC325070F874DA1B5E743
804616BE1085234183C73D6BF7342CD03BC49AF4C47DF130C4726F5751B1CDF8
9C96729F6A3401147888EFC2855DC776AE87C71C8C4F308DED6295A4AE3FE377
B6AB6DFFAEEC0A4CB368E1FA1A18E90331A61A23C6AC728D094F13734F529ED3
EF5407AE2863A2DAEB37B48BDE7107A3A28AEA14E126B51534AFB37AEC9BFD8F
CDF6BBA16E98BF57500941D9D36E2D7AB5D525101FD62A0999BD74800532FFA3
33CCCA033F9380C96D1D6D131B4BDA51AD3AFEF456A39F14DCD4CAE5133F7140
567A45EBFFBD807935C39B921679ADB9E1D6EABA5479109A0E3D8EA1D799D6D8
2A6BF12DC8F0B4305B96F4BD912FA93B24FD4CBECA38504CF9D8F59414460AEE
DABEC858AC6068DF59C0A4EBF804D0B26F7AA9F8DABB159B22EE3DA98A5E956E
E550361FA0C94DD6424E9C019739499F477B68D11C48F73A95471B0BDA7393B8
65D0768D43091C6B75AD249E08A743AE996523947BF0377BE83A371BE1E8647F
1F320962377B79C43A523790BAD398E203FE4178B953AACDEA9BA78BFEA0ABFB
93B0047FB96E4F0859AFD74E7281089DF54888A23946E9B63CCE61DF443BD656
F445F5CE55EC36DA2A7CCDBEBC3758D9057834360694014E128990C549E0377A
37B89D95955EB0600B0E2F2B7D004F8B1B6798702A9EC15227723EC7193B319F
C0837B9E7B174372941FD7FC3BFA62BB6740C1D9DC4A52BD6199F20B5DD6B9F4
64A20A5E5B8C26A487594A15BF142AA0F5D44ADE14F1560F4E047C647051FFBE
CB4F1D4174390E5B694A65DC4021D413FE4C3F9D87DB940C96B3A99446E31CFB
CB80B48920133E77269F292910BE30C9D8D63216F32F648CDE196F3847D0F9FB
A1D1C53D2462823ED6E89EAD21A1C1BC0BBC1FC312FBC11DEE4332B8606F8473
AA1FA74D7E60906AF15B589645FAF3ACF65762509AFEA5542ED79E2E3DC7EBEE
CF1CCF2BBDEC84C6EFD67BAE5BB77DF18DAF31B4FE4AD535534601260AF82F6E
4082B109CDBEE942269351CF03EB4B3D8A0E58C420EF76DDB9169A95D034E63A
18941DCF5FBDC01C639B02C1975E841C4F61C1328CC813A95BBB1A7B0ECB3EE8
6DF49AA9A1F067534D26F0BD7116266EB2C8476E35D480D048121E40222861AF
54D01FACB9E12D9A8974807DF5FE1BF8C5417AC8B93CD41BBFDC5A6C498A5AA7
49DDC15C7A56AC7BDE0B2384BB7155EA3091BB2067037CCEF97FE32565D18B6E
45DD4796335DB55FCBA3C1870548DC4D1A75423A02F2C29CD0A44AB791AF2494
A08F247F579B148A1D3EDA28C9E3646FC0DB2850D3A59D24637643D91E4E8787
B59C16B69AC433221765FE0CC6A3A7E778C1E15CE7D4CB41EA3D02283D7EAF75
D7879E75FB862FEE3EB687376CBA8F2115F66C93032420CE48A0585597AF3FE2
997AE43CBBB955F4F55E059198A5A40AC5D6221C7069DD5838AB1FAB06D84BF9
40E982D6DDE4CFFF3FA07740B139C829AB1AD1B4F4C106C71D85BB90C3E58620
97BC70068120C3DD0365CE70DFA56B2ED0CA7B648F917F39B6CC1EBCF8936258
D99F9ED1478B85456375D0B4A3D0E862E82058D99D73DF1D80EABFD39933C851
B651EC0B480E83BFDA41562BCEA17ED0A4A19463A18414D4382E37CCEC9B4BA9
B5EFD3E3B880201F08A67FCA8806715CFB6C0186DE6987BEF328B7A68C7A0F83
B551697555026C56BA57B095EC163D27E551BC42D622CF6E69C23DA8A18A218D
BC3A4DA28F4538C51A4692DADEEC1A6D58C4D4647681C3AC0D9CAD90EA525006
7A7542220A8D70A69ADBB45242B28D5464D247956ACC43A5D7DBFBA7FB42B06B
A2BD1FFEC126F9642935465A8B11DEDB3808400BA0F0522A6B98761816143021
C6A814E216A2261F950E229A37769343636E6FE3CC53F8DDB7837146445815DD
080EC27D5380E4049B5F962E98F3240612FDDA2A31863FC5C11D26594A836125
084C2242EC146493F6C76DA47091B0B36195AFFA2F61C3B44B9443E38506BE7B
14892538F35BD02A19AFA71147DF6E0E5C1DEAD2235AE9F33E2097E1BD2DE42E
09D535F37F8CF894C6C013D3A4354E7EA5F7263529A99CA15E9081805E76A8DC
87BBEF7C57D7C3EA3890540D7022178AE1D4E08D496521CCC0B947D22C84087E
E00608253E28D08C3C64685913B09799077F20D688B5737185B34BCF8E0D06C5
99647C54D013905CB95D70DB11000AD349EB306F9A8D52D324132E678F57BB23
B84FBEC357CE5BABDE5E7F309B1D397421DDA84352E50701B0CB4210A7C1CA28
BFF31D47B2643739D1599F59524B744CA57B81098271563D97C0D34823E7774D
2E36B7DC670A21F312B5B7A12F3E82BF9DD4471D2BF2FAA5D9BF899F80ABCA5F
440DA969141E9583C4B897C1F0EA3A617EF041D638120C601F10DB3FE6951307
B6CC58DCF13D26C24BC276BC97A34CC32AAE18E2831213EC51635BD7E903367D
1C71B810852F99A4BC05A797E737508550B25063B92A3CA0D3F6C814F42CD4A5
B34D5D617538A450E74F1A047D1C320E64E8B03FCE21DB6E7EB5F022F0D9FEB4
D10681A2A8CDB36629DD0449BFDCB2A96C1EFEAE014AA2FBD277FCEF05607E34
049D17C08F69D92AF77BBCDFA42075F5A275E488694D110B232366A8429D5B09
198853E4970DACB9198896D8FC8A560D0C1B22363D8664627FEF41D96344A0FC
318E630DD5C8B39D841A995B417A859EC9E4AFDA9446276F69C43349372F91E3
ECE2858C3453C32CB5DE42A572870C953CF568DAE05E3554C7F2242FA0AE6F30
B38EF14FFE4CBB9682D70FB041589E12E6845011D27F7D263FFC8A983749FF45
415A332D0AECC4E1C0F849DFD6E5C70E5BA3E747DCF0522C2406F5A2162DEBDD
EDA8DC0C07277FA98A26B7A42C50220023FB5816C2493F39663926DF95DE6EF0
68BE530BD7A0EE0CBD02BBED58CEF9AE40AA3F9E7E2D1E447783A13C7520272A
DD9D956E18015106157120410BF10DEB3A1CFD836DE10C1F75C967D27AD4A0A8
494D9FBE52164B98F0DBAE90E054444B782F6274F83A4ED0361566899AD78CE2
753DC0FD602D9DD81C0B6306B6FC72E4B1318BDB81DF89E4E5DBA74B807DE3D3
21A336BD15255C1381E51B96B188E0665D8E82FA3E8801027B17E7A28E49CF74
0734665C5850D8DEC02DDF7B22B7F1D0D5212B1CF4F950E983688B78C9575110
391C1A60ED4C417FAF37074C7208237586881E2D722D23A5B24109253B865C98
00C9307417752C8389A0B82814CC5B2229FF385AFCAAB7EEB06670E00350BEB5
C85B2A4A0FEFA05522BDDC802E90B0FC2E8DB77421D143CB6C60D49832B477A4
88522A9426F25341AFE5954A24DC01D0EFA206FCD8F87C720F31D00568D26A9D
F45395A89FB8F400E9584DB3FDD85053A6913C4ED518CC8124BAD461895B0CE6
7EE0375B867A53F0C02075911A72CF248B5026EE5BAB6B3594B61E1C97A5770C
C677415961203A2FD4FDA6C62B36109C580574EEF6BF777A4BC49797244875F9
31291084BD8B23BCFD78B238BD651099EC6659BBF2342D18E7F007B6D9B973F4
039CEF5C313E81752E99F9D526068B74D97C4F9F83D1A94AF6745E11202FCE62
7DD5BC2EA3F33D2D37E7DBAAA6839274E8D9DF3FB4FA37B329B4142D1D9473BA
701D2A80E283AF75C6FA525B731ECDB90B7799166D3BE61BCA57402DBA7063D2
A82ADF71CFF86962DB4A9534B7F515CEA586E3A69D94C97D5FA7486E5C126E97
12BCA14B015371BEEC8D33AFED70A3AF8C91D49D4A228E2A67FEE2D4319D8A25
282A209E9D8BBE235C5ABB6054350FAE9220F37BA86EE44525140531D2E4749A
114F74E0D8F3FE2E47CE71003D6F1D46A6DDD5ABB13DD9D52556CE27A4953C9B
915273F697BBE7893038FBE5635F8FD1CDD3CF57F67500807279B5A0E798284D
44441DEA56CE378C41AD8BA709E0BCE9D8A23B76DB41AECE95F31F31395048C9
FABF36F81B8B3FBDAFD7C632CB0560F77BF8E899E27D331F055947DCEF54BC48
E3CFDBE792ABCB56BE9D13DFE0EAE7E946E1631C5D2B6EC517BECFC4D6A84BD9
A73737D0006E8D5F042222209F97234349C493FE25F34F547639851D40E6853D
3FD93B123FF3F2FE9DA6C000C696EA564B1322CBA6FD5989B5509E6D58DA18EB
DD98113E910A7DDC9BCDD16EE45AE763394740A22D53E7B80AB62272C4A5F428
03693D87709395FD695DCBAEB4C8BFFC1ECEE3A310FFA76C5B9DE1627EFD7EC6
DA9173DAB1ECA469E94F29DC54616A83A30ACE796384A40D80A3B2F5AB0E83BB
C9AB5CA59F66788A0CA01C9DEA3C5DEF7ED72EC6C9B709E16EF42FCE009D8417
184DC0B6BBA5C42182CFEFDF1D602D01AA6BCA3DF62FF3A7E502C8E5105BDA4A
4320A3A7337653C3698130DBB6FAEF7BA376909489494B3E56242597284B6FA9
68581614BB81
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAFD8EA4C92DABFE00E6110BCA39FC555
BC066EF848E437B50688DAF26D001AED7E74605DDF9C0ED36BE45455AEF92689
8CF32BAF2418E02118593F54FE1857807BFA0B93B5CDCCD81D28BEDE22CDA6EE
2E32422C1E8DA8866E526300F9059E85CA54122ECBFFDC011460913E0D28F7F5
FBC9D7F9F6934B3D8EFC1A91CBA4128F6BBC5EB55E5E7B73647BFF70662BAFBB
145CFA65DF3DB858BC3FC577B1BD8BC74FB8A61BFA71B8304AEEB36D8EFE12FA
6F5EEE0EAE0830E5177DC745250FC362F78231FC3AC9864559DBA92DDA2FEB96
2629293435BF4A89F913FD15702CF325981CA3A08B327F7EE35794A9E88326E0
24559B547FC6DA61B7A3B9357F72C767BAA9C79C4E7B77F70EC01AC0B8596425
5F7346DC8CEDC702D3D57B09EF89CDD33756619AF59ACB9D17A3ABEAA6C65218
6D6855348A1095746B34AF15DF313091C59E5BF9E79B156CD7903C1C42E115E9
C5203037C808BD295195E074FC4A46FBB1FF01C814878F0C177F552BDC9BB698
349D73AEC17997374EC90B69293A064442141A44C6FE8E3C283C02A4655C579B
F21B53D1FD37996C682745600785C7B52C4EEB47FA5FD640739E1F09D5C5DD2B
B7515A4CCE0A21281D315563895972BEE88BBC7401BE9E20CB160B6BC81ED469
6D66169BDC648AAAE8A9495B072911CC814C19D53B95DE0071E3A439D3C09C3C
1CD422C605740A8939487E26BB9233D4CDEFCCA49BBEB1B913570A51B2F96D30
2EF8913C6BB60B54F7EA4B8CA16AD3B4194DCBA28439EB31A9443CAF061C4D88
C22CEC8D9D8D85D7AA225FD64BFAE7376ABD40F822BA1ECC9339E09403195752
FC03A5C4742AD93064D975906ED63ACB495AAE324403D3BCA118179E10256543
1BC84D47E0C016234EEC0C52255AE783417941CC884EFADB63F8269876F00A8E
1E1F19EAFFFA00453203A0752750F8C876AAF87826BAF77B81D336FFC29249C9
A6A44F40381294447840632EE59A3C4530391F35DA45C16A001F793782BE488B
5E01D7F75DBD53FB31F956F16202D3D94A300866814BA44C79764CC25ACB57F2
333DFCF3D97A98FCA949B1DA71AB27885183D8BAAFC9BC743143F2F1002AD752
1E55D207DE23E97D1760CD918A55148E37E05F6347E8CC299EED28D7319ABCDF
A4A279D5F64CC2151F91A0BE9E8382A35B535A6B5F41F3708169881C243391C6
67D9121BA21F6BB22BE1EC9933D9AF1DDE9693D7704C1141CE2B977FF5181299
6A57F7806814440A28B1DFB62C4DEDB82F0EBAABEF3367BEBCD43246D54D8EB6
7AF07B164374998F06A0B7E271AD6EA974698A806002374D270C6DD5C9DFD5DB
E056FE1B3D58482A0CC98D4D5603C59EC2E13B446023692B9AC2DD7CF767D2DC
A7C62BB3578847085CAB79F139BD312CB07CE13E38C3FB8F695BCF4021C282B0
9B20BA67F378CBB8832751B8F3EED370A572139431B9187893B592529FB1B6C5
19F51798BCE9E56CA50185D42FBD85819C3A1153D65997511B19ACF87E69C07D
2CA1A7401C2B23F99C19F95DA0DF136472F9FB574B21AEBBF0C2F892B9260001
9A9173F108E72C3EB4A93719293E8BE026B833CD709C7C05C1A2E7250CAD2586
CA70FB7D927E36A2E4A6F34E754C8DD8EA2571CD82054700D386CDF3420F37BC
B6A70B9A92E46CEBEE13F6641C67BC40979F9B86E052164612D3DCE7BE67FA71
B26EE9F425B54B3577CB4ACF3DAD02F2E55D2986DEA88A5A1955B78C0CD5DECD
213C55C9C57183A7DD5832D49EE81724A19ABB7DA0779F1AA6A77D5D31434A09
C6F53B7E27123DAC042F58DC27653D940358BB8100B416B920AEE20672559F62
8B20C687D77FF83CCA449E94FCF4F06614FC539802340619E3A791A18581FFB6
9BB5961D1E70E55615CCE5C9E1466D77435E486F15175CF87FFF65E58127B5C3
024B93C1C296AAB24F29483AEBA00736ED30BE5BB5284D7AFC43294B927BEC1B
86814A5AC25A3B9CD1F25C813CAE791F937375E013159624A360955A58E8FA94
E49593A97150702C71DD8DBFC3774094DF930414FFC68CBD4B4A25041CB3B657
A54C9BF780142D2586EB5DD9ECC1EB5EA69245D5D9C2AF868974AE5D46E3A544
74E96780AE66023778659D9A45853C24DA18DD5CA0489CCCEFF253B009C06CF5
826ADBD0E8FCF23EDD75C3D3DE8A4C789A895E06D20606E4F8E3C1BD77976E71
DE409203EF1342BDBF2C11BBAB4AF5A709F0462AA8FA3A02CBED6F23FB4D5E3D
1751ACBD41EECD8571518A9E13889C221BA5568CADF730F9DA026FB38E30A25E
87EF6A13484D6EE31C174BFA4B80CC38134D7B18C85C83B4F14D3C7B0A0B7069
7BAA1A397252AC47B67306E45D64061535D05540C86B9599DF909E105BB55100
3A0271C25BC5D596DA2A446E35C019B5DEAD7B289614BD5085D49ECD0464B494
CD1AB564A93AC9CBF438FA558BBEF71C2FE003573A03979A10FE8BD54A053724
A529F46FFE55CEC8D6BBAF1F57D16185595C82A1EF42E3C81CBC55BF50587630
404B2090DF6D9D25468C1EB7A4B2B3DA7F5B718157EF8B5F23AF088301E46411
B51E6E0D464096CE22BBC2028488D9AF49792B4A17CBBBA8ACE8FC51E1DE01B0
97E6DB05466BF66978305642B6790C08E59A7055F9442CC2CFC23095DF2C27EA
DECC1BA54D6B81ECC873A9C71796A1ECE75765B878D12E4DA9E19D026AC44DFA
2DC7E540506546AAC70E7B82AE7FA98BF36549F4D540FFFD53ABAF7ED9044CA5
6B4E9044A2B23C3E7C70152E96F4E64F6B1918946789D4F703675F3DD6E8E5A8
F0ADD5F7E442C35CC782C92DB2007596EC1A76D2D22CA5B00F7F9AA9819327A4
DB8D0B03369A05DE96B8C4EAEC254CBA0F39EF6CA005C53AFD0EC32F1C092367
EFD9F773BD00B95A60523BC0392B050B15AD70F7CB42F6D36587144CAE2447AB
AA4B4D9377A7E86AC489685833E1C14C3E17638B00884A46C1EFA2B158F6239B
1BBED6FC68FF606278FD4216C2A6D7888F0F0E5DFC9950962D4964901A47D6CC
2E3243E1DDE9CE7F435A7DFB19349A3017CE44B87DC6BAEC18354A2042C87ED6
C1E3A1A505CC679E32789F75780F84082CC653A010D14DBA84DA0191A510359C
1D24D700C58E54718F1D85396E7C5D3A365637085B6F79C061DF17BFCD260EA0
6B8416C9042C2831EB041346A22BC54F9D7BA43F8C4487FC240BAEC20AD4AAA8
C03F180B614C59DB6E5EC1531AEFC908C46B93419B9F5B2D4EBA0A67BA43D685
1AD44D4B43B7796DE5C9A11F726A90FB1A389A342143F98F49237FB451C43EB5
981562D923D684923DCAEE71B52AB4CE6269169A35F545E74584FA440C41EB82
41AB194C78A5B980D021B3EB7994846D963B78EB6E149CCA7713C12F77023002
B8A797C9CCD0C2BD70DBE44F81F9D274A5FF3824EE34CB4317FA4971D67D90A2
F3D1B1B84960F0FBEE40E6341C5271B5B945B9098F3095986AB7DB2E0714CCA0
301F6B8378559D86F0B0D95C2DFE94AC8E10DF0C8C16DBA12505A0D467DCCB84
16BFEB18784BDC10624F15DA1A880FFBCBAFBED0E1C7360962478006DB59C78B
DDCEE524B6F9B15A8849EE19AA00FA3F71A3C2C96E68DD0248A94ECC43A60AC3
88E49E005250706880485DF109CE1506C0A4EDC40F5AE5FE347D52FF63B26C7C
185A698E171244AA1095620494949D526276175A7E120340D3247CBCA4E3DF53
641D6D392ABC61C85A22E06CDBC89CF37BFFDF8A79361C6DD69E6774772F699B
92F7A7184A00FDD7F36FB8A08CCDE5BBCAB3731366C3B74072044D3EF2EBC1CB
33118B8C09C04174BAEF8DF1BB4A1E1F848C1A5178EC58EA621F6F8A63D0FCF3
13DB79F885AC659C881AB7E40798A4339E6A78BA27CD9E6803C3D4DF196C462B
D08555BED51D7CF5821204728356CF813F554517AC5E28E6C4047C0100610635
7D25C33330758F71BD1043365BDA5D1D9214C8B159D0F8FB69E40E6FB4EF4668
A228938436DD209DDA5925597151F8633297862799152B0317BF21F9572F503B
B10826AA7F8D15F5D780EA27F1B8CA0BA3DD732D3E3EFFCFAD6E6AD8769DB6C1
DF22ACE8467481D16E8AF6F56032C90C8F2500CE66AFB94D378D893E84208048
EC0CF900507F02E40DA3E99386F939E05D9737B0B11B7DFAE473496D056BE5E0
7F1CD25454F4B290CC43D936450C3D675CEEF5DA533DB25EC07ADDC7E8355D8B
8ABB095DDD61C91DA2DBEAC0574E9AE54F81DAF3E56DDD2E1110B8BD1E328A19
BCBD61F886966601C53826AE17074880519DE36B7F9A074EAB5317DAD5B6633F
0A13B9872C8CA009ED9A26031CD30D197800D063241B190836D5A9CA98BE49C3
20CD698615EF49518B3ECB53EC320AAD6CECD064FE682C531F19D20D265FE8A6
420695BC910A9D3DE176053BED6E64D0BD1E9C51FE0264A18B16E899EAB7FC19
99FAE17799381128AAAE1998A82E8A7B0CB947C59ABB8BD56725C2874402C7FF
B26072DB74E88971C070FB792D6FAF9FC26C0459656094277713A31CA58865DC
EC38222B094E7DBE32BF30F20050B2CF6F7E229342BB9AF896619746697C0211
2844F12D74450A9D0728FB461209852C5002691E2074BC8055DD3345C43A6B33
DE09981FAA45A207D3ECFAA29455144A64A2E94E44694347417E12D22A06FBF2
71213534CB008DF409279E03A112A4D8DB442575753A6B6799EBED4428D6D723
C01F3AF3C72BB4B3C0706507B86E884640FD451E08B2B6CC03D46CC74B6F1CB2
A2AED3A09112BC3086A491E2109635C82D3E89120FD6BD58605DF262124C8155
F713FAA889368C921F94B67E7E100D1EC5C95E9F1B2B4C356D0DD8CA390CFD10
936BE6574E0F7E975F0A6A6B792038A65E3C7B7A35431F5F8A6BF90687DC2321
78A07B60F29A575A8B79F8673150E70C7A0462BA9B4A01AE7ECB56DEB320177B
A481FBFF404353598DC8931C18C5DC408FBAA9C72DEDC26216C86B3778133F2A
5F768059C2504A7143BD4741A889D398CC1CDD4B2874437569D6EF231BA2C6D4
4827253B0D9BC7ED1ADF42D7C66E6FE02462702C99D203C27E19E4DC8114467F
78E7365B73DD87B07ECB8C2304715504716169A4EB39A5A5EE08F302E47441B4
13975C08232CCB9509A00BD80C0A81B108DB3DB41CCBDF5DAC5E1A47585A4736
B1045640800B0984898282CB81A512A9D01E04A412631402BCB7953E285FD626
E103E00B4ED88F5C38BDA87F5FA8880517429B9C4E5FE98547098A5DA5939BFA
435FE56060110EA1E9FF2BCC91BE591FED2312CDD8FBDFFB276035A428E531D4
1C5E1EE26371AC95C993BF2A625BDF1D49FAB3AFF04E8EFDE45B2959FD01BDE8
91530117EF96051AEA509AAA44FDD4A65861C14049A63872CB60D218A8996ECD
DCEF80BEE73D0479787B33CE7DFBC86FB8606A35D6D9C0A9248148CAACD26F33
D4D390E7FC335191BEFD2F5A7C1C5285600EFCC84978667D0E3253C63DC4887B
DD8D6DF3183E16F7CB81BA5CCECFC27D525893F217BC6C3B75C024DA44EF0686
E9C4A474BA19F3AFC3D04EE2BBA631A61C5CC3289354D143CD1A9EDCD17FBF76
D00FD12DDBC962AD844443159BC389C9D5F0020324BE982D6AE5E796ADCE781F
1F866CC356BFB3F70E69B7FE6CC9CF1C0C94CA8B063A6E51A2EBF37129556200
DA33D13BBBD899E1113DB8E9E10BBE2AAAF9312D8BD8AF3E5EB9BC7BE18F5EB7
A440C673D6251DA8A56D60A11B85CC05696506A7B5BC58625F9BE8155D4FF7B8
A781ADCE73A0EDF0E57D9BDBF57B7BC3CB4D9BC0AE05AE1883C93110751B54E4
19E4EB3705D3D364B37D0697EB732593058CB41E764D13FBE5CEC1281F967B45
2B3724FDC71FD55A5490C8912B5597CF95FA9C5FFA08551BF27F38D6B93C0133
67F2D8DFA7D2A0A89DAF9B17D1A0D62C27DD1ADECF5D74DEA1CE9F63AB55AB5B
7931473B33A80E32EEAF0A2FA966E4C965E6AC368595084FB457871C134B9B23
913CEC4245CD7A8CB2C2C9E057613C777F33934CFDD54C5A8FAA74E95C783EF1
4ABE15A3A7CC5114AB201F66EE1B03ED1FB7B2F4C502357D8145A1FCCBE19B19
74E7D188BE0FB15BB467192C327A2EE0888831119F214E625FA0CD4248B15168
17172CB83D1377E1D5BCA50E9A6B202A6EA335E77FFA648EA5DB70BED9A9360A
A384A8CDF195CE8BCD1E83149BDB16A1AFE757FFAFE3D07DCA0D6AB2E0339E0A
D7084EA5F961E7971455358827660D4D7D4EF68BFF74A950A1DA7D163870C22C
DE65318B9FAAD6E0DE22DFE15E63310A8BE722AD6FD07580FE07FB21FD4553DD
99F856C28DE950F0AE9FDBB74A5FDABB124F8CBF10A572FCB284E9C232DA85A0
F4F3096C8910F62560124D4BF540CC6CC8E1BC53D97C839CB9EE71E0FBCDF165
13548F4FA4375F801BA2FE917451F2F7C3587F613F2E6FC33E7C11375C70BBC5
1E2048BF1CD2B571ACFD1DE53754A4EEF5AFFFBA954FC40B2665B407856580E8
178E5DDAA39824E6E81459B0C1020AB86D078A2871445E86EED3003DFA98D65F
D4B7B6E0580904A27FB07FF02D4882FEEC8C97F4DDE81FC2CE7BA777B592888D
38EDE68FFB3EFE83870829BE817EBC88D99DA041CA77667A06B40FC20C7F09F4
6C75D529D9E7C7EBD598A3B6E30FE666420B9C6EF72F6C291E004310FBDAB3FC
F5C9A0975618693EA1754BA9368E5434ED99FCD879F17C09F268CCD7559A6D05
10C05F564548DD653581CC512B32583A3F2AA0383F791F8BAD88F6B91AEB88C6
02768A9A42EA41613CDBBF70DD3497A58A44430383881E5ED0F7F184DBAA9A39
4D0E08138E5377FD58825260C8569B437B930E407EAE1381E7235870A57F42C5
37A196C154AE92EAF57D6D9CAAC52A222CCE08A60205116AB7833F31F5C39449
A17380695353BB6971CD1D6768086AF935F716F78DFAA3759BE4B540D963F2B4
52962E94474B50E8FB67AB61994F100F9C6A5D3C52D0AC997867EB02173140CE
F8FE869D725F659E9FB4CF446EEE451932EFDFF3C379E494464447C41662F08A
137226166A8A91C43F455109E1E7412B336933683982C61C5648E67E5CB086BF
1993FE1F77E6DA2929C23F1353458219B2EA6A6B264F88BA6E2C50E826AFE95D
8A8B5E9FD73E711E082B86813C2432E187DA77976320263F923EF0AD733C5F20
49DB0DF80D36F25D4AD2159A90A26173825212D28A3AAFC1A37236E7589A626B
A1A5ECE4547A33A29E0890C80BEB4334429FC38E81A11C998B6D2EC98E069496
8782376E562CB0D7B50969A90CFBABCA863092508656A37EC8F5AC96BDF7BF63
BD012080A4BD18DE1AB6353B8AD44469296DD6A86A3E632901AE636E9402AFA5
74ECFC7ABAAB13A38DE593F298BF1E1FF19BD0B327FA58A832AD32D77F4608AD
0BB3BEDF0AD31AD8096730A8F07E62D21FC06688AB93C6AC7C26C895F7D13675
72CC173059796B55316881948DB871E6763A1D331023EE1DEAFBD760919E79F4
4EB8102ED42B6CB0BCE691048469BC4A6714F052F9AF30ECEF0D86125DF0563D
D324A813F127AB8F86D92D5899A2780772912513D48B00E1410AA59FCB4242AC
FD0A4ECF7E974A282AA363F71290F43BA455DEF3CB204B74D7389F3BF0C66490
12FDC47AC643FEFA49C03C589D42A88508521CCFFEE1C28B53991001AD82FA97
890367A50F9D6F3D5D19B8970C9632558D2DB6E15AA8B6D328D6CE026F8DC0E5
46617B91A34D8D210A01CBDAAF3150AF659203160C5825E4FFB0AA4EA08F9DB6
85983E0E86384241B892A11EE0ADD20817FDFC299EC57A743B6618005D5BB9F3
BA75AAFD48BA2A4C8B4F2E2BC1213A99B775D233E7F78BC6BCA1FF2BE05ED626
5372490C93BCC47868F7D8B7934D1938B46BCC5932E4E3668810AD0C8A9F737B
67AA53631345C2C93FD8FB94CF6A93DF0A3CA2EE9B19E265A9EF89EA374D4229
03FFD0D0E2B93F1C14348936334066168CC5CB25C483A08BC482E281B43DD46D
01E050A7D443B11245A200CB5F0CE9E2600DBFADC953289C05398D9047089D9B
BBF9F82D686361A1AD3AC73ECED677E3C4AA16486313BC2B8579C2838418B23F
E4FF6A572EC9E99F96DA5B697860C9CB87C5709112938ACF9BB2E01187FC035C
EA0FD5C11F1BDE5E244A7CB5AC380B1B20864C6952445412A599BBC8693CA71C
9BD82D057C7809F414A1553ECD27B328EA847261BF5935A2CF943217720ADD9E
18FD2A6F1D568667D2DD6E0378A1F7D1A2A4B487696AC9E74682490525A7BF4F
704E9932D482CC3C948B899445025C41C59BCFD4FD46EF2F9CE329E1BD2B11D7
B4F5F98014FEC9DF0A22072EF381E853CA68484547B9F1448B25FA70B26A2D8F
1E6C6952437A70165FDB3E62BE27C3DCC3D12D62E413A1ECC6132BBA7F98AA83
F571643D664FE490FF5C57C2798537EC841ADDF738C9439EDD1CFE105C6980FB
98A3CAC3B8387EE57094B33A00598CB82CDF587E5E26D52F00AE8B330A9DFE18
AE92B8EC270880C2E5A57DA1260304AD9E36CCB4227621D3749D7FC38313BA85
FC46478A8885B17C9070C59EE456ACD952167063B1F2970CFEE532774FB2909A
D3242CDA0495EF1A4A14C5CA57DB545BA3E55FB5D41A09AC2AF79ABC77A601A9
D599EBCCBCDCE985B6FAF2F29980BC34A62418DD202B34819A64B45D9924D8F1
4C06F17D4B329B9D7B3FEE46ED56F93B36FA63BA313A7F279B9484D78BF7A4DA
F9253DA89B406D3BDFC96C106012928693860E9018339FE19183E4A299176B76
C0C3329F35468E0D356D01F8F082B0561BB13AC9066455EB94D559B576E0C332
05DE68364273247590C6986518AB5EB06773F42D335A6C1B4BAE4973AD0AF4F8
DDA9ABE6664C0BE1DC81A14BCE081447CDFACB5274E69D3B08AB10A62D788E0B
D78DFC8B26468FCD006E113CF63ABB7A31170FEB421218F1C913009DB5EAE1EE
B2FADB982204DCFD5EC7D9BF1473ACD460B5F7E4B9EF11B18FE5269835830AD2
07ABBD4E09FEA5E539BAA332BEDF77B840B2BE0DADCA465393A7DEB7DA08B301
2A99FB2FC7F6FF7AE57218823DD6160604930C96B3945EF49B9EC7170251DD43
B7F7DC732828DDD5573612FB29176AC8404AA5DA832CD6120D4B91E433635354
868E537DC713FFB7E87415937D58857E9DD7B0939291485EA44AF462B2FC604B
CDCCC71E68E1C547AC5731DEEDD9D6F2DCA4557B6F0B74FD9464419C92D20EE2
A665ACB3E39727761FAE34A2AC616892235D8F864E791EA66F7594835F166150
8D4F286F58CFA2CC379BF39AF555EBFFA08F2AC68231DD2AF5767250E94105EB
C6FA6E3E864C1CB462431C25F4B5E0196ADAE218C166474D98B7555DABF80924
D4888CDD7550442AE3E0F8B1F306223B6EF1AC1A750F78182874F7B5D21F6CFD
57C23CCD4C99BCFDD27F19E63578118A53F12D9A690F9F1C38774FB9454F3680
FE8C86554E3E16FAA75186E7E4BE0725B4B2E15DD3691C0AA58BE0345322BB09
5EE21527506915A84A8AFAC1405736C70E54424A51294B14FADA9106D1227AA4
76C7E5FB189600E6AC1D0C28AB78805A8E284104DD55DE259730E45C42486C38
A968E192AEEE8A9C1D55990379652C99C77ED447988699CC8FDC0FDF5D8DDD97
FAE2F38F9C04941C2768D80733E4A68B0601D8C63A3ABC8D6EE13771DAE0CF45
6F729A22714A5F0E7D446255C44BEC15F1D1BD899F9150D97CBF05A29E2CEF30
7C53E57106BCFB1F33443ABFE37A499CA5365A4FEB48EF2D448F358EEAE062A5
C64C6C5473645826035E1A34F4078B12BA647634158549E9856FBD8A34BD2103
F58D80AD9F87DC5C84F8275FE9BB2436BCC3D0F3FA7E1BD7A2484195A7B47DB4
C05A4FCF80C9D6B573B08A4F08C22CC298DFA0586995E19D303E146D5B42D12C
D9324D471A4D7A6449D75188F3F600D5FE70576EA42392B95302AE4434AA09AB
585910ECA4AE5A0759523FDADD93E7912CD3F2EAB2010152363BF9CE7D963557
21BE0803F2C4113755D38F0B959DD34D98A0D0401AD315690ACF6B768565CF38
3F4F4AE6DA183EA15E4B190A761C6ABF46CCBD8FCE53E520C96C0E16BE5C31AB
012937E911586EA165C78332C06515DF7F09029FC521997F6F00B74BE22A80B3
B4F5E0D559CA000BF23A56FBFBFE04A67176EBF79C47C90AC29BECE384166228
948D362EA5B8CE8B9F913D89D63966FC98D94A5FDF2A708232CB7B7DE24DF1EA
F54C092489A7A0FD2DA2E0224DFA84BA830172D0204028EBB4B710DD17728785
3D69CB15B71F6ED24B0288F8BAF26C4F86CFFA41F2E2057457A2BAF7FFA71739
96C89CAA83C415D9F047F95EA23DA3CDB241EE28617BE1ED4F6BF93E62C5B0B8
73BDA8ECD665B7D05306934A260953BC20A9F536C200C8D7D7598E89678A9642
6762A4AD344AD2D0D38978AA48583344FFB6C17AB41D8B3AE19EA9CDDBCA7B8C
8999BCEB95FCA1424A79E7368DFCCC078A4B230498198EAF86FBE3610716D748
0CAD494C28E7987C9432C262E04F31F651ACCED03A7785D88C5BDB4876D3FD2B
0A21E719D5677DB0E64C7650DF6FDF0DD3B64F35E0B30FCDE41CE1882A74B0D3
83A2088631370D28723810DAD7CE08EB085D29AC7925CE02513B4C812C0E4CAC
AED5922B324DC34A0F3D59D88DA65F8B8F2605D129C86166CD167E327C8D51E5
EB5D7DAEC7FF59AD1D5FC98C4431CEF86BD83C5C530FF9E9E77B6982E21EEA60
F9FBE554BD27786B870B25727E7084BEA8B5301034DE3F8DDD32A240FD49AEE9
08C7972AB2A420AA53D21EED44D2F499C69EA518C750370797B96D672132CD2F
00C44AD20286FD9F694015EA9361C2B4BAAC06004F5C49DA4F15A736793F0C6B
EED9FCD9CF230F4B05040A589CC00B278B799FD5FBC0040B0DB844ACE08F8DE2
775CF8164D9AF89DBBE3B49616C51E8265379ED8DE9A5ADA77F0F04476C42C0B
CE3308F1E5DF5343790F3E7E63985F3893787027C722B626C678B1CF0226C3C6
F0294AE11B25CE1D16865F3C7ACFF6ED4EA6DFDA17340E96AC39DB56CF4701CF
5235CF67B5DB7DF8115B6EC4607128898B775FCD175D665E6912BF6510581AA6
F1F8523E200FA5C6E210E76DE2399AD09875A4CD61BDDA5F6528CFD68C3D2998
500772D1B72B849CE8BA19F6A146EF74A81E8AF3B2E685C96B19722BD65B5B37
5C7778DF7334E31E8BAEF479EFFB709ECEC1E8CE378E20BCACC716BA0E84E28C
728E8C81AF5AA2091DF2088DDAFF798F2ABFC4F353E39628D70C8184B8960082
5715B18B0D8C1D8FAABA1B604C266E6FB057A686FAAADEEC1277F9FBFCCFF2D1
6616F66A0161E2D5B0FCA7A6389607730606CFA7718D1A5A4A5C989A73512C35
80CC2DB47A9D3CF92FE04F56EBFA518EA123DA4BEA83F0986EA342236E93A21B
BF80EC93F7FCFE02191BABD96F8051B265894AAD36B6349FADA3174DFBDF8EE4
0DBFB9338561B4A57AD61D5919EE4EB0953E3DF30AF50B62E4E459B749BC1075
F9914CE626DA64B1B2220D602CE68B1AC49897740D6AB30E7DF3ACA621BB7A28
50BBB9A8B1B8F8F8370A38E142AAD5B4763A571EB563278A468573EAE3E4F57B
15EA79E72AACF9ACC43B544BFEA3C58FE80BD706FE0D5C23011DC02491F0AAE9
77E7C99ECD5BF1D4DA2E2F95E01A4C7B87E4F5D41C426C4F633420DC5F71F199
B63B4B6A89ACA2C20F6C0C6F4358344718C5E1EA580DD2D4106EBF44B1D33E10
B459F6E6C3F3E1D266EED9888A92A58F92A1478316E8B82A5E5CE852D15B0897
55DB6629186A0A39F928E1C1170AE4A43FCF7D9686A1CB8B36B470C7A3BA3C7E
E4290F0D8978F44BB77959866902C78BB5192B5A9BF30BB16F789CFBB4BEB738
FD671281BA0E03C74969FE8FF60E592FE05620F3D6E86808E064E0FD0679EE7A
32C973F5171682E86970679951631D0320B0B11ED911A7C84EAB9C0D3322B5F5
B1AD9F656F029A70A43BF9215D938C9E32E2BFD71685373764F9DE1207C23320
42BDA80A7C096C415EA1699FE9BE78321DB5621BE2BB04DA0C07F97FC5C854DD
CF78957F9A2C697AD77AA3B19AADA40A0763A06CA65076EBF7BB068C69CF71DB
5F5A66960BA202A4E77553F9C75E53B69249F0854805296C03C1690202F21514
EFD89056C27499F821BC245F7AEFA49759F9E07E0D00E38A7AB1B28E144E4D0C
06C79108E3A2D38ED3DC6F3AA19E84C4996BE6478E9BE3326266B2D53D8C44BF
4406642BE1ADD4E3D6B738525FEF89E5722C14B7DED7E9AAE85B0FDDC4896D26
BE03212A8087110839B09D287C411FAB348855477B256530D4492AE7E4E3CBA9
0F50E8BAF9435EBFDF9813171A5BF5CD986A74CD161DA9CC585AF0DB96830B3E
F03E39BD49697D30B8BCE8B9341D2DAA72F7FDE0CA97AC6822EA8E529B40F645
8AEF4157279C6E9CA88F3EC7FB2F3A34AD00EA828769273159D4123E00A6BBC7
6F2183BB3238BC779091D87E5D195DBD7CFB9AD96E163CBB5CFC3BE8595738E3
F5D3003710B04AD8F1767A4E42BB224A40537DFDEAB03839B320B60EEB898903
9F592E0459AD1815A417E04374EBCD9E0FBAAA83AE2B91C0C6029212AE8E106B
E57FD76B184E8B72C709FA1C06F7FDB2C1C66D562AAAFE1CE74489BEEDFE9C12
BA3E3D18BD7D1258BF33B8CC8BD193EF2E8025EFB02F07EBBB767CBB3F13781C
6F65C0723D1FCD6C3CB922342AB0C4A6398B613B92AA5589F3ADE54C2F366D0E
12D8386AD83ADD0BAAD7724EAFC86E2F04332BA30F03F40E1331D7D13694357D
C6CBCC1EE0BF8650D2ACDBCF2730C10173C147DD9A770AD2A21749E566253722
074E8876405E2368CF3BC65040648818172D8E6AB363D2BF1952AEEEAB9AD39C
857EBA17FEA216B7363822C4B0B6ECD515EC314C7493E8924708EFB767FFCB43
8038EBD09ABCAE0CEDC2F11536B2C6F39B0DA7E4C21928AF2BEBA473AB452018
BAE8ECD5B2A3593234E5EE5F9F132635E835D2D74CBBB259F1F07DC7F74A0D22
F6B88747D798ABE0A28C3F80352864A3F80BB3DCAB91323F55D690D4689F7553
DE743295B0AD3950FF55C152F0F314F4E761FC7F1B0F9128F212C88DC88FFB06
B300E35CDC29124D6FB730EA83F96D2CFA349D3F06BD276BBF176C917139A3F4
B54A69C433DF5ACA2A0C5B555FE88A0B2A97ED3113730F76F246DEC302B3CCE8
4F57DEB5F09D876B56F59DEDFD5CD583A2697093CC63137EFCA0025D07BDCFB5
78FDC44CA7F5561825C7721CDE40CE9A039A66603EE97D5D7A2C4F385F1FBE36
79A5E4B882A5964B54568CCE70D6A8B535E2104F31BBBDC72506D75F7EED41EE
3DA063693D29A41670EADF199660CF15330BE05F7177A69D512F7D6F3D6F33DB
1CAEB8E736A2155ED7C81F7CC00C4F1FC507C8270E6A56EA5B67AF2C199153BD
041DE9EB10689E25DAAB7ACF70E7B8ABDF41BC2BE8007E1A708B7D0EFB2B9E9C
8D7599C5E32969F3DA38AF1BF2BC601F9EAD0B3B38D79475F488283EAAF77A57
2D471AC305B0C4E5AD0C787883810E6ABDF0ED84C9A57353D5EFD79AF76447E8
94A07B872FDF46E5F53E01873BCAAB05EE7FD59641A99D887C033D70E3A9D2D8
82976AFCA7F0D7CD821F833C9B3ABB007874FEFB053C09DDE5EE9F2AF5412ABB
385508B1E4FC4E962D4BD1480C3363E1A6E5825F80A76133F6FD4900B198BFC7
679B0C12C0836A6966A9D1C3DFD24CB2A8C11355316744FF1C4B6AB80FBBE243
1A9D603343CBF573E93CF3BDDA6559387F72AC93CFC9F79E72E68AD0E2BA3A03
7D5E7C9CD5C647DFC6BF444FE9559A1C1579E30388B0D0C37957991AA0A7DDFB
B218FE32FFB19E3FECCDEDF261F9F42E67B7484A1397747EC773FBB1932E3AC1
47960F411E62E15CDB43485192F14CA6276D96720B14344C3DB7D1D01B24B637
56A3DD90F1E39E1047EC7CB1EF36A734A2B0586B71C879BAB42267B68639222A
65489F4C95CF51F3886D8548A551ACFD7AD929062163CF48E06E90E63CC9FEFF
46FF80A283B77C6D9BD43DA2C41C3A7E9A3866E2310F3982116132135FF0F669
F0896F9AAAB8EE9A4387F98ABA53EA390CE1A4A684F98528CE2BF58072B72C9F
8CD3326ED21E2C14EF5474BB3C0CFFEEB3F8493714EF447D7E09A12C400F76A1
653219D73A8231F50F03A779101251FCAB48A1D4C5B764583A99B534C4730E49
5506C2B098F77DCB1D234A6BB041BE98C110AB3BC4F61C2FADE40759EA3F1562
362ED50635A71A7B8686758FB9999651D78A602F39B3366EBF44CA3A35EA3B80
57D3C70FDE6B0D4ED537E10D7BB694288EE8A8611A89316E9B3C433B970F0E22
7032AA4EBEB23BF51A1D157D24187688C75F57E507957E75C59278CE26464609
49BBAD4DC9BFE173F7807D34DAA8DA0311EC511F3E17E844F5A459F2D7B3E6CD
285CF711B8EDB64276BC9EBF9674460508D97515CB6CF11268820A78DF5C0FA6
75A08AE1416F25BAAC2481FAF3A970858E80ADA630E7587F5213940BD35FA1DA
7D59044BF89E0E9D6294DE1E8D11AF8339662D16F354162D0646BE123C86C081
3E7B20210477CA7E50BFBFEF6C6C8542005C2A1BCA8CE7D699F72D2A887E54DF
8962298661E805CC3A54480D707256E7BCD0B9C42FECB553153BFAE9D139E519
106B8D4484EEF8E0193FFED2A41413C5EEC7D1317252FCD6FD784EC2D3BFBBF9
D4A1180DB6315004AB5B0C82EFC57F42E2B17FE42BEB60B639A44ED50D40869D
E2A8673469D330D408C74D5B9119336A448D2B7288BCB51DF34862826BD26A77
42EA23C426AE318067DF78B8FB9F839AFA4B158E68B3ABEF82335C03FC8B1D9A
A83AA1EB49A99E4A0751EE478AED2DD25482F4EDED426DAEC13C70D62298299F
804C05019B3A828746C56F291F96A6965378B6278FC961D525D0450286B7DCAE
4B0B3A76793F3AC22C06CD72FC2DBB9BA48CDB2412FD25C96E152E00A87FD2EA
FC7086A084C1ED0C48391429503ABEDE4BE21E6349AD6334CA890908B9F68684
D979CD5EF802BACC36AF1A444A7CF47C0D76B84928ACFE845DC8F121E6B4C816
5723589A898535737E57C4F2347DF7EE6B713C8332E3480A56DD3179F4D1793B
BFE12CC9889F99B990838AB724D58E3A2C6BD9212454DD98DD9815FF7EEE6EBC
B982DDD7561314BE196507488FF89BEE579D2F20575F4C770F686FEC879ED11F
DC245BF0F9EE73075703059D084CEADEFCD37AD0095642106463DA6A8A248469
9FD1F9137230304C740F85C6D93DB82004DB8D5FE3E59B361D8C7DE32615B1A8
58F06787D283831CCA47FF0ED85AFF0B5A4DC365B324B2C05EEDB867FCD1EEB7
8828F79C71F5FAAB3EA651F5F0199E5E22BD299E9FF7388A8FED462F01C6BFAE
42F97E3A7B7F1A09BA55E1754940FFE1AEFB713A37B8331F130705B1A44338D3
96CC7110E411A7810E62FC5FFFA55D3C659C643E5EBD5485AE01E27276EAA0A3
56DC7DC9679D3BBA94C9022D5DCC820FC96923799FEB2D149B40F6E4E5ED0500
3F10080C12CC74EB4D9B63AE240EA0EF6F24E489514DD863553EB59EBD01582E
B85C36411BAB3D72618258A7F5E5F17964AD087733F9E58802C30912A69457DC
97E749D07C815D858629CC3765135C1587BB37FD9D7BC5C492F19C75481DA8D8
A7A093947D20CB5C0E07E4C4AAB16531036107D5D7F948FC445BFBAAECB6059B
C8E00CD5042C7042880E910904E7D69214ADAF35586D7BBE24870C70FFC0AC2C
424814B14FACD1EDF1CCFE8CB48A07B62D44363825C7A82389ABBF64B214451C
BF9A54F4F4B2D472C7A52D826318ECE75A6D857EF524443B2498BEB6080C91B1
705CB373CA9F52E81163DBE1166424C28B2FB7FC145A025EFD8AE64866469ADF
98432C8C5611AB887D748123A44F1446C9AC8D91E915BD01F0B8501B8CF0FA7E
B58D5F20F6A63E3135C91B2062F45FBA58F115A12C0D837A828F8463DB255054
2A81D3E88E8974ECC9FF7E9D38B41331BA042E0EE873D98EA97FAC4D6D13B1BB
1350F7EE9E44FDCE4C3CB5625C43791E121F00819974A2B81321FC6588519B0F
6CBDE72D6A78A6BCCE5AEB0EC9083949BB942AFF1631C68E7B2CE55A8F366538
80849A6F4543C837B1461AFF31B5803C74332C3A9952DF623638EC5DFD9187CD
78C0517237C7828316D18084D93C6CFDCC7D0BF1F0672FE0F808395942723FB8
53C864D1D3EB6E42C0436911A805FDB3138E52A6EF7D13B7212AC5DC48AAA069
613D16BA1329C8BB670BAC1CEA9764CA6C02C43C7F09E6438B04E4A438C83788
14B4FA061AE9BE2C35D683F59398EAF200AB064F0D589800928FAB749F342051
CFD1451286FB24BC6618FB55289D7285A6595EAEFBE0D1CBBDBBD318BBEFB989
B0FFF07C3FD9DF0364B112CB880F479BB92E03846D421CC520A9035763543948
A122082425882B9DA17064CD12276523C4B8E06235B45828062EE30F548B45D3
550391EFBA3BFBA4DDA4BCA9CD3A78637F308429D85586F1E197DDC2E9EDEB8C
0FDB9C89E99F947B9E137EE5F69DF43E477A7AFFC9AF461DF6E34423E0EED515
BA93774837C5D240CB18593FA15A747CCA6DD5CB7205435589588FBDBC53EC3B
9E9A4835C47F319ACD57D23ECBC403A2B64B5683C6D4116337C0022510D5C39C
C638D3B70B3C5BD895B9D6A0CB65AF0925DE97E61AF0191E5AB79C048AEED5CF
5BB01FAA61AA56A204DD20333FF4177F2B5B1C4EF43AE8BAD46071C02C691771
6FD13B66A19FF786D3151F2580A03C55A29792B0C24FD5C66D8C3ECE100A13B0
F02551FE875EA80BE90351B1D41AC4B0BF8F6FC7963E0457B246D4879E4DA1DD
778E139657B37268133780CCD0B7D32D29FE2439769D67DE7C41138A102313DE
F0B1D55199B0212D9035730224BC2F2D85DF4AF1B56C1D23C4039415AB7EFF9B
23CDF717242B81AEE50ABE18D058AD5759B965A22BB6602243891C924F6D4C7D
514A461FCB9369B1EEAF57000D8F19E9C7307A75A0F6DB9CF675D1A97ABDFF3E
12186CE0BFFB1284E3C77B8825B171489C9B2BA1EB0057D6E8D8F56BFC20A398
5BA88834CE96187C25D77389D54201867E0E8193302600370F05B462A6E7288D
594032D12417916D768708FFFB15A645072D8187B3BBD8EBA830BE0E622CB3CE
57FC8B0180841DCE0EC7DFC47681F8856E1A97739CFB5E18100516CB839EDAEB
B48AAF1F48F3BD081A226965F932D61A9AD904569144E8CA748CB6C0489438BE
34FBE6FFDB77700ECC9E1B9217A660CBD319A05DC69F0FE175C3B58C7B93A535
C0D3133ECF1027C57F879855D7F472B6F2FDA46073F08BAECC3367A8436F03FF
FD656F8E5618AFE37A971F1C5BE739E5D83B33F147A2AAB26D64C55ACF4278F5
23ADF56C14FAF8B8B7509C0A3EC76969884FE0EBB300310A47EEF5AEA0CFE5B4
BB2E951501097E5232C3DCC2C2DC1186D3783D9F3F437E994EA5B4B370EA8D84
4CCAE592BD38382FAE8F93AFD5C22DB7A9C84800ACDCF5CC3DA5AC825BAB04B7
F99C4FE6538D870B35AD51DB66C22BBAB25242A48BC35C6F7191C6769E9CFB15
B4E30916BA482CEC79C0CD27D891C68139AB9F7EB2BD68CF0521CE5283EA4AB0
8AE1B4D17E74786292EE7D287B6CC9EEC9502A657882F2498C6B1E615AF78090
3891204F4EBE91A0A96DAA6B204049D4BE3CC5529433075C5EFC8E0C8E15E8F8
7204A846C280305ECDF4262A2172FC492CEBE05DD6979190A2C38BED718849A1
F741E1AC64882386C24D4890A6FE5C8CEADE72862C662CE7AF8F36FA9A902CCF
27702B2C820FA6188F741BD374A0E0D3D757D3640EA7AB3D6A75DFD565901F30
EEA29CFA503545F1314191B1822135CE5D37B7187BA862FA545BBC9216C6ED38
5E189C8BCAB8EF9E52C0AD45DDC2257715C17D2D0C33C824101DB25AF8B6C396
3E476D3B3F66AECD95B59C9789D775E7DE235ACCEB4E79BC375FD2A8B82DD786
1ECD97F7818B149C0F366BEB4852EB155E2F0AD19200ED04358C51A8955508C9
0074AFEA76B50E740DAC2C52E97A50CA970E37AF42E45C2A600A6B035344491A
1DBC9579685A684D2205A656BD489BCE6A7A4F42F625DFE33350A88723272990
CA5DD95397FD99932CBB6A10DF037548A11BBA0194DC4BB39D94EBA186148FB5
067D652DD17DC252E526E71F0979A6815A381852F4B42F32B62E5C4CD8D6E606
C984052B1AC9D96D4E5799546A90371B43268C964B3081697E21AECA6D73238B
B88C9471295239F4878D1994F577A6215D90D595468315F1A1E4D95D3CF1CEAF
B2FD939688C11F16242CC3FB0AE4689005725B228CFC5B0EC0E8A2CB291ED7E7
3EBA3B29D7DE230417F83DAFD09D1579EA119CA354D2FCBCFFF85E702E7E4424
9105B23D8DB29C2622FF38893462711D351C82445D565DE753F4BD47E2049A3D
0675E5EEC0103D984F82D256EB868E3A9E64D81485BD0CD79FD9204189711597
99CEB4EE94C69DB5045FD3886756AC43D71DD8460866D5D1CD4A2A140AC19E96
85DA340431E820F9FF3E1226B2733D014919DEC1348C576129B3A4AE0547364D
9C8E8A7E042A5C9CD369DB60F12F071393D958D42ADD5BE2AF3E517D2A17191E
D1BE2DDC15CF0D42EBE35EE9FCE81BA9ABB265928230B54E7A0CCFE8D3AB9033
E9497D2AA5EBE0CA7196A5DD19EBBAC226FF66EBBF289F27BC6E9C4966224DB3
39A9B6EB44F402ED1C3D7A5F9B8A9268C983A22AD9E3096AE4D664B57F8B4990
5632C88457F9A7C2F7FB045A4AEA54CECCB338DD38F4918DFF6963D8794EFA55
E02AC2B9EFE108925FACD4197A40A76A10FBE57F3BEE22CFE94D6BE2CDA06D36
A395A8B74BACBE82F00E767184BF2152CBBFE50F7B7A8BEE05A12760006AFB41
31DC574DA613CC0427D7BD1D317E98106A9FB6520059BF474B32225EB30462C3
C18730D26D4E9E9F7EABE0CCCC8EC2079FE90B9A17047E9571B5D3DF4E67EFAE
16395063D4AEF56FDADD55416EE7DD428EF56582A5525DFA736C634EE74F2999
5210257C8C0DA2BD1FFB3029929892399333A867D6DE200D97A3EB3E26484DFD
26FB6849A4530F15D10B85B3B1B90B2EC2A5E126BD1AC1636A63A75E308A6C1B
61098E30CA23482394B478335FB73633A2B7A0DE66F090512E62C9AB4D9DC6A9
387D16B8CE6B80E66000409DF823BC11FB0FF2750D5BB841965373E8019F3013
14503CFFFCE5CC0F7E3CE33FC7AA9A73008DDAC55648D1BFBCEC1A39EB4AFF41
1484CBB129A2B5AC86A7BEF776722844DBDB6E133691C35D2CE1FD5123CE39BB
608F9FA9A8006288962898C582436CD58455103DF3807AE16826DF2D6F490E83
904BBB589CA901E7670D469A0849810C989B764634EAE8455560000F104FF3E0
5537DC7921D5481F7A03A6EA5859DA9ACB883C40B077BB3FCF95296024EB1A90
118345B4448853A78F25B98F5BB5717F758A9FE13891D8953695E2E5461D0061
F8C0E82E4FAFF3769883694B201599EF415DF542B78298404613004FECAB56B1
4718B25C1532D87FF777A10BFCB19C22BE436DA21A2C13B056928E5FDAF030C4
9C918B94058AA153E9C6E2E369E6B115E4BFB215F781C866E76AA924182CC5FE
1D605CEAA6CD1B376D10E0460CF117B6EE2C3BB0A51770A3EB6ABB8FA5F2515B
F460E685773FE70756A91FD649654318DFE2EBD94CCF10EBDDAA323ED4C7E147
F9A0DC50FB1A473CBC82A82250FE1E9B615E85846CC21D0A78BB682B560B6E0F
8D257D7BFC0193B3FF05AFC51E609C6CC968A334726D6E5F2B7196D4B4838019
BFB3F0838F28DCF22839353BC7D06E96C0C87EC19240A0D2E7D905889ED4B416
C30A993E766DF7D2D995148D3E7E4DACB55073489F13C160E929111DAE4FE5D0
0B84DB76AC75DA3A6A4C01325384526E94921659BBA8D754C5F4B85C9FAEC0FB
AF8A3E9216E3EB319F7C5391EFD201B089D18FD9F360C265770B84F38608132F
0C370379249834D8D503A8E580D84206182C1E5F8415E08C96B90A8A9E6BF13C
6B9F745A5769ECB38A04B27920005A70C35DE27F2042678BFB10AA53615A1448
91FA0DAFC327B8A1FBC4CC69AC0D16254B449A9427DEB370AC34E21A243A9E49
615D38BA33068A012AD2D80D229BA32FA62C510AFF77EA1B789016A786EA895B
608AEF767C3C8A26FD1F8B36C3A4BA0C5EC74FEF8B7B0E74A775B051A9CC0E04
2334E3CF39E5F4EDF39DCE1847EF238D7155BA00E40DADEFD75C631BF2D43478
DAF6AF69F5B2B4F0BFA2202F9029C3209984C21908DE6E1A236A21DF2C969B86
574B83213A545C78A2B9F0D0408E6FB0078EF9EB49A8AE1FEF55A49D522CEEA3
F0F835244A1AEEBF746F517B9C85A3F304C4CE5B1566E7EA2ED07F785354B858
4E0F54E9838C7EFA7445756A4C8290B7765D810A6717AB1F7D83491C3B252298
0686E38D1F873BED9CD8A3D6ADB1A89B0E2A368B77639C67EE2EDF71AB66058A
62AE96A4E6AA1CDC952DAF8918DC5AF8A1FF09BDADEF633F0EA2471BBCD04C3E
49DF2D3B890E5772DAAA9FCFAE76815A4D2C1F232EF4A7AA6E37DC5B62764103
0189203B26A05C9F006F8EDBEB4D0BAFBB84CDBB3D07F2737D8F91BD8333CB5F
F97F5A94FA9321E05B9168EDE810EFADD8582FAEEAB5ABF22F7A646CBF389FE1
2E56BF7BBE217FB4379A99537F5F323E9AE134AD6DC922FCF6162732B820F12D
0EA9D90B2F4D21C42FBD27BF6229D6B19DF05CEBBD5549AED3CA557EB3AD7542
E530B93C0D61A4E223B66132F373B34530C28E9097ABB9B5AFDEE57111356073
1A12D0B6FF0DF9B02B317F359C18AE90BDEF2D70BB989FCF3BAB8783167E8B1E
ECD76130F98E4CD1649867FD41CF7F77105726BA55BBED6119414391AF56A2AB
B2118FD08CF94A412EB9E00603DAD328509DBDFCC65807A5534387AAE55D45C7
C86165ADDD6A54070E8BA6131B00E978C81F02C57E0DB1BAE582D646A9F64552
636BC3ED571DEB63755C91406F61362C8FE489AA0CB8C2CC87104D7597414967
7D17762C1BD80507023708468A9DA4B7A1E8CF86C1B3CDA369D5ADC121BA9C87
17F643367D3FFA61D22E34BF45764F7D9E697D92F89DD4A3B26BE088BD907DDA
20E0F5A3653DAE55266ADF00311899393731663ADAFF5415AB0717ABA8F89570
B583814D67F45E711283C077EAEF0ADB0E8A01F819DC888916C484EB84B9A6D4
9EDAC5AC98833CA3F6F7DDAC38D46D5EAE022F02F3DF3EFF202DFE345119D87B
DE7C689AB4C652AC53597BB75097F90698E2127D2D528CE0A81FFE24DAF25111
0AAB22AEB291F8037F96BCECDAD49B4C4AA059E726631EDC0ABCF6F7DB98AE02
F56A30659DFF710888FA24E6C14B2616466628E14832C910197413898305AC17
BAD3923A7DCB350C234A5217556D8F0A7FAD6DD728A082037B0FAC58793509AB
883BB7739C7D243E272B7A987888C1E929FAE1382ADC998E58A6E08000559A3F
B9DD0FF9CAECACF3799EE15A1445857D1A7ED75E60926C7A6D6469CE30E39380
9F3A737C4CA0FECB5839269A8B13AAD60FF2451FEC588B4CFB64BC0DCE1218A7
4F8A5955116A9A06DF9885E5B6E85CF49C95595FD18CDC9B79C26808B03226B9
2EB5814F367F2E83326F413902A76B6517003E5506F6A992A940C9FC36AEB49D
38FD627E63628C6394B1CE14C7845625952E45501A97C62154E0B91E21CEC230
0BD8689851EB8B57A53809FE25A56D254F7C7B45F1A0757B066D7F586D6B85C9
023D7936EEE1497824C85939D5B9C448D20BAB58087B58E4B62D9370912106B2
9AC540FDA6636F5C35DDF043704D3EAF917AF548BFACBA23A32411C5501BB505
95262BBD56484AA22F429D2E8A62B3159F0168646813B0A09244913C722F7275
3DE6F9E4511C67D4FE81A994F12403DF8AE9F7941433D1D9B775AB28503CA7B9
B266FBC6BD4A8ECEC0885C8EA3CAD1E3640A98128F534C98A864AB85DA1BA2B7
706C17E4E73FB0D682425844BEDF31662EF7A2C574719BDE05F57537D34ABF2F
996F965DAA6FE5C7E554A33251C345E5065D11A26E2456BE7D02810780DCE7C1
718F1688B556F27B27666A8DE5559C81D52997E7C53CB6024BDE2C6D54415E16
96FF80099DF30D4D3C4E9547705F8C663D53368761D9619C255465ACD55D2377
29A04965144FCDD577BB7F427C8E12985F6BE37922B185BA7CDB6421CA9B8F39
C4DA4436EAAE5F4B599370D7F457EC30BE7FA397F2913678A8BA642C5F8F9C83
4EBB4D7A36B728A1F6297D54D55451A98B98BBE3FA743E20FF6C96D36BF51709
B89EB369FC0599BD9F10B97A99E655B22E52C46277D7D5FF4E468F0D3176FF64
918F70F85109698A334220F65E2B5B7580949F106D85DEA26E856FC925F910DB
4F9CA2CE27E4762511709CB8D5ED36145468356192D3067DC940EC397B752982
145DED7DDABEA122BFAADAD5A06563FECCBCFC15126BB907C6C35C824ABFD784
C6FF42F5F5E0AAC490F699C0867D73A3687C47B35F7A4338B137BC23EF40F704
77357946363D5B9BD7FD420D302522882CDED44627675E3158936C0929B97ECB
751A7D639E32C56967D0CF8952BF2EBD13B0880BCFA4671CF7BDA583D6A9E558
4757BE141D1BDB9651E1AAD7D8863E310CF7FF7E3CCC91B84726A14705CE8B8E
969EB3A321029D70276D9BC20F2145510C7E103B2466887FCCCDCC1C4A8B140C
8285E02E3B140C0342658B3BFCD1840A56CFAAB20FCD1686161A8BB74B4C77DC
C087B2337BB9D0DD9A7F7FA18E0ADFC732D9FD9FE6903ED6CDFE941191BA99DD
39628557A8C685707AAEFA46447C9CEF958E915E49CC6E12E4D88202CDBF3C55
165BF926AB8C48C65252435B4D558815CCE2A38F29E35CC10F816B7B97CDC0E8
CACBCB5BE6FCC050695540DC736F72061E574FC8B6DC54D7EF7FE4B708B7DA08
3531EB61DFAEFD5F46BE7E2B5882C7D022
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC48438EFFC3124D2B687E0179001442
3B50EC14A43279E027E501524DE850160B6B644BD30460335D0C09F10557A475
D84C286D85B64D265113BBEE89C451BB69C75487F8602705B834E9B0399ED401
4521FAC8D9E2AA0F906E6097540C5C81A8CF53AD642A99FB4F329405E139D009
971E20D13D14FBDCF1824EDC1DF652D9433B7FCAC6F300093EBC766596B2CC9E
DD9422F77B27BE6D26D24184CCE5D9186C5A8FF1C50926FEA57A14EFF9B92161
489D7CB2C290370E48A40AF2361F12D59818588632C21480FDB6BD9BBA57D9F4
8294FEC2D22B0C60411849BC89C842C7AA5E4FB15C1942EB897E4DED8D7E1362
E0F473FC9425592E2E45B8C16834E8479E68779E5A24BB82B024E2065EA0CAA4
C62509A49BD69E7E6736A1BD7072A987295B3F424A673DB0BFCDFF1823F3A9A8
0F1F7E8F7CA7B20F254AEFBBA0F344D7EABE7118F71AC742574049DCA75A193D
C6A2967BC611E1A0E232A0FF57D067A939EF67645723D143A8D4D74D8FE6C0F7
7B08D4232C67806307127625D2616C2571B6413523BE590AF5861B20E7699BC0
69A8BE8F827227EFB37969C2356F93886272C38BB5ABDAB00E5722E22BCF382B
F892C767894C021B481165B32528BF3209DA0DF713EF4751FBBE4D3BA3A9D81A
503AA8244A272C16CAEF6B64CDC70B85BFAAE1BEC4ECFEB38C54549BF4C27D2C
9F792B326AB6D012B6B784F740B8E0B360808C984DEC73EF5731C96C3233AC20
FADB3505BE2B8C29DB3630B72D102ADFE5B8BA81D3DE3CD424E81DD04D75FD39
74031EB23AAE56CA47762C1A267CFB783BD889067DE6EDFAEA75676983CED6BF
6BF8BCB7776A6020E0474D96EE77A6786D5C6A106A315138CFA112E05B771B26
5EABEE61FDC9AB160791E0E8581E4D058AAC65946F883D36927E05012954EC22
69DAAC2BA95CA0545BC92964A0DD04E50F5C82B2BB5E8F3A073EDCBB6CD5E7C8
C131C634F4A6767064EA4E5F469E48F5AD2885076AFE12E1147CC2855C94FCC0
2CC2B29CC5E82788C070EBF5E28B2574EEE5E24784012053B3D0781482282E4D
DF67D68214B348BA511D8FD2695286EBB864B0ABE9386FC4E753433995E972D3
E9BBCA720EC558E7E1939716F051C9F383A297631E09D739FF5F74224027D20A
81AB677E2C1750E02DCF8A09F8DA0EFAC7EF17D24EECC5D8E299FFAB91B21E40
DF20003FC12C96E66D061CCAE96FC89F2006746A5C082F958963CFACB7EECA80
5A8ECC05105A4750D091A144CA7580597A709AECCE99D77310FCB1F0E944D7D6
AF6A8E3795473E485BDE79C61F414C4C20CBD819079401CCB0DB05AFFC585551
BD5F3DAAAE92557BB87982EA6B9AAFF3D2F9F34EE42C18A25413851433A14282
B0040BB5FDF5C2B28E76198D96FC987CA0E1C26B104EA15625E8E80E1325797E
BEE1ABCE4EE7AE904165D158FFBB3426302CE4E08F80AFCA1663E8E72CB38CD4
9B7994106DE8BA410C6B716916DBEF52BDFE5438A92E50E90552EE560CEE48FC
65148CAE4B008CA3C7C0B7C164ACB45A7F12D8A7E2D3D13DC23611FF7B6FFDBB
1D6B72C77967AA05FA6E12695E73E63BF4D510C4E7701979B23EF39FD99184AA
71EBC71B33F0B065EBCC731CB2F06F856541DAF495BBFB7EC65FE35BA71D71B1
19CC7C1B82EE830C395E0007167BCF97DEEB1C47BACDEE77A4BDB36EF4B508AE
C61702A2CB7DB2800FC2D38F8437D0FAD3B909E42832DB6208081585CD9A312B
09793B1C1FA05637425A27DF6EC29E90C08D7617119BDC68150065FDEA0C2C15
E6B4BA25D13F5D195BFB749751279816BC7FD07770BF71ED46C0118081A73920
1A18E0B2B745E35D0E07E42198D8665F8804A40EABF2C472D192F98B02098CED
A22379CE386A13FEB9568F66F15D2B2A9D75E95360A4837F6D2B047983D33B64
1B22597223BD96279319BBEB50C4068A1DDD3FB081319CCFC489CCB37F04BCCA
D72BE7F89D1FA8FD334E62A6AAA8137C47489BF079A64E39E02C98CFBED9D1B8
7A8DC71DD686538E5FFC79F11FB59B0CFDAEDE23BA92C0898A07F882AFE0ACD7
5811F371B3895FAE7E58BF08E242A05D015A9A40F0A15525554CB30FB65BE3E0
ED656D29F8260F481F20B9AFC1CFBA2D6FEED926836406E9D4BAA3A689FA4972
388ABECBA561DF0E89510EA11792F6D866270FCD3E56BFB2DF279FBE473B39C2
82AA50EAD8F66EED67A2291AEF7AEBBE7F0B778827EC3AEB08E0E8666B9B9309
0C32A490E170590217207EDC5B31B1476881766FCB196A7DF7D041655121E0AF
C3174B6F43010E34F91A7C516389B250936CD0ED8CB034919D6164179673A8C6
9231582D0382B29975939845C9BF27BF1361C187D1528B77C22B572652F7251F
BE08FB8C4BD04036C06AA4752B076F4D900B74D39ABBC2B58D97BFFDD8873801
09216561C53A73CB19EE29BCD29A724AE4024D5B5A6A25612F737873978871D1
25317E14B83714D18F84E5C4E50BC74E43B217E8A826B0F6849688C4A358499F
DE67A348EF3EDE31995D77233A400319192326F31CAF13F8830C9EDA5BA42889
8E90C29D13251A52EC4AABC72ABCE1E099832553B88D0FF808CB8C3FB5FD746E
6C6BDB59633F018E8F33AB6FD668A7950393BDBE93BA11233D63E9C4DF54B037
628D732B8F3794A33F59516AC8F2FA394863533B116B9A315700669D9D8A3D98
5F44DE6070E8E4AF6371630E8CD6A2E4D13A42A534EC7EC672D7560AD5C65EB7
5E9F85F6D97E297FF1FC3CDCF9A3CC69C76B187C5567D2BDEC73EC3B8308B94D
AE1C20EC756F18E1EE94EF94D9F2096E76F1C558F40812444C6F0F4DAE9E6339
FB76BD776FFBE44A0D870B50D5C08E42C27F2E69F8749826284B5DB8E20690CA
B98FCB242CB73A6FE92230E836BCE0075438EB5C1DC0E7194022C27B20C068E8
FB10548593C75DD18232A89A46E40D418019EA15C5C24ED9F31705A32503BE72
25981770457CB01877424769AD11C53BED092CD4C17A17A440688F13CE125BA7
9C695180E97F63BC051D64B204F994F2795B614EA59D2BE3720F21CCC22B42CC
8124A822946BF8F81023D5C72EF19ADC7DC8ED1FC8ADE87DC8D7AD29DB7D1C71
949B7B5EE9B80D37D060EC8B7BD2503417DA19F3D4D8A18B49B7048214879438
21305AA1A087B1CC97250023893DED4398528F373FC020AF5ECB1FB574C95D1F
E715CAB788548E1254FD53D05FF204864193A64858E6F84452DA103C03C8E8BF
9412932D0F28E28BA39A16E05EEA80A8D369CA48C444FFA150498F4C953AE9FE
58949D8FB36F6CDA423A752C5E8835A30507B6BC2D6BA02F58C874F49029FFD3
B5CF3BD9C811027AA0C235E5A347A21FA9FBC7D6C741D1546A662DAFAC1F772F
4FE458FAF2D0C93EE12E8CBFB5E858FC73DD4C7BC4D54F94FAF28247662F3C67
0A75D4877A160D2D2B533ECF1EF2168513008BB3CDCE8EE707017A5A49ECC45E
7B733CDB34A1BC3CB136751300AB9F95CE2357B7EF641B63E7A29D362DB15A78
F827CB355CCDFBFDE052E2961195F6E68F0D83A62A5197EB748D491F96D34D66
C2FED66CF844B490B537561865299BBF7E38409DA085A2924AFA002FA83DD86D
63E9FF54F0B7EA560346347B43A543D52D3F0687A49751BD72579549FD755518
688DB56FF76362FD9E1C29E1A345C2861DD61A51A3590C50FFEF722E382CDD25
4C83944052F06020F0CBA556F3804ACAA98571E34DDEAC3DAB39439D1E570285
A7EBEBA0247118996064991B84FEFD0B769FA91A58C18B30A6F175A0A71B8A65
1C093A9533448F2FD46C3C3C7017FDEA8AE2DA33E7997D776181782CB418D2A2
842D2A8D814A3F0622B5862FE5B01FF5642C36D1F3B5AA4B353F54F6AFB0691A
9247B03C08897AF9EDCA74EAA39D08BC61C5D58A8D0C1C7EDCE2646AE2E2DF81
E2782878BD15190A8714DD5FB773B1DC6D34DEE2C2587B4F6FB3F0BC625BF155
40DD278DF010A63811303C091C7E6FF87CDD063E94147870820EC7E45321F6F2
2213EA99129A4AA81CDA814D27FBC51FBF581C90380152EE3CA0FC07941EA1C5
8969B4D20C8518691DCE7842CFEECE4782ECDF4D91A874BA39C812010BC15B2E
6CAE48D77AFF7345B8FC52548179C62D839B35D9996C8D63DA451E88904ABC2A
36FAD4D03974E19DEE2688E7658FB6356A4F1B01317B294648AC88BD3294485F
DB68AA197166AA5A0148B1C3D0DEC1242E7766078FC2D5E7D62AFEF957F51590
35284F10F2EF64841BC9B7B9C603C6CAFB950DF5FD1CFDF3C3F6C2730B3B5FA6
1B37D67CB50907176F2DFE635EA3E222836EC1E6C6901D8E9CC613D30B1A41AD
D9AB4F0D91FBAB8ADFB21064ABA49B394A278FCCDFC910B3FFE4891CF063FB48
601D968011C57886E29968057AA02A7CC07279C03105CA0BF99AAE6FEF5283BE
A30AEE80C3DB8AA33BC129626CA948BA2050BA0094CB0DA4C6F6C8E56CB9E72A
160C01A8D38D1A8EF611EFA02AA41ABFEF650C3D4EB4F482B91DF4FB25599F9B
EC1113EC27E6D424EF933FA26C2E01A132A62FC119D05EA97B0030582BA9A86A
1DEAE130BE95EBDC70B433B74131B5C935D70CE9DE75407AE6FE7BEC1ABD547C
BDB6BCC20BBBB289486F6C7E23849312595A020E108B332B0947072031EB4626
6FC097D3E7D0AB42EF7875E1593E1DF8CD6342197A6B42083CBE06F7EA832016
31ECFB02C1857E1F4F76CC3065BDFC81E5421DF72A36CE9468021FB21CF484FA
95DFC52E123DF0564C1C79593EA497F8D94236078EAFDDCE79DB8110A92EAE0C
E19EACF9F6FE4415BC38CE659FBD1B1CD2544DE8DAF156D5738C2BC3A5CAA5EB
79C8E653F92046E1E5B36E223885BB7E1E8B28B0B3D80C487F4FB795EC4D0857
5A797A4EA7F65167FAA5E94856CC0753D6E91057A31D58213168B8D3A2597A37
B0578F7374C1B0D787379E79F168B5ACA2375C651A16E70AD4F182843026D7C1
02A2C1CDD39016B7D3FA7B57ABCC5A2DC44470BA5BFECD0802C1FC403359D3F1
861F91CE9235452E735B86A129C5A91C5B073C64D1161E1E6E84E9BAB4EC2554
C40969C9D18DDF4C2AD33441FFA6EE07BB07357788CA0DFCDF2AE1EAFAC1E9C7
2B6B090AEF54231D7C921A8BEC1F6E1EE40F1B4BDA43739030B0AB198E482F83
E71AC82322C6B748EF7DEB094A0D952B3000AB01944B1ACBC6F9084C082D552C
F0782A9311F4A33621E9E3E70FFD411D57D3461849C22D10B32CDB50DE4D9D51
583C6F81DE8624663455C888FFE8B57984E069EA557953F4F5C145A0FE6B7931
B991E5832013F53EB6623FE972D6F2246600F539BD5C3E9226B1DEB801B6B34A
23AB3704368D1B2F32845B208A9B83EF9526B59572BB39EA06F8409B27E295E0
C6A3E80D0624AEDB6768028EB34D8FF9E50BBAF9B27C7E28853B4360A0E9EFA2
09C11F37AF974487031652E85D7CE641DF3FB94289E2A79CEC3D7C3A9742F8C5
D2AF2FF88BE40D53E49DD66D3B0CADDF6027B020024CB98169C9FAF20B76D6CD
D0DBA9DFAA5C10C35A95B63056A0ED3DDED1C8764477F6328DC7C9F818CF87A3
77ADBF20271832FDBAC5D25D814B53196EEB9D5A87E5B01F77A43361C0DD0682
8CFBF0CB2649EB3CFCB53DAC1D9FFEFEBD6541674284E6F608975884CD937A53
4A53476C28EF01174EAEFEEA96645C168A4836D2434E82E599F82DBD460D0E52
AA557D2321BE4BB43C3E52CA1D127AEAF48FC2E5844055FA0258353A6EBFF04C
43B39CB18B05B293AB118520A608A90ECCB1E15140CD02E754DAD31DD9A62024
FE72E8631E3740E7A54487A84A1FE082E4076B1C320A48451DFB4A469C6ACE18
C3988C8F3F2947EDDEA3BA4388A938211D6BA9BDDF0AD717E24F8A3848DEF8D6
A3AA4917F1B32E2C9D124FDB6694AEE7D63B32DB3E72AEDD3AF3F799AD6720D9
CC7ADC56585A5226BCFC5E6BF3D5D41B3A55A9E8806A37B3298E4C1DCE50DD9B
6793FAE0BDA15B9CE40119EBA4C18F80695CA5587C0FB006C385A3569CEECCA7
2E057D942D6CE680B9C562DDB7FFF1D855EF4D1DB502F01702FFE9702FD135AF
7FFC7857EEE9125933F24AE7911BDF71CA8DCF18B5D56039FCCA0ADFB018D0FA
060DD58E6DCD23638309C55ADF386732F01C836F99C478EC7E7573B5341AE692
53ACBE3BC963CE66FBBE1DB4838BEA154C34B7DCC334647DEFEB1AE527E96A13
B6F4CF2BBC8AB819B529D7F57E419C089E5CD2156890659AFB5BDA43F6F26B1D
C66895ADA969B7C0D5AF03D355651D69E6BF46AD622A5FA4D3F0AE839735568B
59747B2DC19D463C350CC73C3672D1F0A8BC7E1EA555A3A3EFE96B960D05C94C
00A2E8B33E44041B9AF54300B6E76CC8759D08C8BA6318DFD495A3A35CF50652
0D6F9C1CB1218BD648772398DF710A00EB566AA0C080223FFCAE9A2394F2B533
8FB57905368248BFCA66322FD2062E1625C16E362FC3E0E7390673A7200DCEF0
2826EBC14A49E8CB717B985F4A7C98B2F4B7D8A86C99F9C9C2463DF207E332D9
B2BBFDE1BBE207F9786F1EBBAF0BC7120AABFD7D48E46694E156ECA4B8F7134C
6656A3BE376BEEE9866F643C1F7A72A8569B2B1F9096DEE8410DBB790777441E
DA83014D75342D43BEEEC9018B12111F1C5919400C21CE4724C05A881C918EDA
E42A5C96228E417583085ECC6F8EB33FDB3AB6340BBA54D931B5A817ACD63152
7794973F54A5C15375E65B3BD36425B8299E2698C0CEF00DB8B4F16252C239F6
65787C8C6208F2EE5D2622AF07AEA4F18481E47B888FDF4F4A99D335FECFA175
2680AA9493537D89DCEFB765BADFD5E6AB1E76D19B968EBAEEB7EB903CAA9C85
76191157F51F5D0675243BCDB1651FFDEC92A20726997A92D3BB6BD75007CC91
24761186C057CA88AF6C8CD824085EC3C717285F4FBAD923E1D936BD959901AA
963A321953C651139BDCFCB98B47B8C59653AE70BD6ED26FEFF51C2EBC6FBEC2
6504FA7E47755273F845D722C851C9D095C8DD8A4F6646364000486CAB8103F6
03E327094998B144BC6FC56F4A945FD86ACA7C98EAE4E54EC58EB7B7A4356631
12FBEBCA7D3CAD18079A8C1C34FC71FD8FEBDADB46A5D06C33886AA71F24BF4F
225E212714398C04A3CF831C1380721413A6DF1C1B8FE496ED4981ECADDD231E
46196814306DDDA54EBD048B1D158FEEA22DCF3C8D1B20527EC296D775FF17A7
A0FD24E3C3AA598D527B0941ED538594696D0F050E2C11533A6CA596960793A3
843DD735DA5D296823AFDAD408D5F812C539207881034AA0BCFF2A6C0A69DF0E
006B38B0215256CFF25F22E7DAA04A6BCB486C5CB8E790C7CBCE8F8EEAD343E7
308F27FA634141A65185648EEC5B98D6A0FB96DB10734BDA735F6FB8D0AC3511
A660FCD3A633B52E030F2B4381AA514271E84CA4DAE87E52CB4C93DEB0450B99
E5E00FB86A9511948F6723C4036D41DA434AB802A7D1D252F141ABEF219CD884
89B4E36524F175C17234AA3284F9D94F9A2DAD55AF54A19C6F370019BE51E958
726458255A6183F406BA0EF1CB7B4BEB045D282A0B0CF6473A5AFC9FDA2D51BB
3CC510840FDE5BDFB4011CCB621ACABFC72C172AAF5A51060B386E77316624B6
C6AF07A86683027584952D511F300E249B36760F811BCCC81E9186DD279728AA
4CB9FD854BFC0109DEA0E596B32BB3D9CB67DC430AEC985286705C4639402010
003BE3481B6E7D353A4C4C566EDBC7A8501263B4CFCD7ED9B639F77214941A15
E5072B1046793582B44EFB4B6D1E1FD55D69690C3874CE22A99FE627BE693F12
9309EE4C2A9888637C8D19FB22B6AB0A20BA08293AA8C33A6A391318B77E3767
9D09C48C636515F2451CF4E945DDEDE4E2B68992A7CC70A7F95095350A384336
33A3E03DC3FA286A847DCAF52201D6D9CD049D6B8FBFF8B944D92DB75EA282FC
8909DA2EC68932AB2763CD8614897FFE9F99A7B2D8934314FB7EAEB8D6502956
CCAA79E64E4CD8C6953A5C3B4BF27BA8A317BA18287D24161B002AFB72148ED6
C631EA37DDF577BFA71B8A651C00FBDB9F3564BE4C153AC91451F122BDD5C724
CB8023375BAA88DC521374212B1CD239F1939E28CC5154BE59A62157D3531657
B3D50BD845F8ED3FC10FD2C2F18D67BFEA9A8C399F5A5A7C1A431486643A26F3
848938782002AEB7F96BAFA65D3B88EB36BC2E699A119B870FE81C7F4614B244
32C524CAB221C1AF946513333716E4F7A74238431A94CDF54A1E1A3378C4F0DD
EAB39EE6A6F7E9E6AADD53CAC8902D5FEB659BF24515FE4347A4E7DDD8B8B8C2
AA3B02E6AC12FB814738939F475B00045DCCE8CFE9A4B8F3E1D31CA7786957F6
0622D9A2A86C441A494A07485C727335CBC2971E27535F46CDD128E4BD18402D
60DFAB8210BA22E3170EB6189562163602A8298579F595F99C5C3DB2A40A60DB
AAB5A2FE1B6C18912CECB8E244A91E1AD806435703B872F2AAE40B06DA1BFCBC
00ECC3E237DEA8C980250C0845547E35CDF1465C249CAB870818FA5CC7B9DE51
58A811A0663CFB5DF462A15DB507610322A4E259A6A166AA7E32CB44B0934372
C0717C1A9A37719070DB1E3408E8B42B87A7B6BF4FEBD03132F9075C271F2054
07839F759023DFE32E4A4C69618FE8EE83CE65071D86677508D564CD5D5DC671
9E1C889376D26BE7958CE375D36117CA26949D3FE6E8AAFB0BBED54E635EF720
DAAFBAA7E7FFA6685B04C558B11952FC50EDE8D18A56D8277471A2DDD78DCD0C
10DFB0D85DFF60479439BB3E5BEC212BB664805A6ABBD010D85C3565B2ED2E16
3B077C8365EE6D09B687A7BAA7F4034FF97C512C2C654B21740B0D80F2197A50
02738F99176AEF34CA6EA3F4386D55788717091C9B89611F167815C6688E48CE
CA256872C640999BBF35B80F92DD0A3F2E661B0643D48E428C5E188838CAC701
B77CD62373216298005A694966CA8CACDEFCAF99766C9E2098A2436C0B9073B9
CCFB17641A2577217CB29583463AB935630B933A44BA9217C2953CC1A3A315C3
583925C47380CA5F97811CFE6EB8A94333CF50508790F5A5BDD2DDC8AC150F6B
A142E6C2CE67AADE3457D17C81740DAFE000798A2787814333C50AABB30C0CC0
CE93ADB4E2FEB60E28FF6D4AF0010D422AFFB9D7ED343F64C6CAC65D8218E75E
CDA7292A0F2FBB4A625182DC56AC7CE1F8CC0CCB477CA9031023CBEE603CD457
90615328AAB0231173D3D82A3D0635C98A57B5F8DFA3827E0814F1D21FEE501D
D6EEC702869029C91DE87E327F909B8B374E4975E93D9FD32DFA0AE84699D187
37FDAF216F5D3160BB73DB275843EF80302912AC116A73F18E74F724DB01EC7E
67FC33903B7DDA3697D159B2B405CC7231669F79EF6C4527DE148B31E0F553FE
1D461FF8CB892CD8541D4066FFB88BA2EE4ED4246CA0155A52CEE6642084F107
EA5399188AFEAC444757444D27BA4B5C4434BDDCBBD35418E9E9DAC3479D3309
DE69137F69C7D3A7A81AD20E8FCD66328F497DDFE297ACBE318A7762FC9CE573
0BE97912B53AF90274B966226938D9AF06F1F3D47C1F48BFAE0EA0AEE1984C59
0DB7EE142C244A5B44CB0AE12FB168192AEE4AF696EDE54CDD8A7B0BCA6C752F
655D8C91CF08EB5B1222A0043B001FE5C89A5A4C8CC62356886E9B27AFB1ABFE
628A6567768FD3A33679FE057FE48817E2A2F71DB6E33BD5AF7B51FD03EBCD44
7215999EB78142C128C6CB1E6E75EBCBB1E4614C2D3B342208D76F67B00F6B9D
E822EE15680E972DC7B278F7EFB793A917B3B604271FB764FAB871F7AA5A5FCC
52FEE768538B1DF061BB3B5290DBC5E083A1E0241CAFA4C7D88948D2849734E5
F9DD5CB5BFEA5D7E820D14BB291A619BC67D712BF7CEC27CE0B7ED8D31A29D7F
2D88856EBD301451B71F926B4393A085814760C92412F980271971464F1A21B1
198F152E6C1F5327503EE3D81547A80C90ECB4293C6BE27C946BA467A0CE4B92
601A9F5E4405D4778403A81751B4793C42178514BFA4A9D984E4F30F6176C182
1F533432CF98817835A1092BB709FCF1D2F4A7579FE693BA38CCF999C38D2608
09B1DBF272B7761DA753868C7F52E4F7DBE46CB2E2B1D677782825686E9B9281
2B4474EDEA78FA737FCF9BE92425489A3647B33492AF258B7A21AD2CF547FC91
8A05BC38EF2D3109151F54E55A903078AAE4989FAEFA96D534489D92D380B6AE
97CC3D39453856F822856D07C6FF0C7CB1F039EE01F3D54D45F1F3763CA66620
43E0A84639B05803C2A6EE54B346C5CE263C2166AC179AAFAE0E5C71E4A9E99C
1591EE502D97D370A6C2492A5440EB4D37E07C03F558A991CC0E063066C1E861
13E01DF2C61DDC59BC5086CFE6D15C8A4F980E789120BFD08AFEBFE8DF9C3C9D
318B88CB2AE5A37C44B0D6760418F55C6680271131BB0C9A681AF451D7E1269B
D2429ACE1A2C03653896E0F852688FA80E825E0ED0A2B56708D2812B6FB804F0
9259064B3E173C14293AE10FB5E9FCFF3138F7826B23708AA30FD0BA7F874776
5CB0FD2A729FAA65351B39173A24778C7735FB31A48910F7DAB0F643784153A1
6E89D7B67A855F73310652ECFAB7FC8BEC3654596F9BE3C10C7B2CA03CDA3ED3
3DE3F6C08E969169F45F3B0AC4244CF203C41CFD4B035A3578B2AD17EA96E153
538EE91ABA65102833B4190BBE247293C651E3FD2E473D324A5E2E7DB1C6D3BF
697A22EC3197F0D22DD11CF77F0A496369379145674D21B038D8A65983DEC305
A47F7D464E80D137845DC02F0D8C0F17AE91F582A99473F164529BA3312F1B17
39FBA7EB7678BE674934058FAEDE0BBEDCD34DA4529B2C0165F67B8733D0C5D4
F1BD5BD2C022A32D3B6EC07593948E358582B838A01ACDA022D950DCD0DBF7E9
3EB7633F1483EC30D14E399151AD50EFE11C8B06374399832039B32CD412CA49
4606BE89604D7DD274D782E64D9FAFC2DA3B6EC1E6EC1DADDC8249E8A711CB09
C225BB0C4EE70CAB7CCAC5FBAA0F6B749CF8A8F047D56442A65B57D13C885F53
D461C07824578B6D7DE3261525F60DB825445097FBE8CDCEBE3056145B8C1628
3B2BA3D713B02E2BD00300F49B698C6F9CA073ECAE58F815682CCC53303D1B4B
1D4ABD51A24A43926084ABE7311458BD4BC1F54BA7681217B6B09F977AEAB5D0
9EB5E54A2C90BE9C5A1CE6237DFDA1D561038999618087A6A440DCADF03856AC
CAC157A3B33A17EED84F6614326DCB47290A4A4BCA4A12BD27F8FFACE962A2DD
74F9A6327D65B49D5ADCA70D831EA41DB44A79C45653A81AE3E9FA8D532FFDFD
ECAB254A1FE3C44528AF66285B48936870967F401D644703AB02CC5D0EF7E81D
33B38F39870841FDD9B76A22309F1C2CBD7B36CC3F88399B6768401F68470CBD
2F57A471A4D996B647EFE2391F4456EE0D6DDB0E0A2B6A29701560A30FA014AA
FE29E44596258AA29D758A6FF943CE59197EB71A8D35EFA993A7DCDBF4931B91
D9DA4DD9DA877A091BD255151B6E9515A76D44CA1629556B1C0D5C95066473F8
C44469006E486D162ABDD3F0C9F8CFADD76E7A4BB591F2F5F6F82C2597CB599F
840D1138FE79B8B1CE3C8C2CF2EC39A53C126AAB28F56A15D8F5585601CD5715
C64324527DC804202D06A823AA2541AD532D5C0698162B725C6BECEB61CF2BF6
035B39432823B659CF0EF4D16F38D611B8703B81F214A20CBBE0C0E5F2D242B8
3C3CC037B3AAC582FA1B8EC92D2AD273C27B9E91C37A31C02C6FA86353BE979E
3A362920EB948470F08A16D7373C91B85BB7A8ABF386C0D24AED81D4E86CA3E7
D3A1D0D192B041A04FE4EB46F24AE060EFD70FFE0A51FC67AC6B867949F7DDF5
05EAC98874CAE9BCD75F90DFD95AFEE9CAE7AE7494E9FA4677762B9F5D78CE69
FB0B6B82A3A78565BCE1753042D3EB6D76FD6A538BD84AA98D89F4B9B6A7997C
56426F662C8A6C1ED130F192EBD5E990FF4A808175DEAD6F1DABAA782FBB99C5
B38D4D5EE3705F6DB7EF310F0B74FF1AEAFB61CB03EEA5C43BC94A7EB550D584
F9A55FB10211BCBC5B19763ECA06187A84F67E6BA0FA48F08E2B9606BFDECA52
6F334D8C5B0BB9B7E04633497BA815DF143EBFBBEFD034A74CD63B57599D9003
0577BBFA8888284C3D76C6BA312E7ADB43AE0E5E8F790F656CC4E6EBD744BF75
4ABFBA843F5D9347A82563D4A16877E3766B1BB96E85CEA4638465883ABA9DA0
089286E207A7B7C53079F6F088F391E45B83212C4A057011050126197F6F67CB
C15B6A857627BB63EEF5622021BF4215B7043E9B0E2C4D12EA92D1F688BDE844
F2C7E68B40594E95F07ED72C368E3CF04C46F08A06DA700A81A8452FC30C8BD8
F0B8CF2611CB2299B25AC9D84D1568B893FE1AEE890F819E226B282AC26252FF
1CCA32212D7D5950BA5C6A5BE68C16E0C6CDAC35BEF6B228993224F402DE6937
34BBF2122749EEFCD4E55318DE7B70FE939803DE499F4FCB14479A9D73ABA104
A9DC3B3670BEE8F3D3658403A40799B3AC84A7292DB1E850A6E12A60D6087072
7416BDB40AAB6FC8F3635ABCC89A34766DBDAECB08ABDCCFF2DB6EC6349E6D09
199BA1B47E10813150ED873954873AD83AD6D81C7A8E5F84F2B843FEECCED68C
D67025EE99D092D4C3FD839CC8B60543CDEE55EB2193DECF2287E6A32E6825C3
FF4AD7E6C009E3C0CAB8DC5E5C26CDD28276B2BBDFDF77F4427CF4F829AD7BD1
4FD4E5A4C6A241D5D694D24527BB04F0E8F062BD5A02A7E6B0C0F89BFA2F853E
BA247461AE629198D4194089109D211322231ECD4B2DD54C5C36C65A207BDDFA
5A878EDE5BDE0DBD3DD9F56B05440D6B0A53C470AF012D8C590F638645EF88AC
1E3375457CC389163CBC8B0A11F372B61FC58DE5B42A6F9179E523710E7BEB8B
57D142A2BA2FC850DF0E57CD21070D93133DD2DC58821C2D1E921A40043FFA07
6DAA01F59C6EB641EF9E13D83B481BEAB54023EDD9160AE7FE35F4DBFBDEF786
97D1ADBA006A9DCC8B460712DCEBA290B95DA276FF1D1D257DD62AD9B17D103A
AE625DF57F40CA143EE48D48B5E554F197ACFE5E7D4F46CFF607E1B1085F696E
A6D3585925047F79FCF69538226FCBDB4B9CC59A40F34BCC1C7A927C66BE7FC3
72FAFF809482C6E8082AA34A09BCC19834EB9CF01CF934B2CDB116F663576D61
447DC9272C1BCFFB7BE2B732ACDE4FF60FE08AEEB6ABD67DDEDA2EB165E4D1C2
C8C8E8AC84B0A293D5F7AB671A26967C9FF4F269D0997C4A6043304CE1831B6D
7D83C9FC498E1F97A492DF5053874D1B2F47FA9843C250D232573232F97525FB
C507593C0BB6157E99DC837F89EC207544064AA89BA7737FF4A0A20B62E1EEA5
54384D91FF7420E591B821CBFD12998AC1E39245748674D027DD1F187DA769C4
F8605B305923CA343D8A73BF2B8DA0800D3E6D210C2CFCC41D6232A81BA5C3BC
8905886F86E9FE8A2D96FE16DA2F52324F99503B9420626147A7C1A31F599229
0DB8EAA2082B6CF61C3932EEE241576C032A67D8AF917B4087203CD0A3CF1797
82ADFF54BFF1FE0FE91E495108AC8208AB50A10FC280E923FDD884767B8CBFCA
24EDE0611B53F59937C884174AB71BB4EA742167576DB3FCCDD979BECF46B73C
D3EDE6D8927960A88EAFC5678A3E32FA47C55BFD0C4FD3A7E14434C5E5063F53
ED4B14AA590E8C248B1321A0EAD602BE9A34D80EB18ADEF84BF0985EFCCC4C28
5036DB227ADFC0D752E4F55EEFEBDF326A6DE2B66BB3305645EF1AA492CB5E1A
A2A967B2FAC53F585266A1B3406E8DAA60048847DFB6328BC54AD8E8CC9B05B3
4CD73CFC0974DF1714A88B7D6D20D581E9F3F68DC68CCAE97EA243800505B02A
010E0B2731427A8E865B92CFC24FFD53F418FCF9190B3B86C32462B210515FE2
DB5582D94039FE0C6EB251344F8B547F3744480DABC20DF5166C459353845BF7
436D51EEFA75BB548E4988A580D440C2AB333CF1B4942C9136BAAB1C0DA0E3A7
7AE7D44D70B538A82355656CE97F41306B0E214F08700972FADFC01746179B5E
4865788722F630C27A3802AA208E062552AB41688E4B0FD1515D1827AB4B277D
B3F5668CF3CE12568662DB8B720E820F5949D702216C1378289B3ACF9164914E
4E9D54658274B756B3D3408A435AB670E0F68269A3B973B26D12C45A88494D1B
C04A98DB59317BF3D65F656E4183EB7F341653F90C6985E9795C7FC28C691526
BA9A24674FDD8C44F54C9B601957FD5D77DC0C3B851A105745B4F1944575784B
504E1D1A1CC8C54BB42AE20F058CD38E6CC65ED06B17C5706CC12C17765E2E2D
D45A128DC48DDADCAC3F993CEBA90F90974FCD669AEFF66BB04493942F1434DE
7AF977AC09E0908EA569BBBC274278D01F6AB49671B508CE9A856BA9E16CA00C
E63B2A5191235226CAADF1C109AEDFF2145B049FC559B3FBA57F08BCBBD92A03
6BCFE94C3F2A4182527E16342AAE0AF1519C11F90FB158A96FC36EE110F34856
0B8BA2AAAE24CEF721CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD85F1B31037C8D371
F58650EDD6F3BAB10116FAFDD66C3DBFE6C4486EB68E7400BBFFD358ABDFD815
CE48486D2A098DA68BB2A3832DF74C1715C50DB71704D2F4FE437A6C44722C05
644840865A62ED608E6018A232D38AA3EDC879378974A281B8F07445636DAE04
F80A9FDC496502F5FD12D2A1FA3458D3FF775A742B665BC5DAC510A79298A67A
67D478A2DDA733AA5E6D24CA0A5709AC8CFC3EBA164B23ED3534D96E1F1E4F2A
D63AA8912A47CB4360CD96180308A67F3B53F90564DF593B557D7F3430D753D2
CDB9DDCE623D8D59698542EA9B388D56FF4F79E9178D4E0068A21FEC89C64253
FA970182D845DAC53322B5F0EDF2E903889EEBF0E0CC30FF9B4020A256C27681
43FC961DF131B7BA764E5CC20F3FF194C0CB4BB93B1E736992E995B8A4F38FF8
E7B60DC1EC12371714455C1951CE56676BAE72E477265B81BE76197B0167DB48
6A7772597AB2D234D0C4765B6ECDE5CF1338DF034CD04B4B3D0C5F7209DBABDE
F79754795C54299607C439FAA1E16B9860765031E331E892BFDEEAB4147211DF
02F563B1B0E65B1286946DDCED2A56688B4CE4CE5A22C8DE2B88B707256FB5CF
708382AC5E334D9D374A9C1B6C0368B6486A3D06624643676218BDA22F6E793C
31EBF5C89965E329D5452E0BD0E441E1F68A416E37E251B808A9C18D539F62B1
329A7CB9524FBB56170E9ADEF02464A57D0CC0A750805F3314EBDF74EC146BDE
FC01AF39249F47283B98220A7D4C16BC25BAA1ABE59A48873C5EF255ACBF13B6
F8C91485EEA42B12AADADF16A4F17D68C4B0B91385CDC9BD0E6C0F0D0B7598BB
4CEB3DB72F44442C465F81BB958736DDBECC4F3D7A5906CEB943F854A212FA63
1DBCF4D4FEF48FD739B09FD25DC4496FE457318DED22BD16D1FBC023702D392E
F9F11A368C2C99A5A137EEF0283D1C469780D50CA654AC54930996C4F865A3AA
3089F5B0F081CE2C65ADAAA523C72A640A5F6DB268FEB24B0A89BA66AF4C084F
68CA1024DFE075D205896534AD7BCA233AFDA30331D06D5F7F703327C2893D5A
E4B2B5C0EAC1CCE8058FC29C175FBD01BF230B80D5AB580ACEBC6D68C73A5344
48FFDCF839B2A5D900EC8D425B681FC18200177C729F81CF52C58E255E5A1886
5FA395F93AD8A5FD22D5F72B9F27623C1FA0E3A080CB1E44634BE4D2F6BF3359
0C79C305DA03F028CE9D20A997586C6F60D4CF4C9BF7C4F3A087F4BE21A90D69
A0AB683AF60D17361619051D7C7943FFC62C78C0B4E3C06A9579014FAD4E04D3
BAD2C02C327A07D65241C794BCD1072B79B8CA974BE17216154B84BD2DF3331D
FA8A02B1D9909605FD49F2C31539043B2B6487D8FBAB2E6DACE9DA1F0A4F5B83
856D113046915C394F186E1D7AB53FCAAAFB2470787B8B3A7310AB4F43972FF9
57466747B62EDDBF838BE8F19130C01AB94B021374C167EF0894D45EEA552A15
E76297E13E7CC5BD70EB1D73F335A7CC092ADA935B594AB4203DB0A98E40A944
98A68AD93FCB190E466BC963D1C5E94BAC3B2035F812388DDCE822D58B48EFD1
72A948EFA9E1DAAC4280803AE0F08ADEAFD00BE5A2DBF422A4FCDB57CC543B27
FC0AA1D73D36A9022DF10B43776D806206137C759596CE9C36F5D437CFA5D037
2B4ED85B9FF8460A5DD97D7D4FB0AB88E7A842C5633575289F42497B057CF121
911C663C3E6E598622BC737E2415F7B37F3E5EFC429704D3078A7EDB5633ED6E
7DB302E9AC30AE90D2AE24504F2E921D25551CAA98B4675FB0576610A37B6F95
1FC4064D8B66404D66799C33D8FA824F73E37C9CC7BA17661AB9331C9BA4F24D
B93A65FE6DC5B9CF1C87BB99BC522E797E5D2F30D1986CCB57EF62920F71611E
974E00465779C4F21FE8BCBCABAE2D214F978A1C40C4D59DE54BF2A5CFB7366F
69F382D067E829351F0F47D92F9300DEDEAE1173302884EBC564AE1825FC13FC
3B6AD67BDC33B83A493FE8AD43D46649A44342F13E6CBD7F1BF01F1D455650F2
9DE4EC8F57BF599EFB1FE0324F40C98B07ECB8F2710FF55BC9FDD1DFC8170187
CDF780CAF45A8E0C2D394A26B50F8BE00110833695088CEABFB13763CDD50572
7B1BFBD8E37AC4BE3AD0C5EA2C6E64902D510D8D7D51AF17B9562670E3223F87
C3B3E2D244C1495132FEB46D2391CBF5D386B97E816B0121F0A34A1002314B9B
81EAFD1CA763F446A6001309FC386D4FCE4089A7BEB96A753B77981AD11AC395
5FF0D7A4C6E13320A12F4315ACEEFA264993D23062258DFEFF5E808B3F760D30
61E125E93FDB20024F3F3BABEDAEDCE09FC6EC1546BA7FE32409959C59D153AB
16DCEFD9D19496D0F80472B50B9D1A1E90D75AE565E857B3169544FB27A7919E
EADD45BEF38D1D00AA38D864F664882EC1788E513F587CA55A6A291DEE1B497F
73D076F396870394E7D26AB2B249EBD49B78CE6F01C1B4297AB30F2CB33069DF
C3E609D32B89642F1F45A93E810CE1A3E159C78437EB057E444AF8C88FFE92F2
6FEFD24D8911F60949C075630D5E29912CD7E6362E52891A91847A571AB6E280
6206612BF5DB0BC0C43B5D4F92D893820445881B900A6A289E954BF1E40330D6
65D7831A64AFD7C9D8F85A009814CA9068F00AFFEE985314B7F41070DCF646C5
E9D3871CD89B161E015DD55F04A4B42F39A4935E10F10BAABF5FAAAA47A65D34
33DF16D6CA98017C7C118D8C67F71A4BC3C8794BDF5FA8A0DD76EAC1477D781D
DF9ED17BF1BF122E0578F2AF80CD6A74273F5204CCD208C109EE75EF233DF049
CBC3A71F2ABFF02BFD572B01F17BBBBA0E10BB4EA31B0BE8A05CA56FE842051F
E87EC913E4094304B74DF26B04B69FB1E640A4C09191F2A840375C3B89756E08
9493E3B7C7A3BE9AB31FFD0D9227EABE615293FBC49BE014D25D83EB3302EF6D
C77C07A991FEF25D4EB979E085F5FD245FEBFEDC9BB1134443FFF918C5EA3799
6CCC4847CF2019B1217BCBDD7DF302B8DD06200A8E141775ED7DA74734480B48
D114719BD5B35BC0F8FF663005AB32CB4B565D620C2A709C44F011D14E0AB990
555BE6A705C38565CE02C0350F3C3908A3779CE7CACCAEDBA16A992E6B88C29C
FFFC95F561177A0EBD38FC43CA4F59B3F360C66AA7F5E3299C87A15E04BA9741
C4DF40D44C0C1726E6D6DAA26CD5D563F360444E08EA8214CD4647D62D216E54
0277D26CC722ACE8B379456632E7FD1AA490E97EF1BD458DF08656488A18E338
578927CBC76F06699BB084F049E328D6C54AD1666090276C020D0983979A8200
9507CA1D7E593ABE06FC429FE06F9122E7F8EC158A3A9D45C7FF3E3C8B0A5A51
24AC92D53113C9773D6E27F87E6A0E1666241125457C9223404D30D6C17BEB76
A16627E5C2E7E6F6DD9DB5A351BA57E8CA8E28A42C9E3E73F8877B0E1C65CCAE
E98C1486FCD914A2B09218D52CACAE1A72BAFDFA4AFF7B92D5CCDC0A71BF4E8C
8E2F83281B0E9F6BDB52990729F0579C8660394939B5C526E4C2D662022F6C71
AB09D9923D42FE2921D32022B8FC8E3077B41494F18B5E7ED330B3D8DE71DCA6
71718C928A6E14A6351259B1D6A9700714A916D567C8593D2DE835EE9FBADEB7
6EE5B3D423268E0434582ED6B5A08879A2B5B58AE827BAA65206A5064ED86575
FED4EDEDAC66C4C8EAD2B12061946986E6BD2916754A9EC420242D392D33B0C0
D8D6D0D86651B911DF448E329F9D46F41D02D2E83C2FAB302B03558FD55AAD93
84EC3AAA9EFCBA881CC72A39DDEA0DAB7BBE9E556034AFB95CFA4F5EA4FF6376
3A313D33638C065EF056061AF8A496C0E033CE57E64863E0F1ED4725EE7312BE
B40EB3C8CB205DE87280206EBD32BB042F46824DA25036AE79D7BD85B9A80845
B563220566FEB8F341AACA744FEBCA5A91FDDCAC2042AD0EA58773ED0DE9FC13
F1128FFB0C8BB5E7D0A50B33234AF28E55765856F9CCB5B99DFB0390AF00C19F
AB844F6F01AAE2BADB3C26F46FC207372135B875DF11865C20BE5944EA06421C
0FE40DEF001C0EF439972F57369290DD3D9879EA507A92FA88A8C8499A8917CA
B23F00BC124FD93096DBA02B89E3A4939C152ACE83E912CB7AD280F09997B015
41766404CB5CD95D3946B1656F6C1ACB51B108F8F3FD09F2F1C2208673A3ED3D
91ACE4B124110BEADD4A4B8C49CF740734665C5887D21F219A295EA233C96874
6598904F052A50EF84D1C46CFE09C77254D06153F59DB81033F4F4AEA1BF99F8
070976D75485DC40B349EF2888918F1967AA68779B0B133475FB2C3CFF88A74E
500201A506926FC7ABAA4B2158C750110A03208AECA7668ED7DD712D43B9A2E1
2C83176D3BF71DACD314A4F82B82548F795582257C091D2D9678B32B0EC86BC4
A299CAC564026576517CCCA2E1CBB81A13E071717071C13B24DAB4C0C406421E
BCF15C26B09EF1ABABB5EA4F9031F861445EB8E445EFDE8E0ECCE9962642E439
62CD0B203C64DE967CF8CBFA3C84111100C18B3596DC3A0223B7565918F9ED22
23115871351FF214B5B5AC3E4D786B86D6FF6302798C42410D54DCC74F54E078
C3DF9F8D82D9E295975C437BB2894802F6E0E5B302C68CE675254328F6AF1677
365985B408711BACFC6995B8CD528AB8C3BB588383B1EA4F82712BDA3052CBE9
CF831A91A84B3806D2A6E9971A32B247E177FC5ECD987B60A6A572C4A0A5FA78
2EE13F1F788A828068545BDED65D2253BA64AD995A18CB1047E4D96C95ECEB67
72FB6B4B93D0746AFB81B81A4D42210504E4254BC7510C4BDFDF53EB3D5F54DB
E7F52B464FE65352F56E78D58BF1E0922FBDD3D7BC6803F44BA0CDD0D72D5294
83739583467B717FC91A1D4FD1C2D577859C49042A08004C2D010966B29031A7
9FE3A1A46997362CE127D6D0DF9CED69C34ECA595003DEFBBFC7EF8EA9761755
A15E9F7F297618087038C8F9748E52AE9035F29B5C15C390870950A4350A9594
1BD9EF00E2DC3E000B8F1834C796A8342322327FD71DFEB880B5D87136B48BD3
E22C49F950AB92D23480E431C10BB4D94A38E4E2071E750A972AB4411EE07D3D
2FE6EB33202B1B539CA9F21EBE4EDCB99D78B9B064801D47F41B367F37E5A56B
29B7FA10CA7213725B088E8485C27BFCF37D6824EFE0DF8DD46FFA5B0023C31C
1FD013E4D196A2510D0A93E26823F80BD499C3DF91D54ADADFC3ECB44E9650CC
FEC547BFC106B236288722DDF48A5182FF8B60CBA335BB54BDBF75316C4BEA50
80FC44971A27EB0855A2F3E4737BAA67C3E671B402F789CAA09EB717BA496936
E2D1390EE94B8B1F84CCC68AE366ECAB5C56A6D305855AD8E401B74A0E596D35
71C04F811B98D07FA0EAA53F7F069EF8DE0090ACDD3219AE5C51011EC78752AA
C702869029C91DE878107647559E3D687B46C3D311F7D7C5381FED64E4EC4EE5
9FE1524822632CF74FA642992ABAD0764E53FADFEFCB32BA559807CDAE5DB762
46FFC048D0536D9529E52B1C6CBEB0A9CAF6F3036F0DE45B104B41755045ABB1
1DCE48510EAC204445900232FEAA4C6A6752EA824A21FE727EE820CED229BCBD
02BF1BA879CD9FBD27A7E23A4DDB525B917019791B705A1990A5474D269DD3EB
1589702AD4666AE2B8FB10124ACAA141664168E61ACC2EAB7EFEFC4C1E3B3079
DF7230D21EF242AC4D94FDBA1A7511304670D3D32FD623CA65818B964E1EB8ED
7A9A81F39EADA29F03B8F2098A92C807BEFC56908B359302BDFBCBA4C19E1540
EC171DE0B4C6A03AD8C04C59A7A86BF1BD10D2FDDD3060423C3F372669CC5806
C15153C70C0C112539DAA124C8217E924000A0F81F7D46720081C49801814BB7
8A826AB2BA27088CCF6A8F90D91ACA913F1D146B2AEF3D52740647DC7BFDA893
9AA8A6C920CF64584876A90BBECFB1E5349897F5A725FE56025D1CA2BD4CEFB3
F695DD49F678A39E925993450827D904083A56D6D3AF4A3C87980C58B6ED119B
8C83B37CEAB56EB14EDE6AAFB6ABA053FA0F08B5C1055194A11E95265FE7873F
C77F08E449CA512DFF69628071B9A42E9659015433EA512BA2672AF6CED0E9BA
BA1439692927E5E94D75EC1BFA21C19B1DAE3A20D1E0993CF252852471789E16
80E5C4657EDC527DB65CF935B43EF0C9A774DFCF15C3A074593C6B1C1A290594
87E75FE25E7E9A31218F0E68D0FFC9CC33E76331A314CFE1B721A4731560A402
51BFEA5D7E820D14BB20D0B5385F82CA53A2CF19DD079C9AD75B3EBEE5597889
A866FAA2721461104A69840E08DD8081BB65221C83A1434E0F6F5838B6C32105
624C28F5714465955CE4CEEE456E5FBC08E5F29EE4BC9F76D8538128CCBCD41B
E10E91F0043E24640A767F249795D99261172E5D3E73DF2756AB6A38D0CB4B97
CD90FCE06288619953B83813C9BC696FABDBDB85960EC2B89D57EEB41BA456B6
77A1E666A94419E7069A9E7E1E26071F0232CAE20EC767F184CBE009DFB7662A
178B6C761B7FD56401976532FA1F5B93759FAB701141E3A12DF63242933619FF
0F29FCC40656F4FF37AEC6B1135FF2DB5078AC7867C7960C4AFA9C9AB22DA878
530E4A99CDD096705FD67928BA8C2ECAF766F52626B632183BBCC31893C8E416
2D346EEDC750BE9A0C5726E56E34BECD089CEBDDF565E8882EB7FADD0A4FD106
C25E91EF9E305A1F44638567DEF73DFD8D430EA637C91D9E2A8105B6B7AD3C74
99A6AE06E1F712F054FC664261FED4A0DCB53F26782CE33D0270CA479EF0B7A6
AB349F4546D36DE376E67023C3C5607B9FBD7D5CFA5A23C30A1632D1D6ED0E94
D94590DE30C2328B01302A48354BF644EC096A68FA4C5D1E24C762D5876C6F3B
F36EB4094F5E708D0FEC6EFFF366CB91F9118595C0B230144E5805C3362F459B
92E5EDE49679F8CD75E5038E74DD522232F5546377C9A9BE0E1BD49D92CEC437
2A3EFF9E93534A6E94B89692B24BF7FCAEF2695B2D8BE0EFA608B03D8BB576E9
7E3CB29751C41450286FC19405DB60B1F65B8C1A62189757F67A5CF8CDECEBB4
7F21FA1BEBF910E0829F06D0F83F812FC70D29894FDB7474A7B048B06A895497
E47A1E2076E3CAABD39F080318665F0BE8D5A266A77407A3877A93FEC9D35C57
9F60D6500238F93C6FBF68514C58F9ED5CE329A66AD147C2EB8D809BBAC9B66B
FDAC008AD53DBFB268E35EA3D2CEF1EA4D4F7E587BABA41BB82B410063A0E772
20CED01F750000B13596F7422AEF6E25CD6B1DE194DB09E34D843A77D408C902
26FD7DCC2267C51CE65581ADFA680E018DFAA4CBA83085CB56DB234B5802E41F
2F5DC37A70F788F80BA03F907103BECC8D05AD67819CC4FB4EF054F95140BAF9
2B99E66A84452A9868C994481E0510E7B25BD74BFF14E56CDE5F718BB44F1389
31B2134D101A8DEC5A84D1A79BA7903C72850F3D519517AD8FEB03B4806FC6DC
FAFDD0C95D57A2BA0B8DAA20643023F042B4914A084359B02ECE352DE5C0AFF2
5CDAD43BEC7AAED1F6BAD964197FDC6B9830E9C1D52844B5EA0504D4F1E15A78
6A24C555F071154D0DB164F355FA99164500A4FF96BDE8F2404B1259292F23DA
789DFF5C37A1339AAD0C305FA36CC4D07048BCF34879909606D20937129D93AB
55729042EC4B04D032EEE734757C7BF0F7B1795FBC069691628F1F931DA14D3D
E1487391ADCA94748BFB30472DC67A839463E14733FF73D5D07A9411B6E88C18
CFD9B234CF2F2D603D0263C08131845DC8EA7B32DCEB16073E5209113BA2D44E
5B6515D037381895F8F9356284802E665531473D18AC7AC4710958E88CE48EBB
53947988FDD234736DBABDC86EE288A36D575EF489D67F9AD8D13C6FB41F5831
68304FBA569894929C59E61E43BF9855A1FBF961EA0296B1468E145F363240CE
B4BF6C2E0977D7020E984E7C52A7E1B81333F783DD5D0CE189C7D7DB56105B39
82A4DBF3CCEEF06C5EC6744EA8A49DAAA05BE68A9A7943C334288FC8F2308A78
EEC3D3AEF8899B33EE188A3A746FA3102EAD311483D2EAE1BED5DC111286EF51
7780172D12AE96F19DE8435515BF52FD453207213F3E13FC83A36F2D86C86FBE
3613EA73BA2AAE3FCA5D2E78ABF50BCFF5131713C9E0B8964878C02328BD3084
24854AFD3AD930AF497EDF367BD29028ED61C58260832E6C4EA037F4A4453F74
E3308ECFDAA3BD67CD0E79370BEDFC209C63DAFFFF8612BD72EE31371E9E7168
EFED228A92A2CAC20ED17BF444914697F94F59B8AD259D2DDF433930B270C63E
EEBF992BE9CF94103AC36D2E1E53C13785F134CDC2B76DF1B9A35E846B6302B1
D58E2DABB37541DF88049C1F1B0D4BD8F6A90AA4459BC9CF7B2BA7E9476AF69B
66BCAACACC3642AEC909FDD3BCEA9D8E6BDEE1D7DE07002E86961D20BA1DB5C0
5460D3E1C2958D422A58E668E91D8A42742D2EC98BF1E4ED4CDF8DDA7799FF2A
8AAF448DA265025C551AB599C3EA4A5B43EFD388D2DAB89BBF613ED07AA6F56E
C07545AB05B3175433ECDF6F8FDC14C3CE8C2C221C3E656F55B139CDD5C4C87B
5870BFAEC9B368CEEB4DEDF80BA158F65C546E9ABE7B6415B64E2E7BF5B8C09B
BC8863D02E7CBBC3F9B1AB0D125837CA28B6A0A1DCE0E4AA6C193AEA970F45D0
1EFCFBBD18095983C48DB12F3951CA19DCE0F3992DCE431A289C14034659B377
301B3FA304A7939A55616480B249B075479604CA50D633F0F9BB8BBC097A375B
E1F979C7A902A6B98F807E3BA414B0811D271B835F0FA0BCC20BC41DBD584D6D
FC385DB4489EA39B1945336E0989E393012334DB1799E867E216D0BFDFD8EFF9
C41FA280CD6F62F72BACC9B16B5197A556E05CC460DA5FF8BAA066043F44D1AF
31CE6F867C819B0ECFFF5D5FFDC582C9A36E05389401287206004751FF0936AA
CF2269A8BC7443FFD645E8EB8864C8B178B121D38CE79E3AD729E30028E43296
A0548F67417E35BA5DB5474033C4BADAEEA236C3ECE7F4B2EC9320073C8D381D
63150795CF2BA78D4E5BA94D96731E07987529DF236C6E85FE860261A461DBE4
EDBD14290B80ECBB84CA44C1B79B08D2399C14E9728968B1C532A03B73F0C17E
BB95A532B25D82BD45F31280D6503F2C2064D1C36B23A7F75D7A8A2548522487
2CB9DEA89B8271FC2463766E389F89B115F1A12297BB7656081ED520F02AEC9C
56112882B03883C3E7AF6D3F2401FB03661FB8ACAE10E2EE819BE5C4E445E66B
0056BCF894301B85A5C3D84A7F7FF6B321D1550C15C0E43F4F72889EC8195C96
4F945CCD62F7B3C573A95DA6E3D62384F9ECC1F7686EBC5D2BD5DB268017D5DD
C1E87537D317D725941E32197132E5B696C4179789498BB0AA7AA8B4DCE5F83C
4364153C7F24A70DA1AF16E17B3E5A7B19B175CBF9BBBAF88A852ABBBD77C2CB
49674E9E7FC4C6181FCC94BB797FA107573AF2C0EBC6A573EC46977DB4F6938D
E97504412273A08E619FC58A94B3F5679A38B0DF9CCE85C83E089D7AF4D937F7
20EBAB54B2B7544C64E007551A26A7D5B1814D871309FE53FAA4CD9E8CCC129F
A4AFE1516ECD9746E751118847A135DBFC2428950DDB3815053821089A812DF0
986A1387525D58459319DA66151C149E1D6FA71F8A4F041A6C6CFB9732758443
2F516234A8BFCB56CC473A3ACBAC89078910F3D70211F76A943F210922B8BFBD
F62F07560C8C90B1545BFFE72F3F6C38121FE98C85DC41A33CB127E966DABFD5
0D423EB5BA13228BD2837B75F3210E3A9329A4C71F9F447A6F2178B899498B98
DDF15B3AB6071126E2F37C5E015248A12AEC69A9AD8F9ABD3F60D461CE2EAECB
836C3149EDB6E7C1719027BC9D568AFB03DA766553F2C1A72E5B0B2D36B70B46
04FAEE4185459382FACC10E9B8C119426E7FECD41546AE83DBFA9190AF2C636C
213575B06F2523B7F6464BFAABE03E7EBF27AAA0C1CB175DD83FD13AC211677A
E086338BAF938E7C8FB866EB50FEE12D17BACA3AE35A0B0435EECB280C94D1D6
8E58339B9C2BA8FBA66F37905E0A3C770E5B327141915B534BF4714C4FD9676E
72A3BC526B3721335E5EDCDBF2C1BD49D96D1C45B026CBE144BE288FCD4C1E3D
28A428623FD1E621555BBC324CBB2880E1FEC378139E13CD7869FC7059E66265
6EFE9E17BA149CFFA112B30B00920F1B48561E7282FB6F71E88CC00DAFE4D800
B8C5913EF953B14182F568E72A9E9DD32153FE2589EECF3C78BAC1958D902205
B6BC39F613A9766E9F220C672584C751E3F571FCED2B5E8BFE79F004AF81C8F3
56D20FCD5E19DE85652177B1A740E8BC7E6B95924F430726B7E8CE9642CC3D70
59C63623EBC9F4FA5C60905B5624D1C9F9866E56F036F3A12AAF6549A1848674
2B08263B38757EC0A5809A27AB7D4942BC9D1ED49797AA5C8C0E831C511F426C
D0EA830971E35E15B829961B0AF87CC04A2E66BE960F087AC3D7DC734C91179E
A40975A35E995AA585F92CD6A704859554216124DA6A74F10DC860087D2AE104
AE3CAF16C01EDB404B73183A99D3D12FAA6F1B9BEF8B6830A91CD7FB8AF94EEC
6F1FE6FB76F11979C7744E544A9BD46BD000FFBEBF4BCB673D094E476382450E
15BF285F4BA6FD649BE2E37DB229D70E27C781755FA7D0F9148215454531AE2D
12B10ED201A9F13DC43DE29BC6833F0EEA521E8B3356FB849193F84AFCBA2C1F
C2BD60B7E1B0BDD5DB7499D8A2D9C168E7CCB2FAD1706473F9B0F31EAB17B087
59FB451332017633D565B156061FD7ED30FA9E0FE9CE29057D1BC216C4729F99
1426FA80ED0E9EB5C2FC0334D0309C30BF00AE1912ED07D42B77FAF7334640BA
B6DA9957C33D242591AA8C19349A2D5A7BCD1E1F0928B609E09A3B7418E30256
4C9E4EB4F837D244A22DC4F58D13F2C9056A5AE14710B89F8746496952717643
F6B82924EC76BF8A26FECAC4C94F3281FFEFA725879CCA49C8E140E648C01EB8
0D495358B0811B732B8367107309BB2C976681EDF2C5C46D674B74DC0995179B
87A956A4A5D111C3FA050D5FED2A5C5D7926212A84EC1097785D1902031D6FC0
BC243227920CC16BD860094303867041D198996C739E0D2B9AE2F378D1C89EE0
E9D5EEBC534A8DD3B50805E74E575F4B52E9A930014C85EEA9476B6C859D8110
5F563099ACFCBD0F15FD4799AF0E42F2F7704FC030D9108EF72D171EAE64618B
DABA05EDA566E30090B8A3E5D4CEB1752ADCE156CB2C0D0C98A1E60832927C67
3D6E528FB20A52DABAF7035C2ED4B46D62CA75B03CCB974756E28A7BC1916FEA
63B0D9A8E6B0BCF0115B22E573B0A7C3CEBFBE9206FAA43B332B2CEDB9DAD51A
BD703F98BCAF4C6205808A22ED37D8CE1158879B2942CBE85E39C60E4680DEDF
DBBD2BE8677569C646EA23E3B9F2930C0343FE821246B9C1C5DCDB8229BCACE5
4BC5A6C846EAAF3E000C924561CB61B451E0E6543BC7187B4A788C405A2F0B14
625573AEE54676F826D7C8EF70CB5CB8B8CFE4441CEF04F06A82D605EB6B8AED
3945F8A1F7697A696EC0CB114E00F0DEC40B674E9656E23BB3D9C710AFA045A3
B364CDDA75948F691673DDA0746F8836E374377272F169AA67072EC91767ECEB
140B604800D5F8503F445AC7BF4AEEA675FBC8EEAFC78D6787F4FA2080210589
D4548EEF759BD7E30508B5669086D15AD87697A1FBEFBDC8C18D6D28B05ECCAB
3DDEE0F1AE3849B2DCB3072FCB43FB0B3CB3F70E42A15BE661476449279DB1D4
4F893310B9BEC13EC898FE046BCD3C58A51932B576FD4C36E8630398383EEC77
18AD1B90B349036A9E747EC9F910524EEE46F1DF9AF9EEB0470C0AA177262126
3905EFD2F9EA5A5EB69B5667314FC5F898AF5891402BE5FCB1FA3D738F9BB6A6
E8DECD7DBD872E93C6489F057A0CE412A89DBF48134F8420465F56C69D242135
F8BD994CE9B77B6C5CCED6AA7C33B574A079D6BF744D2B59B950965970B2AC00
FF92D92818742DF7CA2D119C3D2CA061EE92DC99D156886251624D9AE45ECA6E
2969BC3BC0DE31ED94BD11F414CCA666D80022B2FBC505C467F05AC612A432EC
56E6A2355ABF3FA287E8C6D173F92C846E9DDA600716AD3AD0CBC9013396B6D6
600284B5792365171B504305F624CC2B0CF4806D637EB93F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (paper.dvi)
@start /Fa 133[50 3[50 50 50 50 50 2[50 50 1[50 2[50
1[50 50 50 50 50 1[50 1[50 2[50 92[{ TeXBase1Encoding ReEncodeFont }18
83.022 /NimbusMonL-Bold rf /Fb 103[50 30[50 50 50 50
50 50 50 50 1[50 50 50 50 50 50 50 50 50 50 50 50 50
50 50 50 1[50 12[50 5[50 13[50 1[50 1[50 4[50 50 50 1[50
1[50 50 50 2[50 6[50 35[{ TeXBase1Encoding ReEncodeFont }40
83.022 /NimbusMonL-ReguObli rf /Fc 198[21 21 21 21 21
21 21 21 21 21 48[{ TeXBase1Encoding ReEncodeFont }10
41.511 /NimbusRomNo9L-Regu rf /Fd 103[50 26[50 1[50 1[50
50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50
50 50 50 50 50 50 1[50 9[50 50 50 50 1[50 50 50 50 50
50 1[50 50 50 50 50 50 50 50 50 2[50 50 50 50 1[50 50
50 50 50 50 50 50 50 50 1[50 50 50 1[50 50 50 1[50 50
2[50 50 33[{ TeXBase1Encoding ReEncodeFont }72 83.022
/NimbusMonL-Regu rf /Fe 134[37 1[55 1[42 23 32 32 1[42
42 42 60 23 37 1[23 42 42 23 37 42 37 42 42 9[69 2[46
42 10[60 1[51 51 60 55 51 51 1[42 16[21 28 21 44[{
 TeXBase1Encoding ReEncodeFont }35 83.022 /NimbusRomNo9L-ReguItal
rf /Ff 134[42 42 2[46 28 32 37 2[42 46 69 1[46 1[23 1[42
1[37 46 37 1[42 9[83 60 4[65 3[78 55 2[32 1[65 51 55
60 60 1[60 6[28 58[{ TeXBase1Encoding ReEncodeFont }29
83.022 /NimbusRomNo9L-Medi rf /Fg 104[83 28[37 42 42
60 42 42 23 32 28 42 42 42 42 65 23 42 23 23 42 42 28
37 42 37 42 37 9[78 60 1[51 46 1[60 1[60 60 74 51 2[28
60 60 46 51 60 55 55 60 1[37 4[23 3[42 1[42 42 42 42
42 23 21 28 21 2[28 28 28 36[46 2[{ TeXBase1Encoding ReEncodeFont }61
83.022 /NimbusRomNo9L-Regu rf /Fh 166[48 48 2[48 41 37
44 2[48 48 2[48 1[22 1[48 1[41 48 44 67[{
 TeXBase1Encoding ReEncodeFont }14 66.4176 /NimbusRomNo9L-Regu
rf /Fi 136[66 1[46 25 36 30 1[46 46 46 71 25 46 1[25
46 46 1[41 46 41 46 41 12[56 51 3[66 5[30 2[51 1[66 61
1[66 6[25 4[46 2[46 46 46 25 23 46[{ TeXBase1Encoding ReEncodeFont }34
91.3242 /NimbusRomNo9L-Regu rf /Fj 137[100 1[55 78 66
2[100 2[55 1[55 4[88 1[88 1[88 16[111 144 5[66 3[122
10[55 7[100 2[55 47[{ TeXBase1Encoding ReEncodeFont }17
199.253 /NimbusRomNo9L-Regu rf /Fk 198[29 29 29 29 29
29 29 29 29 49[{ TeXBase1Encoding ReEncodeFont }9 58.1154
/NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 311 Project 1: UNIX File I/O)/Subject
(CS 311 Project 1)/Creator (LaTeX with hyperref package)/Author (Andrew Chase)/Keywords
(cs311 ``operating systems'' files filesystem I/O) /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -331 a Black 0 TeXcolorgray 3721 -223 a Fk(1)p
Black 150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a
0 TeXcolorgray 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Work Log) /OUT pdfmark
end
 150 0 a 150 0
a
SDict begin [/Count -5/Dest (section.2) cvn/Title (Questions) /OUT
pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (The design you plan to use to implement the SSTF algorithms.)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (What do you think the main point of this assignment is?)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (How did you personally approach the problem? Design decisions, algorithm, etc.)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.4) cvn/Title (How did you ensure your solution was correct? Testing details, for instance.)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.5) cvn/Title (What did you learn?)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Concurrency Exercise: Git Log)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -1/Dest (section.4) cvn/Title (Code Listing) /OUT
pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.4.1) cvn/Title (sstf-iosched.c)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150
0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 18 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 982
136 a Fj(Project)71 b(2:)f(I/O)g(Ele)-5 b(v)g(ators)1676
386 y Fi(Andre)n(w)31 b(Chase)1845 553 y(OS)h(II)1721
720 y(Spring)f(2015)311 886 y(Abstract:)h(Describes)e(w)o(ork)i(done)e
(to)i(b)n(uild)g(and)f(run)h(a)f(custom)g(Shortest)g(Seek)g(T)m(ime)g
(First)i(I/O)1766 1053 y(scheduler)-5 b(.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(2)p 0 TeXcolorgray 1755 100 a
SDict begin H.S end
 1755 100 a 1755 100
a
SDict begin 18 H.A end
 1755 100 a 1755 100 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 1755 100 a 2 w Fg(C)t Fh(O)t(N)t(T)t(E)t(N)t(T)
t(S)p 1 0 0 TeXcolorrgb 150 332 a
SDict begin H.S end
 150 332 a Ff(I)196
b(W)-6 b(ork)31 b(Log)750 332 y
SDict begin 18 H.L end
 750 332 a 750 332 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 750
332 a 0 TeXcolorgray 2958 w Fg(3)p 1 0 0 TeXcolorrgb
150 565 a
SDict begin H.S end
 150 565 a Ff(II)164 b(Questions)729 565 y
SDict begin 18 H.L end
 729
565 a 729 565 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 729 565 a 0 TeXcolorgray 2979 w Fg(3)p
1 0 0 TeXcolorrgb 378 714 a
SDict begin H.S end
 378 714 a Fg(II-A)k(The)28
b(design)g(you)f(plan)h(to)h(use)g(to)f(implement)f(the)i(SSTF)g
(algorithms.)2857 714 y
SDict begin 18 H.L end
 2857 714 a 2857 714 a
SDict begin [/Subtype /Link/Dest (subsection.2.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2857 714
a 0 TeXcolorgray 53 w Fg(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 154 w(3)p 0 TeXcolorgray 1 0 0 TeXcolorrgb
378 863 a
SDict begin H.S end
 378 863 a Fg(II-B)173 b(What)29 b(do)f(you)f(think)h(the)g
(main)h(point)e(of)i(this)g(assignment)e(is?)2631 863
y
SDict begin 18 H.L end
 2631 863 a 2631 863 a
SDict begin [/Subtype /Link/Dest (subsection.2.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2631 863 a 0 TeXcolorgray 30
w Fg(.)42 b(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 154 w(3)p 0 TeXcolorgray 1 0 0 TeXcolorrgb
378 1013 a
SDict begin H.S end
 378 1013 a Fg(II-C)173 b(Ho)n(w)28 b(did)g(you)g(personally)
f(approach)f(the)j(problem?)d(Design)i(decisions,)g(algorithm,)f(etc.)
3462 1013 y
SDict begin 18 H.L end
 3462 1013 a 3462 1013 a
SDict begin [/Subtype /Link/Dest (subsection.2.3) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3462 1013 a 0 TeXcolorgray
71 w Fg(.)p 0 TeXcolorgray 154 w(3)p 0 TeXcolorgray 1 0 0
TeXcolorrgb 378 1162 a
SDict begin H.S end
 378 1162 a Fg(II-D)168 b(Ho)n(w)28
b(did)g(you)g(ensure)g(your)f(solution)g(w)o(as)j(correct?)d(T)-6
b(esting)28 b(details,)h(for)f(instance.)3303 1162 y
SDict begin 18 H.L end

3303 1162 a 3303 1162 a
SDict begin [/Subtype /Link/Dest (subsection.2.4) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3303 1162 a 0 TeXcolorgray 43
w Fg(.)42 b(.)f(.)g(.)p 0 TeXcolorgray 154 w(3)p 0 TeXcolorgray
1 0 0 TeXcolorrgb 378 1312 a
SDict begin H.S end
 378 1312 a Fg(II-E)177 b(What)29
b(did)f(you)f(learn?)1391 1312 y
SDict begin 18 H.L end
 1391 1312 a 1391 1312
a
SDict begin [/Subtype /Link/Dest (subsection.2.5) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1391 1312 a 0 TeXcolorgray 25 w Fg(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray
154 w(4)p 0 TeXcolorgray 1 0 0 TeXcolorrgb 150 1544 a
SDict begin H.S end

150 1544 a Ff(III)132 b(Concurr)o(ency)30 b(Exer)o(cise:)g(Git)g(Log)
1516 1544 y
SDict begin 18 H.L end
 1516 1544 a 1516 1544 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1516 1544 a 0 TeXcolorgray
2192 w Fg(4)p 1 0 0 TeXcolorrgb 150 1777 a
SDict begin H.S end
 150 1777 a
Ff(IV)136 b(Code)31 b(Listing)843 1777 y
SDict begin 18 H.L end
 843 1777 a 843
1777 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 843 1777 a 0 TeXcolorgray 2865 w Fg(4)p 1 0 0
TeXcolorrgb 378 1926 a
SDict begin H.S end
 378 1926 a Fg(IV)-8 b(-A)144 b(sstf-iosched.c)
1146 1926 y
SDict begin 18 H.L end
 1146 1926 a 1146 1926 a
SDict begin [/Subtype /Link/Dest (subsection.4.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1146 1926 a 0 TeXcolorgray
21 w Fg(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray 154 w(4)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(3)p 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 18 H.A end
 150 0
a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 0 a 1696 100 a Fg(I)t(.)45 b(W)s Fh(O)t(R)t(K)26
b Fg(L)t Fh(O)t(G)283 231 y Ff(Date)174 b(W)-6 b(ork)30
b(Done)283 381 y Fg(Apr)e(26)99 b(Write)29 b(module,)e(compile)g(and)h
(test)h(on)g(os-class.)150 538 y
SDict begin H.S end
 150 538 a 150 538 a
SDict begin 18 H.A end

150 538 a 150 538 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 150 538 a 1678 594 a Fg(I)t(I)t(.)45
b(Q)s Fh(U)t(E)t(S)t(T)t(I)t(O)t(N)t(S)150 635 y
SDict begin H.S end
 150
635 a 150 635 a
SDict begin 18 H.A end
 150 635 a 150 635 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 150 635 a 135 x Fe(A.)c(The)29
b(design)e(you)h(plan)g(to)h(use)f(to)h(implement)f(the)g(SSTF)g
(algorithms.)233 945 y Fg(The)i(original)f(plan)h(I)g(had)f(w)o(as)i
(to)g(k)o(eep)e(the)i(queue)e(alone,)g(and)g(simply)h(seek)g(the)h
(queue)e(each)g(time)i(a)f(dispatch)150 1095 y(happens)21
b(to)h(\002nd)h(the)f(request)g(closest)h(to)f(the)g(magnetic)g(reader)
f(head.)g(I)i(look)o(ed)e(through)f(tw)o(o)j(other)e(solutions)h
(posted)150 1244 y(online)27 b(\(cited)g(in)h(source\),)e(I)i(lik)o(ed)
g(the)g(design)f(of)g(the)h(second)f(solution.)f(It)i(w)o(as)h
(essentially)f(the)f(same)h(as)h(my)e(idea,)150 1394
y(b)n(ut)f(at)g(request)g(time)g(instead)g(of)f(dispatch)h(time.)g
(When)f(requests)h(were)g(added,)e(the)i(queue)f(is)i(iterated)f(o)o(v)
o(er)e(and)i(the)150 1543 y(request)i(is)h(put)f(in)h(the)g(lo)n(west)f
(position.)150 1692 y
SDict begin H.S end
 150 1692 a 150 1692 a
SDict begin 18 H.A end
 150 1692
a 150 1692 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 150 1692 a 131 x Fe(B.)41 b(What)28 b(do)g(you)g(think)g
(the)h(main)f(point)g(of)g(this)h(assignment)f(is?)233
1999 y Fg(I)38 b(think)f(the)h(main)f(point)g(of)g(the)h(assignment)f
(is)h(to)g(use)g(the)g(data)f(structure)g(primiti)n(v)o(es)g(taught)g
(in)g(class)i(and)150 2148 y(re-enforce)29 b(some)j(of)f(the)g(I/O)h
(scheduler)f(concepts.)f(Although)g(I/O)h(schedulers)g(aren')o(t)f(as)j
(important)d(on)h(personal)150 2298 y(computers)k(as)h(the)o(y)g(once)f
(were)h(\(due)g(to)g(SSDs)h(being)f(more)f(common\),)f(the)i(I/O)g
(scheduler)f(concepts)g(are)h(still)150 2447 y(important)26
b(because)h(the)o(y)g(gi)n(v)o(e)g(an)h(e)o(xample)e(of)i(the)f(kinds)g
(of)h(comple)o(x)e(problems)g(operating)g(system)i(k)o(ernels)f(ha)n(v)
o(e)150 2597 y(to)i(solv)o(e)f(ef)n(\002ciently)-5 b(.)150
2745 y
SDict begin H.S end
 150 2745 a 150 2745 a
SDict begin 18 H.A end
 150 2745 a 150 2745 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 150
2745 a 132 x Fe(C.)42 b(How)29 b(did)f(you)g(per)o(sonally)f(appr)l
(oac)o(h)g(the)h(pr)l(oblem?)g(Design)g(decisions,)g(algorithm,)f(etc.)
233 3052 y Fg(First)21 b(I)g(went)f(out)g(and)g(gathered)f(information)
f(on)i(the)g(problem)f(and)h(possible)g(solutions.)g(I)g(compared)f(tw)
o(o)h(dif)n(ferent)150 3202 y(solutions)g(to)g(the)g(noop)f(scheduler)
-5 b(.)19 b(One)h(of)g(the)h(tw)o(o)f(solutions)g(seem)g(to)h(be)f
(what)g(I)g(had)g(in)h(mind)e(for)h(ho)n(w)f(to)i(approach)150
3351 y(the)29 b(solution,)e(while)h(the)h(other)f(seemed)g(needlessly)g
(comple)o(x.)233 3501 y(After)f(I)h(implemented)d(and)i(tested)h(the)f
(solution)g(I)h(had)e(in)i(mind,)e(the)i(output)e(from)g(the)i(k)o
(ernel)f(look)o(ed)f(ok,)g(b)n(ut)i(it)150 3650 y(seemed)j(wrong.)e
(There')l(d)h(be)h(random)e(jumps)i(do)n(wn)f(to)h(the)h(\002rst)f
(sector)g(number)-5 b(.)30 b(Then,)g(later)m(,)h(after)g(lea)n(ving)f
(and)150 3800 y(doing)21 b(something)h(else)h(I)g(realized)f(that)h
(the)g(solution)f(I)h(had)f(used)h(w)o(as)g(wrong.)e(By)j(al)o(w)o(ays)
f(sorting)f(the)h(lo)n(west)g(sector)150 3949 y(\002rst)29
b(in)g(the)f(queue)g(this)h(ignores)e(the)i(f)o(act)f(that)h(the)f
(head)g(might)g(be)h(in)f(a)h(high)f(position.)233 4099
y(I)k(went)g(back)f(and)h(changed)e(the)i(algorithm)e(so)i(that)g(the)g
(queue)f(is)i(k)o(ept)e(sorted)h(by)f(the)h(distance)g(from)f(the)h
(last)150 4248 y(head)c(sector)g(that)h(went)f(to)h(disk.)f(This)h
(seemed)f(to)g(return)g(much)f(more)h(correct)f(results)i(in)g
(testing.)150 4397 y
SDict begin H.S end
 150 4397 a 150 4397 a
SDict begin 18 H.A end
 150 4397 a
150 4397 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.4) cvn /DEST pdfmark
end
 150 4397 a 131 x Fe(D.)41 b(How)29 b(did)f(you)g(ensur)m(e)h
(your)f(solution)f(was)j(corr)m(ect?)e(T)-8 b(esting)29
b(details,)f(for)h(instance)o(.)233 4704 y Fg(I)g(inserted)f(kprint)f
(calls)i(and)f(ran)g(the)h(k)o(ernel)e(in)i(the)g(emulator)-5
b(.)27 b(The)h(kprint)g(calls)h(recorded)d(the)j(sector)f(number)-5
b(.)233 4853 y(Example:)p 0 TeXcolorgray 0 TeXcolorgray
150 5077 a Fd(\230\230\230\230)49 b(537064)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(4)p 0 TeXcolorgray 150 100 a Fd(\230\230\230\230)49
b(536744)150 249 y(\230\230\230\230)g(0)150 399 y(\230\230\230\230)g
(4134152)150 548 y(\230\230\230\230)g(4134248)150 697
y(\230\230\230\230)g(4456448)150 847 y(\230\230\230\230)g(4593168)150
996 y(\230\230\230\230)g(4718592)150 1146 y(\230\230\230\230)g(5505040)
233 1370 y Fg(The)24 b(testing)h(helped)f(because)g(the)g(\002rst)i
(solution)e(I)g(had)h(implemented)d(w)o(asn')o(t)j(correct)e(and)h(it)i
(w)o(as)f(pretty)f(ob)o(vious)150 1519 y(to)k(see)h(from)e(the)h(k)o
(ernel)f(messages.)h(At)g(\002rst,)h(my)e(module)g(didn')o(t)f(load,)i
(and)f(using)h(dmesg)f(\227)h(grep)g(I)g(w)o(as)h(able)e(to)150
1669 y(\002nd)h(the)h(error)e(message)h(to)h(\002x)g(the)f(problem.)150
1817 y
SDict begin H.S end
 150 1817 a 150 1817 a
SDict begin 18 H.A end
 150 1817 a 150 1817 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.5) cvn /DEST pdfmark
end
 150
1817 a 132 x Fe(E.)41 b(What)28 b(did)g(you)g(learn?)233
2125 y Fg(I)g(learned)f(a)i(bit)f(about)g(the)g(noop)f(io)h(scheduler)f
(w)o(ork)g(in)h(linux.)g(Ho)n(w)g(to)g(compile)f(a)i(ele)n(v)n(ator)e
(module)g(and)g(ha)n(v)o(e)150 2274 y(it)i(run)f(in)h(linux.)150
2387 y
SDict begin H.S end
 150 2387 a 150 2387 a
SDict begin 18 H.A end
 150 2387 a 150 2387 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150
2387 a 1220 2535 a Fg(I)t(I)t(I)t(.)45 b(C)t Fh(O)t(N)t(C)t(U)t(R)t(R)t
(E)t(N)t(C)t(Y)27 b Fg(E)t Fh(X)t(E)t(R)t(C)t(I)t(S)t(E)t
Fg(:)e(G)t Fh(I)t(T)g Fg(L)t Fh(O)t(G)283 2667 y Ff(acr)o(onym)98
b(meaning)283 2817 y Fg(V)352 b Fd(version)283 2966 y
Fg(tag)310 b Fd(git)49 b(tag)283 3116 y Fg(MF)292 b(Number)27
b(of)h Fd(modified)48 b(files)p Fg(.)283 3265 y(AL)301
b(Number)27 b(of)h Fd(added)49 b(lines)p Fg(.)283 3414
y(DL)301 b(Number)27 b(of)h Fd(deleted)48 b(lines)p Fg(.)150
3559 y
SDict begin H.S end
 150 3559 a 150 3559 a
SDict begin 18 H.A end
 150 3559 a 150 3559 a
SDict begin [/View [/XYZ H.V]/Dest (table.1) cvn /DEST pdfmark end
 150
3559 a 843 3662 2214 4 v 843 3662 V 842 3811 4 150 v
893 3766 a Ff(V)100 b(tag)216 b(date)g(commit)31 b(message)99
b(MF)104 b(AL)h(DL)p 3055 3811 V 843 3815 2214 4 v 843
3815 V 843 3818 V 843 3818 V 842 3967 4 150 v 912 3923
a Fg(1)309 b(2016-04-26)95 b(init)665 b(0)99 b(144)172
b(0)p 3055 3967 V 843 3971 2214 4 v 843 3971 V 150 4083
a
SDict begin H.S end
 150 4083 a 150 4083 a
SDict begin 18 H.A end
 150 4083 a 150 4083 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 150 4083
a 1613 4232 a Fg(I)t(V)-7 b(.)46 b(C)t Fh(O)t(D)t(E)25
b Fg(L)t Fh(I)t(S)t(T)t(I)t(N)t(G)150 4259 y
SDict begin H.S end
 150 4259
a 150 4259 a
SDict begin 18 H.A end
 150 4259 a 150 4259 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 150 4259 a 149 x Fe(A.)41
b(sstf-iosc)o(hed.c)30 4583 y Fc(1)p 0.25 0.50 0.50 TeXcolorrgb
99 w Fb(/)200 4598 y(*)p 0 TeXcolorgray 30 4733 a Fc(2)p
0.25 0.50 0.50 TeXcolorrgb 200 4748 a Fb(*)299 4733 y(elevator)49
b(stf)p 0 TeXcolorgray 30 4882 a Fc(3)p 0.25 0.50 0.50
TeXcolorrgb 200 4897 a Fb(*)299 4882 y(References:)p
0 TeXcolorgray 30 5032 a Fc(4)p 0.25 0.50 0.50 TeXcolorrgb
598 5047 a Fb(*)698 5032 y(http://staff.osuosl.org/\230bkero/proj)o
(4diff)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(5)p 0 TeXcolorgray 30 100 a Fc(5)p 0.25 0.50 0.50
TeXcolorrgb 598 115 a Fb(*)698 100 y
(https://github.com/ryleyherrington/)o(linux)o(_kerne)o(l_411)o(/blob)o
(/maste)o(r/sst)o(f-io/)o(sstf-i)o(osche)o(d.c)p 0 TeXcolorgray
30 249 a Fc(6)p 0.25 0.50 0.50 TeXcolorrgb 598 264 a
Fb(*)698 249 y(http://www.makelinux.net/ldd3/chp-1)o(1-sec)o(t-5)p
0 TeXcolorgray 30 399 a Fc(7)p 0.25 0.50 0.50 TeXcolorrgb
598 414 a Fb(*)698 399 y(http://lxr.free-electrons.com/sourc)o(e/blo)o
(ck/ele)o(vator)o(.c#L3)o(51)p 0 TeXcolorgray 30 548
a Fc(8)p 0.25 0.50 0.50 TeXcolorrgb 200 563 a Fb(*)250
548 y(/)p 0 TeXcolorgray 30 697 a Fc(9)p 0.74 0.48 0.00
TeXcolorrgb 99 w Fb(#)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb(include)48 b(<linux)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb 5 w(/)p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb
(blkdev.h>)p 0 TeXcolorgray 9 847 a Fc(10)p 0.74 0.48 0.00
TeXcolorrgb 99 w Fb(#)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb(include)g(<linux)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb 5 w(/)p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb
(elevator.h>)p 0 TeXcolorgray 9 996 a Fc(11)p 0.74 0.48 0.00
TeXcolorrgb 99 w Fb(#)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb(include)g(<linux)p 0 TeXcolorgray 0.74 0.48 0.00
TeXcolorrgb 5 w(/)p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(bio.h>)p
0 TeXcolorgray 9 1146 a Fc(12)p 0.74 0.48 0.00 TeXcolorrgb
99 w Fb(#)p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(include)g(<linux)
p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb 5 w(/)p 0
TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(module.h>)p 0
TeXcolorgray 9 1295 a Fc(13)p 0.74 0.48 0.00 TeXcolorrgb
99 w Fb(#)p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(include)g(<linux)
p 0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb 5 w(/)p 0
TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(slab.h>)p 0 TeXcolorgray
9 1445 a Fc(14)p 0.74 0.48 0.00 TeXcolorrgb 99 w Fb(#)p
0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb(include)g(<linux)p
0 TeXcolorgray 0.74 0.48 0.00 TeXcolorrgb 5 w(/)p 0 TeXcolorgray
0.74 0.48 0.00 TeXcolorrgb(init.h>)p 0 TeXcolorgray 9
1594 a Fc(15)9 1743 y(16)p 0.00 0.50 0.00 TeXcolorrgb
99 w Fa(struct)p 0 TeXcolorgray 49 w Fd(sstf_data)g({)9
1893 y Fc(17)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(struct)p
0 TeXcolorgray 48 w Fd(list_head)g(queue;)9 2042 y Fc(18)p
0.69 0.00 0.25 TeXcolorrgb 498 w Fa(sector_t)p 0 TeXcolorgray
48 w Fd(last_sector;)9 2192 y Fc(19)99 b Fd(};)9 2341
y Fc(20)9 2491 y(21)p 0.00 0.50 0.00 TeXcolorrgb 99 w
Fa(static)p 0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb
49 w(void)p 0 TeXcolorgray 0.00 0.00 1.00 TeXcolorrgb
49 w Fd(sstf_merged_requests)p 0 TeXcolorgray(\()p 0.00 0.50 0.00
TeXcolorrgb Fa(struct)p 0 TeXcolorgray 45 w Fd(request_queue)p
0.40 0.40 0.40 TeXcolorrgb 2840 2506 a(*)p 0 TeXcolorgray
-15 x(q,)p 0.00 0.50 0.00 TeXcolorrgb 49 w Fa(struct)p
0 TeXcolorgray 49 w Fd(request)p 0.40 0.40 0.40 TeXcolorrgb
3786 2506 a(*)p 0 TeXcolorgray -15 x(rq,)9 2640 y Fc(22)p
0.00 0.50 0.00 TeXcolorrgb 3337 w Fa(struct)p 0 TeXcolorgray
49 w Fd(request)p 0.40 0.40 0.40 TeXcolorrgb 4135 2655
a(*)p 0 TeXcolorgray -15 x(next\))9 2790 y Fc(23)g Fd({)9
2939 y Fc(24)498 b Fd(list_del_init\()p 0.40 0.40 0.40
TeXcolorrgb(&)p 0 TeXcolorgray(next)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(queuelist\);)9 3088 y Fc(25)99 b Fd(})9
3238 y Fc(26)9 3387 y(27)p 0.00 0.50 0.00 TeXcolorrgb
99 w Fa(static)p 0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb
49 w(int)p 0 TeXcolorgray 0.00 0.00 1.00 TeXcolorrgb
49 w Fd(sstf_dispatch)p 0 TeXcolorgray(\()p 0.00 0.50 0.00
TeXcolorrgb Fa(struct)p 0 TeXcolorgray 46 w Fd(request_queue)p
0.40 0.40 0.40 TeXcolorrgb 2441 3402 a(*)p 0 TeXcolorgray
-15 x(q,)p 0.69 0.00 0.25 TeXcolorrgb 50 w Fa(int)p 0
TeXcolorgray 49 w Fd(force\))9 3537 y Fc(28)g Fd({)9
3686 y Fc(29)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(struct)p
0 TeXcolorgray 48 w Fd(sstf_data)p 0.40 0.40 0.40 TeXcolorrgb
1395 3701 a(*)p 0 TeXcolorgray -15 x(nd)p 0.40 0.40 0.40
TeXcolorrgb 50 w(=)p 0 TeXcolorgray 49 w(q)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(elevator)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(elevator_data;)9 3836 y Fc(30)9 3985 y(31)p 0.00 0.50 0.00
TeXcolorrgb 498 w Fa(if)p 0 TeXcolorgray 49 w Fd(\()p
0.40 0.40 0.40 TeXcolorrgb(!)p 0 TeXcolorgray(list_empty\()p
0.40 0.40 0.40 TeXcolorrgb(&)p 0 TeXcolorgray(nd)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(queue\)\))45 b({)9 4134 y Fc(32)p 0.00 0.50 0.00
TeXcolorrgb 896 w Fa(struct)p 0 TeXcolorgray 49 w Fd(request)p
0.40 0.40 0.40 TeXcolorrgb 1694 4149 a(*)p 0 TeXcolorgray
-15 x(rq;)9 4284 y Fc(33)896 b Fd(rq)p 0.40 0.40 0.40
TeXcolorrgb 49 w(=)p 0 TeXcolorgray 50 w(list_entry\(nd)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(queue.next,)p 0.00 0.50 0.00
TeXcolorrgb 45 w Fa(struct)p 0 TeXcolorgray 49 w Fd(request,)48
b(queuelist\);)9 4433 y Fc(34)896 b Fd(nd)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(last_sector)p 0.40 0.40 0.40 TeXcolorrgb
47 w(=)p 0 TeXcolorgray 50 w(rq)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(bio)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(bi_iter.bi_sector;)9 4583
y Fc(35)g Fd(list_del_init\()p 0.40 0.40 0.40 TeXcolorrgb(&)p
0 TeXcolorgray(rq)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0
TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(queuelist\);)9 4732 y Fc(36)g Fd(elv_dispatch_sort\(q,)46
b(rq\);)9 4882 y Fc(37)896 b Fd(printk\()p 0.73 0.13 0.13
TeXcolorrgb(")p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb
(\230\230\230\230)48 b(\045lu)p 0 TeXcolorgray 0.73 0.40 0.13
TeXcolorrgb Fa(\\n)p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb
Fd(")p 0 TeXcolorgray(,)g(\()p 0.69 0.00 0.25 TeXcolorrgb
Fa(unsigned)p 0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb
48 w(long)p 0 TeXcolorgray Fd(\)rq)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(bio)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(bi_iter.bi_sector\);)9
5031 y Fc(38)p 0.00 0.50 0.00 TeXcolorrgb 896 w Fa(return)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb 49 w Fd(1)p
0 TeXcolorgray(;)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(6)p 0 TeXcolorgray 9 100 a Fc(39)498 b Fd(})9 249
y Fc(40)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(return)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb 48 w Fd(0)p
0 TeXcolorgray(;)9 399 y Fc(41)99 b Fd(})9 548 y Fc(42)9
697 y(43)p 0.00 0.50 0.00 TeXcolorrgb 99 w Fa(static)p
0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb 49 w(void)p
0 TeXcolorgray 0.00 0.00 1.00 TeXcolorrgb 49 w Fd(sstf_add_request)p
0 TeXcolorgray(\()p 0.00 0.50 0.00 TeXcolorrgb Fa(struct)p
0 TeXcolorgray 45 w Fd(request_queue)p 0.40 0.40 0.40
TeXcolorrgb 2641 712 a(*)p 0 TeXcolorgray -15 x(q,)p
0.00 0.50 0.00 TeXcolorrgb 49 w Fa(struct)p 0 TeXcolorgray
49 w Fd(request)p 0.40 0.40 0.40 TeXcolorrgb 3587 712
a(*)p 0 TeXcolorgray -15 x(rq\))9 847 y Fc(44)g Fd({)9
996 y Fc(45)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(struct)p
0 TeXcolorgray 48 w Fd(sstf_data)p 0.40 0.40 0.40 TeXcolorrgb
1395 1011 a(*)p 0 TeXcolorgray -15 x(nd)p 0.40 0.40 0.40
TeXcolorrgb 50 w(=)p 0 TeXcolorgray 49 w(q)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(elevator)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(elevator_data;)9 1146 y Fc(46)p 0.00 0.50 0.00 TeXcolorrgb
498 w Fa(struct)p 0 TeXcolorgray 48 w Fd(list_head)p
0.40 0.40 0.40 TeXcolorrgb 1395 1161 a(*)p 0 TeXcolorgray
-15 x(request_head;)9 1295 y Fc(47)p 0.00 0.50 0.00 TeXcolorrgb
498 w Fa(struct)p 0 TeXcolorgray 48 w Fd(request)p 0.40 0.40 0.40
TeXcolorrgb 1296 1310 a(*)p 0 TeXcolorgray -15 x(request_item;)9
1445 y Fc(48)9 1594 y(49)498 b Fd(list_for_each\(request_head,)p
0.40 0.40 0.40 TeXcolorrgb 44 w(&)p 0 TeXcolorgray(nd)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(queue\))48 b({)9 1743
y Fc(50)896 b Fd(request_item)p 0.40 0.40 0.40 TeXcolorrgb
48 w(=)p 0 TeXcolorgray 49 w(list_entry\(request_head,)p
0.00 0.50 0.00 TeXcolorrgb 46 w Fa(struct)p 0 TeXcolorgray
48 w Fd(request,)49 b(queuelist\);)9 1893 y Fc(51)p 0.00 0.50 0.00
TeXcolorrgb 896 w Fa(if)p 0 TeXcolorgray 49 w Fd(\(rq)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(bio)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(bi_iter.bi_sector)p 0.40 0.40 0.40 TeXcolorrgb 45 w(<)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(=)p 0 TeXcolorgray
50 w(abs\(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(last_sector)p
0.40 0.40 0.40 TeXcolorrgb 46 w(-)p 0 TeXcolorgray 50
w(request_item)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(bio)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(bi_iter.bi_sec)o(tor\)\))43 b({)9 2042
y Fc(52)1295 b Fd(list_add_tail\()p 0.40 0.40 0.40 TeXcolorrgb(&)p
0 TeXcolorgray(rq)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0
TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queuelist,)
44 b(request_head\);)9 2192 y Fc(53)p 0.00 0.50 0.00
TeXcolorrgb 1295 w Fa(return)p 0 TeXcolorgray Fd(;)9
2341 y Fc(54)896 b Fd(})9 2491 y Fc(55)498 b Fd(})9 2640
y Fc(56)9 2790 y(57)g Fd(printk\()p 0.73 0.13 0.13 TeXcolorrgb(")p
0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(\230\230\230\230)47
b(------)p 0 TeXcolorgray 0.73 0.40 0.13 TeXcolorrgb
49 w Fa(\\n)p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb
Fd(")p 0 TeXcolorgray(\);)9 2939 y Fc(58)498 b Fd(list_add_tail\()p
0.40 0.40 0.40 TeXcolorrgb(&)p 0 TeXcolorgray(rq)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(queuelist,)p 0.40 0.40 0.40 TeXcolorrgb
44 w(&)p 0 TeXcolorgray(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queue\);)9
3088 y Fc(59)99 b Fd(})9 3238 y Fc(60)9 3387 y(61)p 0.00 0.50 0.00
TeXcolorrgb 99 w Fa(static)p 0 TeXcolorgray 0.00 0.50 0.00
TeXcolorrgb 49 w(struct)p 0 TeXcolorgray 48 w Fd(request)p
0.40 0.40 0.40 TeXcolorrgb 1246 3402 a(*)p 0 TeXcolorgray
9 3537 a Fc(62)p 0.00 0.00 1.00 TeXcolorrgb 99 w Fd
(sstf_former_request)p 0 TeXcolorgray(\()p 0.00 0.50 0.00
TeXcolorrgb Fa(struct)p 0 TeXcolorgray 45 w Fd(request_queue)p
0.40 0.40 0.40 TeXcolorrgb 2192 3552 a(*)p 0 TeXcolorgray
-15 x(q,)p 0.00 0.50 0.00 TeXcolorrgb 50 w Fa(struct)p
0 TeXcolorgray 48 w Fd(request)p 0.40 0.40 0.40 TeXcolorrgb
3139 3552 a(*)p 0 TeXcolorgray -15 x(rq\))9 3686 y Fc(63)g
Fd({)9 3836 y Fc(64)p 0.00 0.50 0.00 TeXcolorrgb 498
w Fa(struct)p 0 TeXcolorgray 48 w Fd(sstf_data)p 0.40 0.40 0.40
TeXcolorrgb 1395 3851 a(*)p 0 TeXcolorgray -15 x(nd)p
0.40 0.40 0.40 TeXcolorrgb 50 w(=)p 0 TeXcolorgray 49
w(q)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(elevator)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(elevator_data;)9 3985 y Fc(65)9 4134 y(66)p
0.00 0.50 0.00 TeXcolorrgb 498 w Fa(if)p 0 TeXcolorgray
49 w Fd(\(rq)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queuelist.prev)p
0.40 0.40 0.40 TeXcolorrgb 46 w(=)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(=)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb
50 w(&)p 0 TeXcolorgray(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queue\))9
4284 y Fc(67)p 0.00 0.50 0.00 TeXcolorrgb 896 w Fa(return)p
0 TeXcolorgray 0.00 0.50 0.00 TeXcolorrgb 49 w Fd(NULL)p
0 TeXcolorgray(;)9 4433 y Fc(68)p 0.00 0.50 0.00 TeXcolorrgb
498 w Fa(return)p 0 TeXcolorgray 48 w Fd(list_entry\(rq)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(queuelist.prev,)p 0.00 0.50 0.00
TeXcolorrgb 44 w Fa(struct)p 0 TeXcolorgray 49 w Fd(request,)48
b(queuelist\);)9 4583 y Fc(69)99 b Fd(})9 4732 y Fc(70)9
4882 y(71)p 0.00 0.50 0.00 TeXcolorrgb 99 w Fa(static)p
0 TeXcolorgray 0.00 0.50 0.00 TeXcolorrgb 49 w(struct)p
0 TeXcolorgray 48 w Fd(request)p 0.40 0.40 0.40 TeXcolorrgb
1246 4897 a(*)p 0 TeXcolorgray 9 5031 a Fc(72)p 0.00 0.00 1.00
TeXcolorrgb 99 w Fd(sstf_latter_request)p 0 TeXcolorgray(\()p
0.00 0.50 0.00 TeXcolorrgb Fa(struct)p 0 TeXcolorgray
45 w Fd(request_queue)p 0.40 0.40 0.40 TeXcolorrgb 2192
5046 a(*)p 0 TeXcolorgray -15 x(q,)p 0.00 0.50 0.00 TeXcolorrgb
50 w Fa(struct)p 0 TeXcolorgray 48 w Fd(request)p 0.40 0.40 0.40
TeXcolorrgb 3139 5046 a(*)p 0 TeXcolorgray -15 x(rq\))p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(7)p 0 TeXcolorgray 9 100 a Fc(73)99 b Fd({)9 249
y Fc(74)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(struct)p
0 TeXcolorgray 48 w Fd(sstf_data)p 0.40 0.40 0.40 TeXcolorrgb
1395 264 a(*)p 0 TeXcolorgray -15 x(nd)p 0.40 0.40 0.40
TeXcolorrgb 50 w(=)p 0 TeXcolorgray 49 w(q)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(elevator)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(elevator_data;)9 399 y Fc(75)9 548 y(76)p 0.00 0.50 0.00
TeXcolorrgb 498 w Fa(if)p 0 TeXcolorgray 49 w Fd(\(rq)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(queuelist.next)p 0.40 0.40 0.40
TeXcolorrgb 46 w(=)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(=)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb 50 w(&)p 0
TeXcolorgray(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queue\))9
697 y Fc(77)p 0.00 0.50 0.00 TeXcolorrgb 896 w Fa(return)p
0 TeXcolorgray 0.00 0.50 0.00 TeXcolorrgb 49 w Fd(NULL)p
0 TeXcolorgray(;)9 847 y Fc(78)p 0.00 0.50 0.00 TeXcolorrgb
498 w Fa(return)p 0 TeXcolorgray 48 w Fd(list_entry\(rq)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(queuelist.next,)p 0.00 0.50 0.00
TeXcolorrgb 44 w Fa(struct)p 0 TeXcolorgray 49 w Fd(request,)48
b(queuelist\);)9 996 y Fc(79)99 b Fd(})9 1146 y Fc(80)9
1295 y(81)p 0.00 0.50 0.00 TeXcolorrgb 99 w Fa(static)p
0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb 49 w(int)p
0 TeXcolorgray 0.00 0.00 1.00 TeXcolorrgb 49 w Fd(sstf_init_queue)p
0 TeXcolorgray(\()p 0.00 0.50 0.00 TeXcolorrgb Fa(struct)p
0 TeXcolorgray 46 w Fd(request_queue)p 0.40 0.40 0.40
TeXcolorrgb 2541 1310 a(*)p 0 TeXcolorgray -15 x(q,)p
0.00 0.50 0.00 TeXcolorrgb 49 w Fa(struct)p 0 TeXcolorgray
49 w Fd(elevator_type)p 0.40 0.40 0.40 TeXcolorrgb 3786
1310 a(*)p 0 TeXcolorgray -15 x(e\))9 1445 y Fc(82)g
Fd({)9 1594 y Fc(83)p 0.00 0.50 0.00 TeXcolorrgb 498
w Fa(struct)p 0 TeXcolorgray 48 w Fd(sstf_data)p 0.40 0.40 0.40
TeXcolorrgb 1395 1609 a(*)p 0 TeXcolorgray -15 x(nd;)9
1743 y Fc(84)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(struct)p
0 TeXcolorgray 48 w Fd(elevator_queue)p 0.40 0.40 0.40
TeXcolorrgb 1644 1758 a(*)p 0 TeXcolorgray -15 x(eq;)9
1893 y Fc(85)9 2042 y(86)498 b Fd(eq)p 0.40 0.40 0.40
TeXcolorrgb 49 w(=)p 0 TeXcolorgray 50 w(elevator_alloc\(q,)46
b(e\);)9 2192 y Fc(87)p 0.00 0.50 0.00 TeXcolorrgb 498
w Fa(if)p 0 TeXcolorgray 49 w Fd(\()p 0.40 0.40 0.40
TeXcolorrgb(!)p 0 TeXcolorgray(eq\))9 2341 y Fc(88)p
0.00 0.50 0.00 TeXcolorrgb 896 w Fa(return)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb 49 w Fd(-)p 0 TeXcolorgray(ENOMEM;)9
2491 y Fc(89)9 2640 y(90)498 b Fd(nd)p 0.40 0.40 0.40
TeXcolorrgb 49 w(=)p 0 TeXcolorgray 50 w(kmalloc_node\()p
0.00 0.50 0.00 TeXcolorrgb Fa(sizeof)p 0 TeXcolorgray
Fd(\()p 0.40 0.40 0.40 TeXcolorrgb 15 x(*)p 0 TeXcolorgray
-15 x(nd\),)45 b(GFP_KERNEL,)i(q)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(node\);)9
2790 y Fc(91)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(if)p
0 TeXcolorgray 49 w Fd(\()p 0.40 0.40 0.40 TeXcolorrgb(!)p
0 TeXcolorgray(nd\))i({)9 2939 y Fc(92)896 b Fd(kobject_put\()p
0.40 0.40 0.40 TeXcolorrgb(&)p 0 TeXcolorgray(eq)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(kobj\);)9 3088 y Fc(93)p 0.00 0.50 0.00
TeXcolorrgb 896 w Fa(return)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb 49 w Fd(-)p 0 TeXcolorgray(ENOMEM;)9 3238
y Fc(94)498 b Fd(})9 3387 y Fc(95)g Fd(eq)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(elevator_data)p 0.40 0.40 0.40 TeXcolorrgb
46 w(=)p 0 TeXcolorgray 50 w(nd;)9 3537 y Fc(96)9 3686
y(97)g Fd(INIT_LIST_HEAD\()p 0.40 0.40 0.40 TeXcolorrgb(&)p
0 TeXcolorgray(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0
TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(queue\);)9
3836 y Fc(98)9 3985 y(99)g Fd(spin_lock_irq\(q)p 0.40 0.40 0.40
TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p
0 TeXcolorgray(queue_lock\);)-12 4134 y Fc(100)g Fd(q)p
0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray 0.40 0.40 0.40
TeXcolorrgb(>)p 0 TeXcolorgray(elevator)p 0.40 0.40 0.40
TeXcolorrgb 47 w(=)p 0 TeXcolorgray 50 w(eq;)-12 4284
y Fc(101)g Fd(spin_unlock_irq\(q)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(queue_lock\);)-12 4433 y Fc(102)p 0.00 0.50 0.00 TeXcolorrgb
498 w Fa(return)p 0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb
48 w Fd(0)p 0 TeXcolorgray(;)-12 4583 y Fc(103)99 b Fd(})-12
4732 y Fc(104)-12 4882 y(105)p 0.00 0.50 0.00 TeXcolorrgb
99 w Fa(static)p 0 TeXcolorgray 0.69 0.00 0.25 TeXcolorrgb
49 w(void)p 0 TeXcolorgray 0.00 0.00 1.00 TeXcolorrgb
49 w Fd(sstf_exit_queue)p 0 TeXcolorgray(\()p 0.00 0.50 0.00
TeXcolorrgb Fa(struct)p 0 TeXcolorgray 45 w Fd(elevator_queue)p
0.40 0.40 0.40 TeXcolorrgb 2641 4897 a(*)p 0 TeXcolorgray
-15 x(e\))-12 5031 y Fc(106)g Fd({)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(8)p 0 TeXcolorgray -12 100 a Fc(107)p 0.00 0.50 0.00
TeXcolorrgb 498 w Fa(struct)p 0 TeXcolorgray 48 w Fd(sstf_data)p
0.40 0.40 0.40 TeXcolorrgb 1395 115 a(*)p 0 TeXcolorgray
-15 x(nd)p 0.40 0.40 0.40 TeXcolorrgb 50 w(=)p 0 TeXcolorgray
49 w(e)p 0.40 0.40 0.40 TeXcolorrgb(-)p 0 TeXcolorgray
0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray(elevator_data;)-12
249 y Fc(108)-12 399 y(109)498 b Fd(BUG_ON\()p 0.40 0.40 0.40
TeXcolorrgb(!)p 0 TeXcolorgray(list_empty\()p 0.40 0.40 0.40
TeXcolorrgb(&)p 0 TeXcolorgray(nd)p 0.40 0.40 0.40 TeXcolorrgb(-)p
0 TeXcolorgray 0.40 0.40 0.40 TeXcolorrgb(>)p 0 TeXcolorgray
(queue\)\);)-12 548 y Fc(110)g Fd(kfree\(nd\);)-12 697
y Fc(111)99 b Fd(})-12 847 y Fc(112)-12 996 y(113)p 0.00 0.50 0.00
TeXcolorrgb 99 w Fa(static)p 0 TeXcolorgray 0.00 0.50 0.00
TeXcolorrgb 49 w(struct)p 0 TeXcolorgray 48 w Fd(elevator_type)48
b(elevator_sstf)p 0.40 0.40 0.40 TeXcolorrgb 47 w(=)p
0 TeXcolorgray 50 w({)-12 1146 y Fc(114)896 b Fd(.ops)p
0.40 0.40 0.40 TeXcolorrgb 49 w(=)p 0 TeXcolorgray 50
w({)-12 1295 y Fc(115)1693 b Fd(.elevator_merge_req_fn)p
0.40 0.40 0.40 TeXcolorrgb 793 w(=)p 0 TeXcolorgray 50
w(sstf_merged_requests,)-12 1445 y Fc(116)g Fd(.elevator_dispatch_fn)p
0.40 0.40 0.40 TeXcolorrgb 793 w(=)p 0 TeXcolorgray 50
w(sstf_dispatch,)-12 1594 y Fc(117)g Fd(.elevator_add_req_fn)p
0.40 0.40 0.40 TeXcolorrgb 793 w(=)p 0 TeXcolorgray 50
w(sstf_add_request,)-12 1743 y Fc(118)g Fd(.elevator_former_req_fn)p
0.40 0.40 0.40 TeXcolorrgb 793 w(=)p 0 TeXcolorgray 49
w(sstf_former_request,)-12 1893 y Fc(119)g Fd(.elevator_latter_req_fn)p
0.40 0.40 0.40 TeXcolorrgb 793 w(=)p 0 TeXcolorgray 49
w(sstf_latter_request,)-12 2042 y Fc(120)g Fd(.elevator_init_fn)p
0.40 0.40 0.40 TeXcolorrgb 794 w(=)p 0 TeXcolorgray 49
w(sstf_init_queue,)-12 2192 y Fc(121)g Fd(.elevator_exit_fn)p
0.40 0.40 0.40 TeXcolorrgb 794 w(=)p 0 TeXcolorgray 49
w(sstf_exit_queue,)-12 2341 y Fc(122)896 b Fd(},)-12
2491 y Fc(123)g Fd(.elevator_name)p 0.40 0.40 0.40 TeXcolorrgb
47 w(=)p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb 50
w(")p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(sstf)p
0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(")p 0 TeXcolorgray(,)-12
2640 y Fc(124)g Fd(.elevator_owner)p 0.40 0.40 0.40 TeXcolorrgb
47 w(=)p 0 TeXcolorgray 50 w(THIS_MODULE,)-12 2790 y
Fc(125)99 b Fd(};)-12 2939 y Fc(126)-12 3088 y(127)p
0.00 0.50 0.00 TeXcolorrgb 99 w Fa(static)p 0 TeXcolorgray
0.69 0.00 0.25 TeXcolorrgb 49 w(int)p 0 TeXcolorgray
49 w Fd(__init)p 0.00 0.00 1.00 TeXcolorrgb 49 w(sstf_init)p
0 TeXcolorgray(\()p 0.69 0.00 0.25 TeXcolorrgb Fa(void)p
0 TeXcolorgray Fd(\))-12 3238 y Fc(128)g Fd({)-12 3387
y Fc(129)p 0.00 0.50 0.00 TeXcolorrgb 498 w Fa(return)p
0 TeXcolorgray 48 w Fd(elv_register\()p 0.40 0.40 0.40
TeXcolorrgb(&)p 0 TeXcolorgray(elevator_sstf\);)-12 3537
y Fc(130)g Fd(})-12 3686 y Fc(131)-12 3836 y(132)p 0.00 0.50 0.00
TeXcolorrgb 99 w Fa(static)p 0 TeXcolorgray 0.69 0.00 0.25
TeXcolorrgb 49 w(void)p 0 TeXcolorgray 49 w Fd(__exit)p
0.00 0.00 1.00 TeXcolorrgb 48 w(sstf_exit)p 0 TeXcolorgray(\()p
0.69 0.00 0.25 TeXcolorrgb Fa(void)p 0 TeXcolorgray Fd(\))-12
3985 y Fc(133)g Fd({)-12 4134 y Fc(134)498 b Fd(elv_unregister\()p
0.40 0.40 0.40 TeXcolorrgb(&)p 0 TeXcolorgray(elevator_sstf\);)-12
4284 y Fc(135)99 b Fd(})-12 4433 y Fc(136)-12 4583 y(137)g
Fd(module_init\(sstf_init\);)-12 4732 y Fc(138)g Fd
(module_exit\(sstf_exit\);)-12 4882 y Fc(139)-12 5031
y(140)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fk(9)p 0 TeXcolorgray -12 100 a Fc(141)99 b Fd(MODULE_AUTHOR\()p
0.73 0.13 0.13 TeXcolorrgb(")p 0 TeXcolorgray 0.73 0.13 0.13
TeXcolorrgb(Andy)46 b(Chase)p 0 TeXcolorgray 0.73 0.13 0.13
TeXcolorrgb(")p 0 TeXcolorgray(\);)-12 249 y Fc(142)99
b Fd(MODULE_LICENSE\()p 0.73 0.13 0.13 TeXcolorrgb(")p
0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(GPL)p 0 TeXcolorgray
0.73 0.13 0.13 TeXcolorrgb(")p 0 TeXcolorgray(\);)-12
399 y Fc(143)g Fd(MODULE_DESCRIPTION\()p 0.73 0.13 0.13
TeXcolorrgb(")p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(sstf)45
b(IO)50 b(scheduler)p 0 TeXcolorgray 0.73 0.13 0.13 TeXcolorrgb(")p
0 TeXcolorgray(\);)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
